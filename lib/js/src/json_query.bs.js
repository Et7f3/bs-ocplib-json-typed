// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$Buffer = require("bs-platform/lib/js/buffer.js");
var Format = require("bs-platform/lib/js/format.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Printexc = require("bs-platform/lib/js/printexc.js");
var Json_repr = require("./json_repr.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var Illegal_pointer_notation = Caml_exceptions.create("Json_query.Illegal_pointer_notation");

var Unsupported_path_item = Caml_exceptions.create("Json_query.Unsupported_path_item");

var Cannot_merge = Caml_exceptions.create("Json_query.Cannot_merge");

function print_path_as_json_path($staropt$star, ppf, nonempty) {
  var wildcards = $staropt$star !== undefined ? $staropt$star : true;
  if (nonempty) {
    var print = function (ppf, param) {
      if (param) {
        var match = param[0];
        if (typeof match === "number") {
          if (match >= 926224370) {
            if (wildcards) {
              return Curry._2(Format.fprintf(ppf, /* Format */[
                              /* Char_literal */Block.__(12, [
                                  /* "*" */42,
                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                ]),
                              "*%a"
                            ]), print, param[1]);
            } else {
              throw [
                    Unsupported_path_item,
                    /* Star */926224370,
                    "JSON path w/o wildcards"
                  ];
            }
          } else if (wildcards) {
            return Curry._2(Format.fprintf(ppf, /* Format */[
                            /* Char_literal */Block.__(12, [
                                /* "-" */45,
                                /* Alpha */Block.__(15, [/* End_of_format */0])
                              ]),
                            "-%a"
                          ]), print, param[1]);
          } else {
            throw [
                  Unsupported_path_item,
                  /* Star */926224370,
                  "JSON path w/o wildcards"
                ];
          }
        } else if (match[0] >= 331416730) {
          return Curry._3(Format.fprintf(ppf, /* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "/" */47,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                ])
                            ]),
                          "/%s%a"
                        ]), match[1], print, param[1]);
        } else {
          return Curry._3(Format.fprintf(ppf, /* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "[" */91,
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* Char_literal */Block.__(12, [
                                      /* "]" */93,
                                      /* Alpha */Block.__(15, [/* End_of_format */0])
                                    ])
                                ])
                            ]),
                          "[%d]%a"
                        ]), match[1], print, param[1]);
        }
      } else {
        return /* () */0;
      }
    };
    return print(ppf, nonempty);
  } else {
    return Format.fprintf(ppf, /* Format */[
                /* Char_literal */Block.__(12, [
                    /* "/" */47,
                    /* End_of_format */0
                  ]),
                "/"
              ]);
  }
}

function print_path_as_json_pointer($staropt$star, ppf, nonempty) {
  var wildcards = $staropt$star !== undefined ? $staropt$star : true;
  if (nonempty) {
    var print = function (ppf, param) {
      if (param) {
        var match = param[0];
        if (typeof match === "number") {
          if (match >= 926224370) {
            throw [
                  Unsupported_path_item,
                  /* Star */926224370,
                  "JSON pointer"
                ];
          }
          if (wildcards) {
            return Curry._2(Format.fprintf(ppf, /* Format */[
                            /* String_literal */Block.__(11, [
                                "/-",
                                /* Alpha */Block.__(15, [/* End_of_format */0])
                              ]),
                            "/-%a"
                          ]), print, param[1]);
          } else {
            throw [
                  Unsupported_path_item,
                  /* Star */926224370,
                  "JSON pointer w/o wildcards"
                ];
          }
        } else if (match[0] >= 331416730) {
          return Curry._3(Format.fprintf(ppf, /* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "/" */47,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                ])
                            ]),
                          "/%s%a"
                        ]), match[1], print, param[1]);
        } else {
          return Curry._3(Format.fprintf(ppf, /* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "/" */47,
                              /* Int */Block.__(4, [
                                  /* Int_d */0,
                                  /* No_padding */0,
                                  /* No_precision */0,
                                  /* Alpha */Block.__(15, [/* End_of_format */0])
                                ])
                            ]),
                          "/%d%a"
                        ]), match[1], print, param[1]);
        }
      } else {
        return /* () */0;
      }
    };
    return print(ppf, nonempty);
  } else {
    return Format.fprintf(ppf, /* Format */[
                /* Char_literal */Block.__(12, [
                    /* "/" */47,
                    /* End_of_format */0
                  ]),
                "/"
              ]);
  }
}

function json_pointer_of_path(wildcards, path) {
  return Curry._2(Format.asprintf(/* Format */[
                  /* Alpha */Block.__(15, [/* End_of_format */0]),
                  "%a"
                ]), (function (param, param$1) {
                return print_path_as_json_pointer(wildcards, param, param$1);
              }), path);
}

function path_of_json_pointer($staropt$star, str) {
  var wildcards = $staropt$star !== undefined ? $staropt$star : true;
  var buf = $$Buffer.create(100);
  var len = str.length;
  var slashes = function (acc, _i) {
    while(true) {
      var i = _i;
      if (i >= len) {
        return List.rev(acc);
      } else if (Caml_string.get(str, i) === /* "/" */47) {
        _i = i + 1 | 0;
        continue ;
      } else {
        var acc$1 = acc;
        var _i$1 = i;
        while(true) {
          var i$1 = _i$1;
          if (i$1 >= len) {
            return List.rev(/* :: */[
                        interp(/* () */0),
                        acc$1
                      ]);
          } else {
            var unescaped = Caml_string.get(str, i$1);
            if (unescaped !== 47) {
              if (unescaped !== 126) {
                $$Buffer.add_char(buf, unescaped);
                _i$1 = i$1 + 1 | 0;
                continue ;
              } else {
                if ((i$1 + 1 | 0) >= len) {
                  throw [
                        Illegal_pointer_notation,
                        str,
                        i$1,
                        "Unterminated escape sequence"
                      ];
                }
                var _illegal = Caml_string.get(str, i$1);
                if (_illegal !== 48) {
                  if (_illegal !== 49) {
                    throw [
                          Illegal_pointer_notation,
                          str,
                          i$1 + 1 | 0,
                          "Illegal escape character"
                        ];
                  }
                  $$Buffer.add_char(buf, /* "/" */47);
                } else {
                  $$Buffer.add_char(buf, /* "~" */126);
                }
                _i$1 = i$1 + 1 | 0;
                continue ;
              }
            } else {
              return slashes(/* :: */[
                          interp(/* () */0),
                          acc$1
                        ], i$1);
            }
          }
        };
      }
    };
  };
  var interp = function (param) {
    var field = $$Buffer.contents(buf);
    $$Buffer.clear(buf);
    if (field === "-") {
      if (wildcards) {
        return /* Next */870035731;
      } else {
        throw [
              Unsupported_path_item,
              /* Next */870035731,
              "JSON pointer w/o wildcards"
            ];
      }
    } else {
      try {
        return /* `Index */[
                -784200974,
                Caml_format.caml_int_of_string(field)
              ];
      }
      catch (exn){
        return /* `Field */[
                331416730,
                field
              ];
      }
    }
  };
  if (len === 0) {
    return /* [] */0;
  } else {
    if (Caml_string.get(str, 0) !== /* "/" */47) {
      throw [
            Illegal_pointer_notation,
            str,
            0,
            "Missing initial slash"
          ];
    }
    return slashes(/* [] */0, 1);
  }
}

function path_operator_name(param) {
  if (typeof param === "number") {
    if (param >= 926224370) {
      return "wildcard";
    } else {
      return "array append";
    }
  } else if (param[0] >= 331416730) {
    return "field access";
  } else {
    return "array access";
  }
}

function print_error(print_unknown, ppf, err) {
  if (err[0] === Illegal_pointer_notation) {
    return Curry._3(Format.fprintf(ppf, /* Format */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_box */Block.__(1, [/* Format */[
                              /* String_literal */Block.__(11, [
                                  "<v 2>",
                                  /* End_of_format */0
                                ]),
                              "<v 2>"
                            ]]),
                        /* String_literal */Block.__(11, [
                            "Illegal pointer notation",
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@,",
                                    0,
                                    0
                                  ]),
                                /* String_literal */Block.__(11, [
                                    "At character ",
                                    /* Int */Block.__(4, [
                                        /* Int_d */0,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* String_literal */Block.__(11, [
                                            " of ",
                                            /* Caml_string */Block.__(3, [
                                                /* No_padding */0,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@,",
                                                        0,
                                                        0
                                                      ]),
                                                    /* String */Block.__(2, [
                                                        /* No_padding */0,
                                                        /* Formatting_lit */Block.__(17, [
                                                            /* Close_box */0,
                                                            /* End_of_format */0
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "@[<v 2>Illegal pointer notation@,At character %d of %S@,%s@]"
                  ]), err[2], err[1], err[3]);
  } else if (err[0] === Unsupported_path_item) {
    return Curry._2(Format.fprintf(ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Path operator ",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                " unsupported by ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ]),
                    "Path operator %s unsupported by %s"
                  ]), path_operator_name(err[1]), err[2]);
  } else if (err[0] === Cannot_merge) {
    var path = err[1];
    if (path) {
      var partial_arg = true;
      return Curry._2(Format.fprintf(ppf, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Unmergeable objects, incompatibility at ",
                          /* Alpha */Block.__(15, [/* End_of_format */0])
                        ]),
                      "Unmergeable objects, incompatibility at %a"
                    ]), (function (param, param$1) {
                    return print_path_as_json_path(partial_arg, param, param$1);
                  }), path);
    } else {
      return Format.fprintf(ppf, /* Format */[
                  /* String_literal */Block.__(11, [
                      "Unmergeable objects",
                      /* End_of_format */0
                    ]),
                  "Unmergeable objects"
                ]);
    }
  } else if (print_unknown !== undefined) {
    return Curry._2(print_unknown, ppf, err);
  } else {
    return Curry._1(Format.fprintf(ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Unhandled error ",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "Unhandled error %s"
                  ]), Printexc.to_string(err));
  }
}

function query(_path, _json) {
  while(true) {
    var json = _json;
    var path = _path;
    var match = Curry._1(Json_repr.Ezjsonm[/* view */0], json);
    if (path) {
      var match$1 = path[0];
      if (typeof match$1 === "number") {
        if (match$1 !== 926224370) {
          throw Caml_builtin_exceptions.not_found;
        }
        if (typeof match === "number") {
          throw Caml_builtin_exceptions.not_found;
        }
        var variant = match[0];
        var rempath = path[1];
        if (variant !== 65) {
          if (variant !== 79) {
            throw Caml_builtin_exceptions.not_found;
          }
          var match$2 = match[1];
          if (match$2) {
            try {
              return query(rempath, match$2[0][1]);
            }
            catch (exn){
              if (exn === Caml_builtin_exceptions.not_found) {
                _json = Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                      79,
                      match$2[1]
                    ]);
                continue ;
              } else {
                throw exn;
              }
            }
          } else {
            throw Caml_builtin_exceptions.not_found;
          }
        } else {
          var match$3 = match[1];
          if (match$3) {
            try {
              return query(rempath, match$3[0]);
            }
            catch (exn$1){
              if (exn$1 === Caml_builtin_exceptions.not_found) {
                _json = Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `A */[
                      65,
                      match$3[1]
                    ]);
                continue ;
              } else {
                throw exn$1;
              }
            }
          } else {
            throw Caml_builtin_exceptions.not_found;
          }
        }
      } else {
        var variant$1 = match$1[0];
        if (variant$1 !== -784200974) {
          if (variant$1 !== 331416730) {
            throw Caml_builtin_exceptions.not_found;
          }
          if (typeof match === "number") {
            throw Caml_builtin_exceptions.not_found;
          }
          if (match[0] !== 79) {
            throw Caml_builtin_exceptions.not_found;
          }
          var match$4 = match[1];
          if (match$4) {
            var match$5 = match$4[0];
            if (match$1[1] === match$5[0]) {
              _json = match$5[1];
              _path = path[1];
              continue ;
            } else {
              _json = Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                    79,
                    match$4[1]
                  ]);
              continue ;
            }
          } else {
            throw Caml_builtin_exceptions.not_found;
          }
        } else {
          if (typeof match === "number") {
            throw Caml_builtin_exceptions.not_found;
          }
          if (match[0] !== 65) {
            throw Caml_builtin_exceptions.not_found;
          }
          var cells = match[1];
          var i = match$1[1];
          var i$1 = i < 0 ? List.length(cells) - i | 0 : i;
          _json = List.nth(cells, i$1);
          _path = path[1];
          continue ;
        }
      }
    } else {
      return json;
    }
  };
}

function query_all(path, json) {
  var res = /* record */[/* contents : [] */0];
  var query = function (_path, _json) {
    while(true) {
      var json = _json;
      var path = _path;
      var match = Curry._1(Json_repr.Ezjsonm[/* view */0], json);
      if (path) {
        var match$1 = path[0];
        if (typeof match$1 === "number") {
          if (match$1 !== 926224370 || typeof match === "number") {
            return /* () */0;
          } else {
            var variant = match[0];
            var rempath = path[1];
            if (variant !== 65) {
              if (variant !== 79) {
                return /* () */0;
              } else {
                return List.iter((function(rempath){
                          return function (param) {
                            return query(rempath, param[1]);
                          }
                          }(rempath)), match[1]);
              }
            } else {
              return List.iter((function(rempath){
                        return function (param) {
                          return query(rempath, param);
                        }
                        }(rempath)), match[1]);
            }
          }
        } else {
          var variant$1 = match$1[0];
          if (variant$1 !== -784200974) {
            if (variant$1 !== 331416730 || typeof match === "number" || match[0] !== 79) {
              return /* () */0;
            } else {
              var match$2 = match[1];
              if (match$2) {
                var match$3 = match$2[0];
                if (match$1[1] === match$3[0]) {
                  _json = match$3[1];
                  _path = path[1];
                  continue ;
                } else {
                  _json = Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                        79,
                        match$2[1]
                      ]);
                  continue ;
                }
              } else {
                return /* () */0;
              }
            }
          } else if (typeof match === "number" || match[0] !== 65) {
            return /* () */0;
          } else {
            var cells = match[1];
            var i = match$1[1];
            var i$1 = i < 0 ? List.length(cells) - i | 0 : i;
            _json = List.nth(cells, i$1);
            _path = path[1];
            continue ;
          }
        }
      } else {
        res[0] = /* :: */[
          json,
          res[0]
        ];
        return /* () */0;
      }
    };
  };
  query(path, json);
  return res[0];
}

function sort_fields(param) {
  return List.sort((function (param, param$1) {
                return Caml_primitive.caml_string_compare(param[0], param$1[0]);
              }), param);
}

function equals(l, r) {
  var canon = function (v) {
    var match = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
    if (typeof match === "number") {
      return v;
    } else {
      var variant = match[0];
      if (variant !== 65) {
        if (variant !== 79) {
          return v;
        } else {
          return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                      79,
                      sort_fields(List.map((function (param) {
                                  return /* tuple */[
                                          param[0],
                                          canon(param[1])
                                        ];
                                }), match[1]))
                    ]);
        }
      } else {
        return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `A */[
                    65,
                    List.map(canon, match[1])
                  ]);
      }
    }
  };
  return Caml_obj.caml_equal(canon(l), canon(r));
}

function merge(l, r) {
  var merge$1 = function (path, l, r) {
    var match = Curry._1(Json_repr.Ezjsonm[/* view */0], l);
    var match$1 = Curry._1(Json_repr.Ezjsonm[/* view */0], r);
    var exit = 0;
    if (typeof match === "number") {
      if (match !== 870828711) {
        exit = 1;
      } else {
        return Curry._1(Json_repr.Ezjsonm[/* repr */1], match$1);
      }
    } else {
      var variant = match[0];
      if (variant !== 65) {
        if (variant !== 79 || typeof match$1 === "number" || match$1[0] !== 79) {
          exit = 1;
        } else {
          return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                      79,
                      merge_fields(path, /* [] */0, sort_fields(Pervasives.$at(match[1], match$1[1])))
                    ]);
        }
      } else if (typeof match$1 === "number" || match$1[0] !== 65) {
        exit = 1;
      } else {
        return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `A */[
                    65,
                    merge_cells(path, 0, /* [] */0, match[1], match$1[1])
                  ]);
      }
    }
    if (exit === 1) {
      if (match$1 !== 870828711) {
        if (equals(l, r)) {
          return l;
        } else {
          throw [
                Cannot_merge,
                List.rev(path)
              ];
        }
      } else {
        return Curry._1(Json_repr.Ezjsonm[/* repr */1], match);
      }
    }
    
  };
  var merge_cells = function (path, _i, _acc, _l, _r) {
    while(true) {
      var r = _r;
      var l = _l;
      var acc = _acc;
      var i = _i;
      if (l) {
        if (r) {
          var item = merge$1(/* :: */[
                /* `Index */[
                  -784200974,
                  i
                ],
                path
              ], l[0], r[0]);
          _r = r[1];
          _l = l[1];
          _acc = /* :: */[
            item,
            acc
          ];
          _i = i + 1 | 0;
          continue ;
        } else {
          return List.rev_append(acc, l);
        }
      } else {
        return List.rev_append(acc, r);
      }
    };
  };
  var merge_fields = function (path, _acc, _last) {
    while(true) {
      var last = _last;
      var acc = _acc;
      if (last) {
        var rrem = last[1];
        if (rrem) {
          var match = rrem[0];
          var match$1 = last[0];
          var lv = match$1[1];
          var lf = match$1[0];
          if (lf === match[0]) {
            var item = merge$1(/* :: */[
                  /* `Field */[
                    331416730,
                    lf
                  ],
                  path
                ], lv, match[1]);
            _last = rrem[1];
            _acc = /* :: */[
              /* tuple */[
                lf,
                item
              ],
              acc
            ];
            continue ;
          } else {
            _last = rrem;
            _acc = /* :: */[
              /* tuple */[
                lf,
                lv
              ],
              acc
            ];
            continue ;
          }
        } else {
          return last;
        }
      } else {
        return last;
      }
    };
  };
  return merge$1(/* [] */0, l, r);
}

function insert($staropt$star, path, value, root) {
  var merge$1 = $staropt$star !== undefined ? $staropt$star : merge;
  var revpath = function (sub) {
    var _acc = /* [] */0;
    var _l = path;
    while(true) {
      var l = _l;
      var acc = _acc;
      if (l === sub) {
        return List.rev(acc);
      } else if (l) {
        _l = l[1];
        _acc = /* :: */[
          l[0],
          acc
        ];
        continue ;
      } else {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "json_query.ml",
                174,
                29
              ]
            ];
      }
    };
  };
  var merge$2 = function (path, l, r) {
    try {
      return Curry._2(merge$1, l, r);
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn[0] === Cannot_merge) {
        throw [
              Cannot_merge,
              Pervasives.$at(revpath(path), exn[1])
            ];
      }
      throw exn;
    }
  };
  var nulls = function (_acc, _n, last) {
    while(true) {
      var n = _n;
      var acc = _acc;
      if (n <= 0) {
        return List.rev(/* :: */[
                    last,
                    acc
                  ]);
      } else {
        _n = n - 1 | 0;
        _acc = /* :: */[
          Curry._1(Json_repr.Ezjsonm[/* repr */1], /* Null */870828711),
          acc
        ];
        continue ;
      }
    };
  };
  var insert$1 = function (root, path) {
    var root$1 = root !== undefined ? Curry._1(Json_repr.Ezjsonm[/* view */0], Caml_option.valFromOption(root)) : undefined;
    if (path) {
      var match = path[0];
      var exit = 0;
      if (typeof match === "number") {
        if (match >= 926224370) {
          var rempath = path[1];
          var exit$1 = 0;
          if (root$1 !== undefined) {
            var match$1 = root$1;
            if (typeof match$1 === "number") {
              exit$1 = 2;
            } else {
              var variant = match$1[0];
              if (variant !== 65) {
                if (variant !== 79) {
                  exit$1 = 2;
                } else {
                  return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                              79,
                              List.map((function (param) {
                                      return /* tuple */[
                                              param[0],
                                              insert$1(Caml_option.some(param[1]), rempath)
                                            ];
                                    }), match$1[1])
                            ]);
                }
              } else {
                return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `A */[
                            65,
                            List.map((function (root) {
                                    return insert$1(Caml_option.some(root), rempath);
                                  }), match$1[1])
                          ]);
              }
            }
          } else {
            exit = 1;
          }
          if (exit$1 === 2) {
            if (rempath) {
              exit = 1;
            } else {
              return merge$2(path, value, Curry._1(Json_repr.Ezjsonm[/* repr */1], root$1));
            }
          }
          
        } else if (root$1 !== undefined) {
          var match$2 = root$1;
          if (typeof match$2 === "number" || match$2[0] !== 65) {
            exit = 1;
          } else {
            return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `A */[
                        65,
                        List.rev_append(List.rev(match$2[1]), /* :: */[
                              insert$1(undefined, path[1]),
                              /* [] */0
                            ])
                      ]);
          }
        } else {
          exit = 1;
        }
      } else if (match[0] >= 331416730) {
        var rempath$1 = path[1];
        var n = match[1];
        if (root$1 !== undefined) {
          var match$3 = root$1;
          if (typeof match$3 === "number") {
            throw [
                  Cannot_merge,
                  revpath(path)
                ];
          }
          if (match$3[0] !== 79) {
            throw [
                  Cannot_merge,
                  revpath(path)
                ];
          }
          return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                      79,
                      insert_fields(/* [] */0, n, rempath$1, match$3[1])
                    ]);
        } else {
          return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                      79,
                      /* :: */[
                        /* tuple */[
                          n,
                          insert$1(undefined, rempath$1)
                        ],
                        /* [] */0
                      ]
                    ]);
        }
      } else {
        var i = match[1];
        var exit$2 = 0;
        if (root$1 !== undefined) {
          var match$4 = root$1;
          if (typeof match$4 === "number" || match$4[0] !== 65) {
            exit$2 = 2;
          } else {
            var cells = match$4[1];
            var i$1 = i < 0 ? List.length(cells) - i | 0 : i;
            if (i$1 < 0) {
              throw [
                    Cannot_merge,
                    revpath(path)
                  ];
            }
            return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `A */[
                        65,
                        insert_cells(/* [] */0, i$1, path[1], cells)
                      ]);
          }
        } else {
          exit$2 = 2;
        }
        if (exit$2 === 2) {
          if (i !== 0) {
            if (root$1 !== undefined) {
              throw [
                    Cannot_merge,
                    revpath(path)
                  ];
            }
            if (i < 0) {
              throw [
                    Cannot_merge,
                    revpath(path)
                  ];
            }
            return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `A */[
                        65,
                        nulls(/* [] */0, Caml_primitive.caml_int_max(0, i - 1 | 0), insert$1(undefined, path[1]))
                      ]);
          } else {
            exit = 1;
          }
        }
        
      }
      if (exit === 1) {
        if (root$1 !== undefined) {
          throw [
                Cannot_merge,
                revpath(path)
              ];
        }
        return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `A */[
                    65,
                    /* :: */[
                      insert$1(undefined, path[1]),
                      /* [] */0
                    ]
                  ]);
      }
      
    } else if (root$1 !== undefined) {
      return merge$2(path, value, Curry._1(Json_repr.Ezjsonm[/* repr */1], root$1));
    } else {
      return value;
    }
  };
  var insert_fields = function (_acc, n, rempath, _fields) {
    while(true) {
      var fields = _fields;
      var acc = _acc;
      if (fields) {
        var rem = fields[1];
        var other = fields[0];
        if (n === other[0]) {
          return List.rev_append(/* :: */[
                      /* tuple */[
                        n,
                        insert$1(Caml_option.some(other[1]), rempath)
                      ],
                      acc
                    ], rem);
        } else {
          _fields = rem;
          _acc = /* :: */[
            other,
            acc
          ];
          continue ;
        }
      } else {
        return List.rev(/* :: */[
                    /* tuple */[
                      n,
                      insert$1(undefined, rempath)
                    ],
                    acc
                  ]);
      }
    };
  };
  var insert_cells = function (_acc, _n, rempath, _cells) {
    while(true) {
      var cells = _cells;
      var n = _n;
      var acc = _acc;
      if (cells) {
        var rem = cells[1];
        var root = cells[0];
        if (n !== 0) {
          _cells = rem;
          _n = n - 1 | 0;
          _acc = /* :: */[
            root,
            acc
          ];
          continue ;
        } else {
          return List.rev_append(/* :: */[
                      insert$1(Caml_option.some(root), rempath),
                      acc
                    ], rem);
        }
      } else {
        return nulls(acc, n, insert$1(undefined, rempath));
      }
    };
  };
  return insert$1(Caml_option.some(root), path);
}

function replace(path, value, root) {
  return insert((function (value, _prev) {
                return value;
              }), path, value, root);
}

function insert$1(path, value, root) {
  return insert(undefined, path, value, root);
}

function Make(funarg) {
  var query = function (_path, _json) {
    while(true) {
      var json = _json;
      var path = _path;
      var match = Curry._1(funarg[/* view */0], json);
      if (path) {
        var match$1 = path[0];
        if (typeof match$1 === "number") {
          if (match$1 !== 926224370) {
            throw Caml_builtin_exceptions.not_found;
          }
          if (typeof match === "number") {
            throw Caml_builtin_exceptions.not_found;
          }
          var variant = match[0];
          var rempath = path[1];
          if (variant !== 65) {
            if (variant !== 79) {
              throw Caml_builtin_exceptions.not_found;
            }
            var match$2 = match[1];
            if (match$2) {
              try {
                return query(rempath, match$2[0][1]);
              }
              catch (exn){
                if (exn === Caml_builtin_exceptions.not_found) {
                  _json = Curry._1(funarg[/* repr */1], /* `O */[
                        79,
                        match$2[1]
                      ]);
                  continue ;
                } else {
                  throw exn;
                }
              }
            } else {
              throw Caml_builtin_exceptions.not_found;
            }
          } else {
            var match$3 = match[1];
            if (match$3) {
              try {
                return query(rempath, match$3[0]);
              }
              catch (exn$1){
                if (exn$1 === Caml_builtin_exceptions.not_found) {
                  _json = Curry._1(funarg[/* repr */1], /* `A */[
                        65,
                        match$3[1]
                      ]);
                  continue ;
                } else {
                  throw exn$1;
                }
              }
            } else {
              throw Caml_builtin_exceptions.not_found;
            }
          }
        } else {
          var variant$1 = match$1[0];
          if (variant$1 !== -784200974) {
            if (variant$1 !== 331416730) {
              throw Caml_builtin_exceptions.not_found;
            }
            if (typeof match === "number") {
              throw Caml_builtin_exceptions.not_found;
            }
            if (match[0] !== 79) {
              throw Caml_builtin_exceptions.not_found;
            }
            var match$4 = match[1];
            if (match$4) {
              var match$5 = match$4[0];
              if (match$1[1] === match$5[0]) {
                _json = match$5[1];
                _path = path[1];
                continue ;
              } else {
                _json = Curry._1(funarg[/* repr */1], /* `O */[
                      79,
                      match$4[1]
                    ]);
                continue ;
              }
            } else {
              throw Caml_builtin_exceptions.not_found;
            }
          } else {
            if (typeof match === "number") {
              throw Caml_builtin_exceptions.not_found;
            }
            if (match[0] !== 65) {
              throw Caml_builtin_exceptions.not_found;
            }
            var cells = match[1];
            var i = match$1[1];
            var i$1 = i < 0 ? List.length(cells) - i | 0 : i;
            _json = List.nth(cells, i$1);
            _path = path[1];
            continue ;
          }
        }
      } else {
        return json;
      }
    };
  };
  var query_all = function (path, json) {
    var res = /* record */[/* contents : [] */0];
    var query = function (_path, _json) {
      while(true) {
        var json = _json;
        var path = _path;
        var match = Curry._1(funarg[/* view */0], json);
        if (path) {
          var match$1 = path[0];
          if (typeof match$1 === "number") {
            if (match$1 !== 926224370 || typeof match === "number") {
              return /* () */0;
            } else {
              var variant = match[0];
              var rempath = path[1];
              if (variant !== 65) {
                if (variant !== 79) {
                  return /* () */0;
                } else {
                  return List.iter((function(rempath){
                            return function (param) {
                              return query(rempath, param[1]);
                            }
                            }(rempath)), match[1]);
                }
              } else {
                return List.iter((function(rempath){
                          return function (param) {
                            return query(rempath, param);
                          }
                          }(rempath)), match[1]);
              }
            }
          } else {
            var variant$1 = match$1[0];
            if (variant$1 !== -784200974) {
              if (variant$1 !== 331416730 || typeof match === "number" || match[0] !== 79) {
                return /* () */0;
              } else {
                var match$2 = match[1];
                if (match$2) {
                  var match$3 = match$2[0];
                  if (match$1[1] === match$3[0]) {
                    _json = match$3[1];
                    _path = path[1];
                    continue ;
                  } else {
                    _json = Curry._1(funarg[/* repr */1], /* `O */[
                          79,
                          match$2[1]
                        ]);
                    continue ;
                  }
                } else {
                  return /* () */0;
                }
              }
            } else if (typeof match === "number" || match[0] !== 65) {
              return /* () */0;
            } else {
              var cells = match[1];
              var i = match$1[1];
              var i$1 = i < 0 ? List.length(cells) - i | 0 : i;
              _json = List.nth(cells, i$1);
              _path = path[1];
              continue ;
            }
          }
        } else {
          res[0] = /* :: */[
            json,
            res[0]
          ];
          return /* () */0;
        }
      };
    };
    query(path, json);
    return res[0];
  };
  var sort_fields = function (param) {
    return List.sort((function (param, param$1) {
                  return Caml_primitive.caml_string_compare(param[0], param$1[0]);
                }), param);
  };
  var equals = function (l, r) {
    var canon = function (v) {
      var match = Curry._1(funarg[/* view */0], v);
      if (typeof match === "number") {
        return v;
      } else {
        var variant = match[0];
        if (variant !== 65) {
          if (variant !== 79) {
            return v;
          } else {
            return Curry._1(funarg[/* repr */1], /* `O */[
                        79,
                        sort_fields(List.map((function (param) {
                                    return /* tuple */[
                                            param[0],
                                            canon(param[1])
                                          ];
                                  }), match[1]))
                      ]);
          }
        } else {
          return Curry._1(funarg[/* repr */1], /* `A */[
                      65,
                      List.map(canon, match[1])
                    ]);
        }
      }
    };
    return Caml_obj.caml_equal(canon(l), canon(r));
  };
  var merge = function (l, r) {
    var merge$1 = function (path, l, r) {
      var match = Curry._1(funarg[/* view */0], l);
      var match$1 = Curry._1(funarg[/* view */0], r);
      var exit = 0;
      if (typeof match === "number") {
        if (match !== 870828711) {
          exit = 1;
        } else {
          return Curry._1(funarg[/* repr */1], match$1);
        }
      } else {
        var variant = match[0];
        if (variant !== 65) {
          if (variant !== 79 || typeof match$1 === "number" || match$1[0] !== 79) {
            exit = 1;
          } else {
            return Curry._1(funarg[/* repr */1], /* `O */[
                        79,
                        merge_fields(path, /* [] */0, sort_fields(Pervasives.$at(match[1], match$1[1])))
                      ]);
          }
        } else if (typeof match$1 === "number" || match$1[0] !== 65) {
          exit = 1;
        } else {
          return Curry._1(funarg[/* repr */1], /* `A */[
                      65,
                      merge_cells(path, 0, /* [] */0, match[1], match$1[1])
                    ]);
        }
      }
      if (exit === 1) {
        if (match$1 !== 870828711) {
          if (equals(l, r)) {
            return l;
          } else {
            throw [
                  Cannot_merge,
                  List.rev(path)
                ];
          }
        } else {
          return Curry._1(funarg[/* repr */1], match);
        }
      }
      
    };
    var merge_cells = function (path, _i, _acc, _l, _r) {
      while(true) {
        var r = _r;
        var l = _l;
        var acc = _acc;
        var i = _i;
        if (l) {
          if (r) {
            var item = merge$1(/* :: */[
                  /* `Index */[
                    -784200974,
                    i
                  ],
                  path
                ], l[0], r[0]);
            _r = r[1];
            _l = l[1];
            _acc = /* :: */[
              item,
              acc
            ];
            _i = i + 1 | 0;
            continue ;
          } else {
            return List.rev_append(acc, l);
          }
        } else {
          return List.rev_append(acc, r);
        }
      };
    };
    var merge_fields = function (path, _acc, _last) {
      while(true) {
        var last = _last;
        var acc = _acc;
        if (last) {
          var rrem = last[1];
          if (rrem) {
            var match = rrem[0];
            var match$1 = last[0];
            var lv = match$1[1];
            var lf = match$1[0];
            if (lf === match[0]) {
              var item = merge$1(/* :: */[
                    /* `Field */[
                      331416730,
                      lf
                    ],
                    path
                  ], lv, match[1]);
              _last = rrem[1];
              _acc = /* :: */[
                /* tuple */[
                  lf,
                  item
                ],
                acc
              ];
              continue ;
            } else {
              _last = rrem;
              _acc = /* :: */[
                /* tuple */[
                  lf,
                  lv
                ],
                acc
              ];
              continue ;
            }
          } else {
            return last;
          }
        } else {
          return last;
        }
      };
    };
    return merge$1(/* [] */0, l, r);
  };
  var insert = function ($staropt$star, path, value, root) {
    var merge$1 = $staropt$star !== undefined ? $staropt$star : merge;
    var revpath = function (sub) {
      var _acc = /* [] */0;
      var _l = path;
      while(true) {
        var l = _l;
        var acc = _acc;
        if (l === sub) {
          return List.rev(acc);
        } else if (l) {
          _l = l[1];
          _acc = /* :: */[
            l[0],
            acc
          ];
          continue ;
        } else {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "json_query.ml",
                  174,
                  29
                ]
              ];
        }
      };
    };
    var merge$2 = function (path, l, r) {
      try {
        return Curry._2(merge$1, l, r);
      }
      catch (raw_exn){
        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
        if (exn[0] === Cannot_merge) {
          throw [
                Cannot_merge,
                Pervasives.$at(revpath(path), exn[1])
              ];
        }
        throw exn;
      }
    };
    var nulls = function (_acc, _n, last) {
      while(true) {
        var n = _n;
        var acc = _acc;
        if (n <= 0) {
          return List.rev(/* :: */[
                      last,
                      acc
                    ]);
        } else {
          _n = n - 1 | 0;
          _acc = /* :: */[
            Curry._1(funarg[/* repr */1], /* Null */870828711),
            acc
          ];
          continue ;
        }
      };
    };
    var insert$1 = function (root, path) {
      var root$1 = root !== undefined ? Curry._1(funarg[/* view */0], Caml_option.valFromOption(root)) : undefined;
      if (path) {
        var match = path[0];
        var exit = 0;
        if (typeof match === "number") {
          if (match >= 926224370) {
            var rempath = path[1];
            var exit$1 = 0;
            if (root$1 !== undefined) {
              var match$1 = root$1;
              if (typeof match$1 === "number") {
                exit$1 = 2;
              } else {
                var variant = match$1[0];
                if (variant !== 65) {
                  if (variant !== 79) {
                    exit$1 = 2;
                  } else {
                    return Curry._1(funarg[/* repr */1], /* `O */[
                                79,
                                List.map((function (param) {
                                        return /* tuple */[
                                                param[0],
                                                insert$1(Caml_option.some(param[1]), rempath)
                                              ];
                                      }), match$1[1])
                              ]);
                  }
                } else {
                  return Curry._1(funarg[/* repr */1], /* `A */[
                              65,
                              List.map((function (root) {
                                      return insert$1(Caml_option.some(root), rempath);
                                    }), match$1[1])
                            ]);
                }
              }
            } else {
              exit = 1;
            }
            if (exit$1 === 2) {
              if (rempath) {
                exit = 1;
              } else {
                return merge$2(path, value, Curry._1(funarg[/* repr */1], root$1));
              }
            }
            
          } else if (root$1 !== undefined) {
            var match$2 = root$1;
            if (typeof match$2 === "number" || match$2[0] !== 65) {
              exit = 1;
            } else {
              return Curry._1(funarg[/* repr */1], /* `A */[
                          65,
                          List.rev_append(List.rev(match$2[1]), /* :: */[
                                insert$1(undefined, path[1]),
                                /* [] */0
                              ])
                        ]);
            }
          } else {
            exit = 1;
          }
        } else if (match[0] >= 331416730) {
          var rempath$1 = path[1];
          var n = match[1];
          if (root$1 !== undefined) {
            var match$3 = root$1;
            if (typeof match$3 === "number") {
              throw [
                    Cannot_merge,
                    revpath(path)
                  ];
            }
            if (match$3[0] !== 79) {
              throw [
                    Cannot_merge,
                    revpath(path)
                  ];
            }
            return Curry._1(funarg[/* repr */1], /* `O */[
                        79,
                        insert_fields(/* [] */0, n, rempath$1, match$3[1])
                      ]);
          } else {
            return Curry._1(funarg[/* repr */1], /* `O */[
                        79,
                        /* :: */[
                          /* tuple */[
                            n,
                            insert$1(undefined, rempath$1)
                          ],
                          /* [] */0
                        ]
                      ]);
          }
        } else {
          var i = match[1];
          var exit$2 = 0;
          if (root$1 !== undefined) {
            var match$4 = root$1;
            if (typeof match$4 === "number" || match$4[0] !== 65) {
              exit$2 = 2;
            } else {
              var cells = match$4[1];
              var i$1 = i < 0 ? List.length(cells) - i | 0 : i;
              if (i$1 < 0) {
                throw [
                      Cannot_merge,
                      revpath(path)
                    ];
              }
              return Curry._1(funarg[/* repr */1], /* `A */[
                          65,
                          insert_cells(/* [] */0, i$1, path[1], cells)
                        ]);
            }
          } else {
            exit$2 = 2;
          }
          if (exit$2 === 2) {
            if (i !== 0) {
              if (root$1 !== undefined) {
                throw [
                      Cannot_merge,
                      revpath(path)
                    ];
              }
              if (i < 0) {
                throw [
                      Cannot_merge,
                      revpath(path)
                    ];
              }
              return Curry._1(funarg[/* repr */1], /* `A */[
                          65,
                          nulls(/* [] */0, Caml_primitive.caml_int_max(0, i - 1 | 0), insert$1(undefined, path[1]))
                        ]);
            } else {
              exit = 1;
            }
          }
          
        }
        if (exit === 1) {
          if (root$1 !== undefined) {
            throw [
                  Cannot_merge,
                  revpath(path)
                ];
          }
          return Curry._1(funarg[/* repr */1], /* `A */[
                      65,
                      /* :: */[
                        insert$1(undefined, path[1]),
                        /* [] */0
                      ]
                    ]);
        }
        
      } else if (root$1 !== undefined) {
        return merge$2(path, value, Curry._1(funarg[/* repr */1], root$1));
      } else {
        return value;
      }
    };
    var insert_fields = function (_acc, n, rempath, _fields) {
      while(true) {
        var fields = _fields;
        var acc = _acc;
        if (fields) {
          var rem = fields[1];
          var other = fields[0];
          if (n === other[0]) {
            return List.rev_append(/* :: */[
                        /* tuple */[
                          n,
                          insert$1(Caml_option.some(other[1]), rempath)
                        ],
                        acc
                      ], rem);
          } else {
            _fields = rem;
            _acc = /* :: */[
              other,
              acc
            ];
            continue ;
          }
        } else {
          return List.rev(/* :: */[
                      /* tuple */[
                        n,
                        insert$1(undefined, rempath)
                      ],
                      acc
                    ]);
        }
      };
    };
    var insert_cells = function (_acc, _n, rempath, _cells) {
      while(true) {
        var cells = _cells;
        var n = _n;
        var acc = _acc;
        if (cells) {
          var rem = cells[1];
          var root = cells[0];
          if (n !== 0) {
            _cells = rem;
            _n = n - 1 | 0;
            _acc = /* :: */[
              root,
              acc
            ];
            continue ;
          } else {
            return List.rev_append(/* :: */[
                        insert$1(Caml_option.some(root), rempath),
                        acc
                      ], rem);
          }
        } else {
          return nulls(acc, n, insert$1(undefined, rempath));
        }
      };
    };
    return insert$1(Caml_option.some(root), path);
  };
  var replace = function (path, value, root) {
    return insert((function (value, _prev) {
                  return value;
                }), path, value, root);
  };
  var insert$1 = function (path, value, root) {
    return insert(undefined, path, value, root);
  };
  return [
          query,
          query_all,
          insert$1,
          replace,
          merge
        ];
}

exports.print_path_as_json_pointer = print_path_as_json_pointer;
exports.print_path_as_json_path = print_path_as_json_path;
exports.json_pointer_of_path = json_pointer_of_path;
exports.path_of_json_pointer = path_of_json_pointer;
exports.query = query;
exports.query_all = query_all;
exports.insert = insert$1;
exports.replace = replace;
exports.merge = merge;
exports.Cannot_merge = Cannot_merge;
exports.Illegal_pointer_notation = Illegal_pointer_notation;
exports.Unsupported_path_item = Unsupported_path_item;
exports.print_error = print_error;
exports.Make = Make;
/* Format Not a pure module */
