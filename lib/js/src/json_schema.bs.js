// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Json_repr = require("./json_repr.bs.js");
var Caml_float = require("bs-platform/lib/js/caml_float.js");
var Json_query = require("./json_query.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var version = "http://json-schema.org/draft-04/schema#";

function element(kind) {
  return /* record */[
          /* title */undefined,
          /* description */undefined,
          /* default */undefined,
          /* enum */undefined,
          /* kind */kind,
          /* format */undefined,
          /* id */undefined
        ];
}

function option_map(f, param) {
  if (param !== undefined) {
    return Caml_option.some(Curry._1(f, Caml_option.valFromOption(param)));
  }
  
}

function eq_element(a, b) {
  if (Caml_obj.caml_equal(a[/* title */0], b[/* title */0]) && Caml_obj.caml_equal(a[/* description */1], b[/* description */1]) && Caml_obj.caml_equal(option_map(Json_repr.from_any, a[/* default */2]), option_map(Json_repr.from_any, b[/* default */2])) && Caml_obj.caml_equal(option_map((function (param) {
                return List.map(Json_repr.from_any, param);
              }), a[/* enum */3]), option_map((function (param) {
                return List.map(Json_repr.from_any, param);
              }), b[/* enum */3])) && eq_kind(a[/* kind */4], b[/* kind */4]) && Caml_obj.caml_equal(a[/* format */5], b[/* format */5])) {
    return Caml_obj.caml_equal(a[/* id */6], b[/* id */6]);
  } else {
    return false;
  }
}

function eq_kind(a, b) {
  if (typeof a === "number") {
    switch (a) {
      case 0 : 
          if (typeof b === "number") {
            return b === 0;
          } else {
            return false;
          }
      case 1 : 
          if (typeof b === "number") {
            return b === 1;
          } else {
            return false;
          }
      case 2 : 
          if (typeof b === "number") {
            return b === 2;
          } else {
            return false;
          }
      case 3 : 
          if (typeof b === "number") {
            return b >= 3;
          } else {
            return false;
          }
      
    }
  } else {
    switch (a.tag | 0) {
      case 0 : 
          if (typeof b === "number" || b.tag) {
            return false;
          } else {
            var a$1 = a[0];
            var b$1 = b[0];
            if (a$1[/* min_properties */3] === b$1[/* min_properties */3] && Caml_obj.caml_equal(a$1[/* max_properties */4], b$1[/* max_properties */4]) && Caml_obj.caml_equal(List.sort(Caml_obj.caml_compare, a$1[/* property_dependencies */6]), List.sort(Caml_obj.caml_compare, b$1[/* property_dependencies */6]))) {
              var match = a$1[/* additional_properties */2];
              var match$1 = b$1[/* additional_properties */2];
              if ((
                  match !== undefined ? (
                      match$1 !== undefined ? eq_element(match, match$1) : false
                    ) : match$1 === undefined
                ) && List.length(a$1[/* pattern_properties */1]) === List.length(b$1[/* pattern_properties */1]) && List.for_all2((function (param, param$1) {
                        return param[0] === param$1[0] ? eq_element(param[1], param$1[1]) : false;
                      }), List.sort((function (param, param$1) {
                            return Caml_primitive.caml_string_compare(param[0], param$1[0]);
                          }), a$1[/* pattern_properties */1]), List.sort((function (param, param$1) {
                            return Caml_primitive.caml_string_compare(param[0], param$1[0]);
                          }), b$1[/* pattern_properties */1])) && List.length(a$1[/* schema_dependencies */5]) === List.length(b$1[/* schema_dependencies */5]) && List.for_all2((function (param, param$1) {
                        return param[0] === param$1[0] ? eq_element(param[1], param$1[1]) : false;
                      }), List.sort((function (param, param$1) {
                            return Caml_primitive.caml_string_compare(param[0], param$1[0]);
                          }), a$1[/* schema_dependencies */5]), List.sort((function (param, param$1) {
                            return Caml_primitive.caml_string_compare(param[0], param$1[0]);
                          }), b$1[/* schema_dependencies */5])) && List.length(a$1[/* properties */0]) === List.length(b$1[/* properties */0])) {
                return List.for_all2((function (param, param$1) {
                              if (param[0] === param$1[0] && eq_element(param[1], param$1[1]) && param[2] === param$1[2]) {
                                return Caml_obj.caml_equal(option_map(Json_repr.from_any, param[3]), option_map(Json_repr.from_any, param$1[3]));
                              } else {
                                return false;
                              }
                            }), List.sort((function (param, param$1) {
                                  return Caml_primitive.caml_string_compare(param[0], param$1[0]);
                                }), a$1[/* properties */0]), List.sort((function (param, param$1) {
                                  return Caml_primitive.caml_string_compare(param[0], param$1[0]);
                                }), b$1[/* properties */0]));
              } else {
                return false;
              }
            } else {
              return false;
            }
          }
      case 1 : 
          if (typeof b === "number" || b.tag !== 1) {
            return false;
          } else {
            var esb = b[0];
            var esa = a[0];
            if (List.length(esa) === List.length(esb) && List.for_all2(eq_element, esa, esb)) {
              return eq_array_specs(a[1], b[1]);
            } else {
              return false;
            }
          }
      case 2 : 
          if (typeof b === "number" || !(b.tag === 2 && eq_element(a[0], b[0]))) {
            return false;
          } else {
            return eq_array_specs(a[1], b[1]);
          }
      case 3 : 
          if (typeof b === "number" || b.tag !== 3) {
            return false;
          } else {
            var esb$1 = b[1];
            var esa$1 = a[1];
            if (a[0] === b[0] && List.length(esa$1) === List.length(esb$1)) {
              return List.for_all2(eq_element, esa$1, esb$1);
            } else {
              return false;
            }
          }
      case 4 : 
          if (typeof b === "number" || b.tag !== 4) {
            return false;
          } else {
            return Caml_obj.caml_equal(a[0], b[0]);
          }
      case 5 : 
          if (typeof b === "number" || b.tag !== 5) {
            return false;
          } else {
            return a[0] === b[0];
          }
      case 6 : 
          if (typeof b === "number" || b.tag !== 6) {
            return false;
          } else {
            return a[0] === b[0];
          }
      case 7 : 
          if (typeof b === "number" || b.tag !== 7) {
            return false;
          } else {
            return Caml_obj.caml_equal(a[0], b[0]);
          }
      case 8 : 
          if (typeof b === "number" || b.tag !== 8) {
            return false;
          } else {
            return Caml_obj.caml_equal(a[0], b[0]);
          }
      case 9 : 
          if (typeof b === "number" || b.tag !== 9) {
            return false;
          } else {
            return Caml_obj.caml_equal(a[0], b[0]);
          }
      
    }
  }
}

function eq_array_specs(a, b) {
  if (a[/* min_items */0] === b[/* min_items */0] && Caml_obj.caml_equal(a[/* max_items */1], b[/* max_items */1]) && a[/* unique_items */2] === b[/* unique_items */2]) {
    var match = a[/* additional_items */3];
    var match$1 = b[/* additional_items */3];
    if (match !== undefined) {
      if (match$1 !== undefined) {
        return eq_element(match, match$1);
      } else {
        return false;
      }
    } else {
      return match$1 === undefined;
    }
  } else {
    return false;
  }
}

function pp_string(ppf, s) {
  return Json_repr.pp(undefined, undefined, Json_repr.Ezjsonm, ppf, /* `String */[
              -976970511,
              s
            ]);
}

function pp_num(ppf, m) {
  if (Math.abs(m) < 1000) {
    return Curry._1(Format.fprintf(ppf, /* Format */[
                    /* Float */Block.__(8, [
                        /* Float_g */9,
                        /* No_padding */0,
                        /* No_precision */0,
                        /* End_of_format */0
                      ]),
                    "%g"
                  ]), m);
  } else {
    var match = m < 0 ? /* tuple */[
        false,
        -m
      ] : /* tuple */[
        true,
        m
      ];
    var m$1 = match[1];
    var pos = match[0];
    if (List.fold_left((function (acc, d) {
              if (acc) {
                return acc;
              } else {
                var v = Math.log(m$1 + d) / Math.log(2);
                if (Math.abs(Math.ceil(v) - v) < 0.00001) {
                  Curry._2(Format.fprintf(ppf, /* Format */[
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* String_literal */Block.__(11, [
                                    "2^",
                                    /* Float */Block.__(8, [
                                        /* Float_g */9,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* End_of_format */0
                                      ])
                                  ])
                              ]),
                            "%s2^%g"
                          ]), pos ? "" : "-", v);
                  if (pos && d < 0 || !pos && d > 0) {
                    Curry._1(Format.fprintf(ppf, /* Format */[
                              /* Char_literal */Block.__(12, [
                                  /* "+" */43,
                                  /* Float */Block.__(8, [
                                      /* Float_g */9,
                                      /* No_padding */0,
                                      /* No_precision */0,
                                      /* End_of_format */0
                                    ])
                                ]),
                              "+%g"
                            ]), Math.abs(d));
                  }
                  if (pos && d > 0 || !pos && d < 0) {
                    Curry._1(Format.fprintf(ppf, /* Format */[
                              /* Char_literal */Block.__(12, [
                                  /* "-" */45,
                                  /* Float */Block.__(8, [
                                      /* Float_g */9,
                                      /* No_padding */0,
                                      /* No_precision */0,
                                      /* End_of_format */0
                                    ])
                                ]),
                              "-%g"
                            ]), Math.abs(d));
                  }
                  return true;
                } else {
                  return false;
                }
              }
            }), false, /* :: */[
            -2,
            /* :: */[
              -1,
              /* :: */[
                0,
                /* :: */[
                  1,
                  /* :: */[
                    2,
                    /* [] */0
                  ]
                ]
              ]
            ]
          ])) {
      return /* () */0;
    } else {
      return Curry._1(Format.fprintf(ppf, /* Format */[
                      /* Float */Block.__(8, [
                          /* Float_f */0,
                          /* No_padding */0,
                          /* No_precision */0,
                          /* End_of_format */0
                        ]),
                      "%f"
                    ]), m$1);
    }
  }
}

function pp_numeric_specs(ppf, param) {
  var maximum = param[/* maximum */2];
  var minimum = param[/* minimum */1];
  var multiple_of = param[/* multiple_of */0];
  return Curry._6(Format.fprintf(ppf, /* Format */[
                  /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* End_of_format */0])])]),
                  "%a%a%a"
                ]), (function (ppf, param) {
                if (param !== undefined) {
                  return Curry._1(Format.fprintf(ppf, /* Format */[
                                  /* String_literal */Block.__(11, [
                                      "multiple of ",
                                      /* Float */Block.__(8, [
                                          /* Float_g */9,
                                          /* No_padding */0,
                                          /* No_precision */0,
                                          /* End_of_format */0
                                        ])
                                    ]),
                                  "multiple of %g"
                                ]), param);
                } else {
                  return /* () */0;
                }
              }), multiple_of, (function (ppf, param) {
                if (param[0] !== undefined && (param[1] !== undefined || param[2] !== undefined)) {
                  return Format.fprintf(ppf, /* Format */[
                              /* String_literal */Block.__(11, [
                                  ", ",
                                  /* End_of_format */0
                                ]),
                              ", "
                            ]);
                } else {
                  return /* () */0;
                }
              }), /* tuple */[
              multiple_of,
              minimum,
              maximum
            ], (function (ppf, param) {
                var minimum = param[0];
                var exit = 0;
                if (minimum !== undefined || param[1] !== undefined) {
                  exit = 1;
                } else {
                  return /* () */0;
                }
                if (exit === 1) {
                  return Curry._4(Format.fprintf(ppf, /* Format */[
                                  /* String_literal */Block.__(11, [
                                      "\xe2\x88\x88 ",
                                      /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                              ", ",
                                              /* Alpha */Block.__(15, [/* End_of_format */0])
                                            ])])
                                    ]),
                                  "\xe2\x88\x88 %a, %a"
                                ]), (function (ppf, param) {
                                if (param !== undefined) {
                                  var match = param;
                                  var m = match[0];
                                  if (match[1] >= 672226188) {
                                    return Curry._2(Format.fprintf(ppf, /* Format */[
                                                    /* Char_literal */Block.__(12, [
                                                        /* "[" */91,
                                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                                      ]),
                                                    "[%a"
                                                  ]), pp_num, m);
                                  } else {
                                    return Curry._2(Format.fprintf(ppf, /* Format */[
                                                    /* Char_literal */Block.__(12, [
                                                        /* "]" */93,
                                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                                      ]),
                                                    "]%a"
                                                  ]), pp_num, m);
                                  }
                                } else {
                                  return Format.fprintf(ppf, /* Format */[
                                              /* String_literal */Block.__(11, [
                                                  "]\xe2\x88\x9e",
                                                  /* End_of_format */0
                                                ]),
                                              "]\xe2\x88\x9e"
                                            ]);
                                }
                              }), minimum, (function (ppf, param) {
                                if (param !== undefined) {
                                  var match = param;
                                  var m = match[0];
                                  if (match[1] >= 672226188) {
                                    return Curry._2(Format.fprintf(ppf, /* Format */[
                                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                            /* "]" */93,
                                                            /* End_of_format */0
                                                          ])]),
                                                    "%a]"
                                                  ]), pp_num, m);
                                  } else {
                                    return Curry._2(Format.fprintf(ppf, /* Format */[
                                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                            /* "[" */91,
                                                            /* End_of_format */0
                                                          ])]),
                                                    "%a["
                                                  ]), pp_num, m);
                                  }
                                } else {
                                  return Format.fprintf(ppf, /* Format */[
                                              /* String_literal */Block.__(11, [
                                                  "\xe2\x88\x9e[",
                                                  /* End_of_format */0
                                                ]),
                                              "\xe2\x88\x9e["
                                            ]);
                                }
                              }), param[1]);
                }
                
              }), /* tuple */[
              minimum,
              maximum
            ]);
}

function pp_path(ppf, path) {
  if (path) {
    var match = path[0];
    if (typeof match === "number" || match[0] !== 331416730 || match[1] !== "definitions") {
      return Json_query.print_path_as_json_path(true, ppf, path);
    } else {
      var match$1 = path[1];
      if (match$1) {
        var match$2 = match$1[0];
        if (typeof match$2 === "number" || match$2[0] !== 331416730 || match$1[1]) {
          return Json_query.print_path_as_json_path(true, ppf, path);
        } else {
          return Curry._1(Format.fprintf(ppf, /* Format */[
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ]),
                          "%s"
                        ]), match$2[1]);
        }
      } else {
        return Json_query.print_path_as_json_path(true, ppf, path);
      }
    }
  } else {
    return Json_query.print_path_as_json_path(true, ppf, path);
  }
}

function pp_desc(element) {
  var exit = 0;
  var text;
  var match = element[/* title */0];
  if (match !== undefined) {
    var match$1 = element[/* description */1];
    var title = match;
    if (match$1 !== undefined) {
      var description = match$1;
      return (function (ppf, param) {
                return Curry._4(Format.fprintf(ppf, /* Format */[
                                /* String_literal */Block.__(11, [
                                    "/* ",
                                    /* Formatting_gen */Block.__(18, [
                                        /* Open_box */Block.__(1, [/* Format */[
                                              /* String_literal */Block.__(11, [
                                                  "<v 0>",
                                                  /* End_of_format */0
                                                ]),
                                              "<v 0>"
                                            ]]),
                                        /* Formatting_gen */Block.__(18, [
                                            /* Open_box */Block.__(1, [/* Format */[
                                                  /* String_literal */Block.__(11, [
                                                      "<hov 0>",
                                                      /* End_of_format */0
                                                    ]),
                                                  "<hov 0>"
                                                ]]),
                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Break */Block.__(0, [
                                                            "@,",
                                                            0,
                                                            0
                                                          ]),
                                                        /* Formatting_gen */Block.__(18, [
                                                            /* Open_box */Block.__(1, [/* Format */[
                                                                  /* String_literal */Block.__(11, [
                                                                      "<hov 0>",
                                                                      /* End_of_format */0
                                                                    ]),
                                                                  "<hov 0>"
                                                                ]]),
                                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                    /* Close_box */0,
                                                                    /* Formatting_lit */Block.__(17, [
                                                                        /* Close_box */0,
                                                                        /* String_literal */Block.__(11, [
                                                                            " */",
                                                                            /* End_of_format */0
                                                                          ])
                                                                      ])
                                                                  ])])
                                                          ])
                                                      ])
                                                  ])])
                                          ])
                                      ])
                                  ]),
                                "/* @[<v 0>@[<hov 0>%a@]@,@[<hov 0>%a@]@] */"
                              ]), Format.pp_print_text, title, Format.pp_print_text, description);
              });
    } else {
      text = title;
      exit = 1;
    }
  } else {
    var match$2 = element[/* description */1];
    if (match$2 !== undefined) {
      text = match$2;
      exit = 1;
    } else {
      return undefined;
    }
  }
  if (exit === 1) {
    return (function (ppf, param) {
              return Curry._2(Format.fprintf(ppf, /* Format */[
                              /* String_literal */Block.__(11, [
                                  "/* ",
                                  /* Formatting_gen */Block.__(18, [
                                      /* Open_box */Block.__(1, [/* Format */[
                                            /* String_literal */Block.__(11, [
                                                "<hov 0>",
                                                /* End_of_format */0
                                              ]),
                                            "<hov 0>"
                                          ]]),
                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                              /* Close_box */0,
                                              /* String_literal */Block.__(11, [
                                                  " */",
                                                  /* End_of_format */0
                                                ])
                                            ])])
                                    ])
                                ]),
                              "/* @[<hov 0>%a@] */"
                            ]), Format.pp_print_text, text);
            });
  }
  
}

function pp_element(ppf, element) {
  var match = element[/* id */6];
  if (match !== undefined) {
    return Curry._1(Format.fprintf(ppf, /* Format */[
                    /* Char_literal */Block.__(12, [
                        /* "#" */35,
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "#%s"
                  ]), match);
  } else {
    var match$1 = element[/* format */5];
    if (match$1 !== undefined) {
      return Curry._1(Format.fprintf(ppf, /* Format */[
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* End_of_format */0
                        ]),
                      "%s"
                    ]), match$1);
    } else {
      var match$2 = element[/* enum */3];
      if (match$2 !== undefined) {
        var pp_sep = function (ppf, param) {
          return Format.fprintf(ppf, /* Format */[
                      /* Formatting_lit */Block.__(17, [
                          /* Break */Block.__(0, [
                              "@ ",
                              1,
                              0
                            ]),
                          /* String_literal */Block.__(11, [
                              "| ",
                              /* End_of_format */0
                            ])
                        ]),
                      "@ | "
                    ]);
        };
        var partial_arg = false;
        var partial_arg$1 = function (param, param$1) {
          return Json_repr.pp_any(partial_arg, undefined, /* () */0, param, param$1);
        };
        var partial_arg$2 = pp_sep;
        return Curry._2(Format.fprintf(ppf, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<hv 0>",
                                      /* End_of_format */0
                                    ]),
                                  "<hv 0>"
                                ]]),
                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                    /* Close_box */0,
                                    /* End_of_format */0
                                  ])])
                          ]),
                        "@[<hv 0>%a@]"
                      ]), (function (param, param$1) {
                      return Format.pp_print_list(partial_arg$2, partial_arg$1, param, param$1);
                    }), match$2);
      } else {
        var match$3 = pp_desc(element);
        if (match$3 !== undefined) {
          var pp_desc$1 = match$3;
          var stripped_002 = /* default */element[/* default */2];
          var stripped_003 = /* enum */element[/* enum */3];
          var stripped_004 = /* kind */element[/* kind */4];
          var stripped_005 = /* format */element[/* format */5];
          var stripped_006 = /* id */element[/* id */6];
          var stripped = /* record */[
            /* title */undefined,
            /* description */undefined,
            stripped_002,
            stripped_003,
            stripped_004,
            stripped_005,
            stripped_006
          ];
          var match$4 = element[/* kind */4];
          var exit = 0;
          if (typeof match$4 === "number") {
            exit = 1;
          } else {
            switch (match$4.tag | 0) {
              case 0 : 
                  return Curry._4(Format.fprintf(ppf, /* Format */[
                                  /* Formatting_gen */Block.__(18, [
                                      /* Open_box */Block.__(1, [/* Format */[
                                            /* String_literal */Block.__(11, [
                                                "<v 2>",
                                                /* End_of_format */0
                                              ]),
                                            "<v 2>"
                                          ]]),
                                      /* String_literal */Block.__(11, [
                                          "{ ",
                                          /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@,",
                                                      0,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                          " }",
                                                          /* Formatting_lit */Block.__(17, [
                                                              /* Close_box */0,
                                                              /* End_of_format */0
                                                            ])
                                                        ])])
                                                ])])
                                        ])
                                    ]),
                                  "@[<v 2>{ %a@,%a }@]"
                                ]), pp_desc$1, /* () */0, pp_object_contents, match$4[0]);
              case 3 : 
                  return Curry._4(Format.fprintf(ppf, /* Format */[
                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                          /* Break */Block.__(0, [
                                              "@,",
                                              0,
                                              0
                                            ]),
                                          /* Alpha */Block.__(15, [/* End_of_format */0])
                                        ])]),
                                  "%a@,%a"
                                ]), pp_desc$1, /* () */0, pp_element, stripped);
              default:
                exit = 1;
            }
          }
          if (exit === 1) {
            return Curry._4(Format.fprintf(ppf, /* Format */[
                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@ ",
                                        1,
                                        0
                                      ]),
                                    /* Alpha */Block.__(15, [/* End_of_format */0])
                                  ])]),
                            "%a@ %a"
                          ]), pp_element, stripped, pp_desc$1, /* () */0);
          }
          
        } else {
          var match$5 = element[/* kind */4];
          if (typeof match$5 === "number") {
            switch (match$5) {
              case 0 : 
                  return Format.fprintf(ppf, /* Format */[
                              /* String_literal */Block.__(11, [
                                  "boolean",
                                  /* End_of_format */0
                                ]),
                              "boolean"
                            ]);
              case 1 : 
                  return Format.fprintf(ppf, /* Format */[
                              /* String_literal */Block.__(11, [
                                  "null",
                                  /* End_of_format */0
                                ]),
                              "null"
                            ]);
              case 2 : 
                  return Format.fprintf(ppf, /* Format */[
                              /* String_literal */Block.__(11, [
                                  "any",
                                  /* End_of_format */0
                                ]),
                              "any"
                            ]);
              case 3 : 
                  throw [
                        Caml_builtin_exceptions.assert_failure,
                        /* tuple */[
                          "json_schema.ml",
                          304,
                          23
                        ]
                      ];
              
            }
          } else {
            switch (match$5.tag | 0) {
              case 0 : 
                  var specs = match$5[0];
                  var exit$1 = 0;
                  if (specs[/* properties */0] || specs[/* pattern_properties */1] || specs[/* additional_properties */2] !== undefined || specs[/* min_properties */3] !== 0) {
                    exit$1 = 1;
                  } else {
                    var match$6 = specs[/* max_properties */4];
                    if (match$6 !== undefined && !(match$6 !== 0 || specs[/* schema_dependencies */5] || specs[/* property_dependencies */6])) {
                      return Format.fprintf(ppf, /* Format */[
                                  /* String_literal */Block.__(11, [
                                      "{}",
                                      /* End_of_format */0
                                    ]),
                                  "{}"
                                ]);
                    } else {
                      exit$1 = 1;
                    }
                  }
                  if (exit$1 === 1) {
                    return Curry._2(Format.fprintf(ppf, /* Format */[
                                    /* Formatting_gen */Block.__(18, [
                                        /* Open_box */Block.__(1, [/* Format */[
                                              /* String_literal */Block.__(11, [
                                                  "<v 2>",
                                                  /* End_of_format */0
                                                ]),
                                              "<v 2>"
                                            ]]),
                                        /* String_literal */Block.__(11, [
                                            "{ ",
                                            /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                    " }",
                                                    /* Formatting_lit */Block.__(17, [
                                                        /* Close_box */0,
                                                        /* End_of_format */0
                                                      ])
                                                  ])])
                                          ])
                                      ]),
                                    "@[<v 2>{ %a }@]"
                                  ]), pp_object_contents, specs);
                  }
                  break;
              case 1 : 
                  var match$7 = match$5[1];
                  var match$8 = match$7[/* max_items */1];
                  var exit$2 = 0;
                  if (match$8 !== undefined && match$8 === 0) {
                    return Format.fprintf(ppf, /* Format */[
                                /* String_literal */Block.__(11, [
                                    "[]",
                                    /* End_of_format */0
                                  ]),
                                "[]"
                              ]);
                  } else {
                    exit$2 = 1;
                  }
                  if (exit$2 === 1) {
                    var additional_items = match$7[/* additional_items */3];
                    var first = /* record */[/* contents */true];
                    var pp_sep$1 = function (ppf, param) {
                      if (first[0]) {
                        first[0] = false;
                        return /* () */0;
                      } else {
                        return Format.fprintf(ppf, /* Format */[
                                    /* Char_literal */Block.__(12, [
                                        /* "," */44,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* End_of_format */0
                                          ])
                                      ]),
                                    ",@ "
                                  ]);
                      }
                    };
                    Format.fprintf(ppf, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<hv 2>",
                                        /* End_of_format */0
                                      ]),
                                    "<hv 2>"
                                  ]]),
                              /* String_literal */Block.__(11, [
                                  "[ ",
                                  /* End_of_format */0
                                ])
                            ]),
                          "@[<hv 2>[ "
                        ]);
                    List.iter((function (elt) {
                            return Curry._4(Format.fprintf(ppf, /* Format */[
                                            /* Alpha */Block.__(15, [/* Alpha */Block.__(15, [/* End_of_format */0])]),
                                            "%a%a"
                                          ]), pp_sep$1, /* () */0, pp_element, elt);
                          }), match$5[0]);
                    if (additional_items !== undefined) {
                      var elt = additional_items;
                      var match$9 = elt[/* kind */4];
                      var exit$3 = 0;
                      if (typeof match$9 === "number" && match$9 === 2) {
                        Curry._2(Format.fprintf(ppf, /* Format */[
                                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                          /* "," */44,
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@ ",
                                                  1,
                                                  0
                                                ]),
                                              /* String_literal */Block.__(11, [
                                                  "...",
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ])]),
                                  "%a,@ ..."
                                ]), pp_sep$1, /* () */0);
                      } else {
                        exit$3 = 2;
                      }
                      if (exit$3 === 2) {
                        Curry._4(Format.fprintf(ppf, /* Format */[
                                  /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                          /* "," */44,
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@ ",
                                                  1,
                                                  0
                                                ]),
                                              /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                      " ...",
                                                      /* End_of_format */0
                                                    ])])
                                            ])
                                        ])]),
                                  "%a,@ %a ..."
                                ]), pp_sep$1, /* () */0, pp_element, elt);
                      }
                      
                    }
                    return Format.fprintf(ppf, /* Format */[
                                /* String_literal */Block.__(11, [
                                    " ]",
                                    /* Formatting_lit */Block.__(17, [
                                        /* Close_box */0,
                                        /* End_of_format */0
                                      ])
                                  ]),
                                " ]@]"
                              ]);
                  }
                  break;
              case 2 : 
                  var match$10 = match$5[1];
                  var match$11 = match$10[/* max_items */1];
                  var elt$1 = match$5[0];
                  var exit$4 = 0;
                  if (match$11 !== undefined && match$11 === 0) {
                    return Format.fprintf(ppf, /* Format */[
                                /* String_literal */Block.__(11, [
                                    "[]",
                                    /* End_of_format */0
                                  ]),
                                "[]"
                              ]);
                  } else {
                    exit$4 = 1;
                  }
                  if (exit$4 === 1) {
                    var match$12 = match$10[/* additional_items */3];
                    if (match$12 !== undefined) {
                      var add_elt = match$12;
                      var match$13 = add_elt[/* kind */4];
                      var exit$5 = 0;
                      if (typeof match$13 === "number" && match$13 === 2) {
                        return Curry._2(Format.fprintf(ppf, /* Format */[
                                        /* Formatting_gen */Block.__(18, [
                                            /* Open_box */Block.__(1, [/* Format */[
                                                  /* String_literal */Block.__(11, [
                                                      "<hv 2>",
                                                      /* End_of_format */0
                                                    ]),
                                                  "<hv 2>"
                                                ]]),
                                            /* String_literal */Block.__(11, [
                                                "[ ",
                                                /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                        " ...,",
                                                        /* Formatting_lit */Block.__(17, [
                                                            /* Break */Block.__(0, [
                                                                "@ ",
                                                                1,
                                                                0
                                                              ]),
                                                            /* String_literal */Block.__(11, [
                                                                "... ]",
                                                                /* Formatting_lit */Block.__(17, [
                                                                    /* Close_box */0,
                                                                    /* End_of_format */0
                                                                  ])
                                                              ])
                                                          ])
                                                      ])])
                                              ])
                                          ]),
                                        "@[<hv 2>[ %a ...,@ ... ]@]"
                                      ]), pp_element, elt$1);
                      } else {
                        exit$5 = 2;
                      }
                      if (exit$5 === 2) {
                        return Curry._4(Format.fprintf(ppf, /* Format */[
                                        /* Formatting_gen */Block.__(18, [
                                            /* Open_box */Block.__(1, [/* Format */[
                                                  /* String_literal */Block.__(11, [
                                                      "<hv 2>",
                                                      /* End_of_format */0
                                                    ]),
                                                  "<hv 2>"
                                                ]]),
                                            /* String_literal */Block.__(11, [
                                                "[ ",
                                                /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                        " ...,",
                                                        /* Formatting_lit */Block.__(17, [
                                                            /* Break */Block.__(0, [
                                                                "@ ",
                                                                1,
                                                                0
                                                              ]),
                                                            /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                                    " ... ]",
                                                                    /* Formatting_lit */Block.__(17, [
                                                                        /* Close_box */0,
                                                                        /* End_of_format */0
                                                                      ])
                                                                  ])])
                                                          ])
                                                      ])])
                                              ])
                                          ]),
                                        "@[<hv 2>[ %a ...,@ %a ... ]@]"
                                      ]), pp_element, elt$1, pp_element, add_elt);
                      }
                      
                    } else {
                      return Curry._2(Format.fprintf(ppf, /* Format */[
                                      /* String_literal */Block.__(11, [
                                          "[ ",
                                          /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                  " ... ]",
                                                  /* End_of_format */0
                                                ])])
                                        ]),
                                      "[ %a ... ]"
                                    ]), pp_element, elt$1);
                    }
                  }
                  break;
              case 3 : 
                  var c = match$5[0];
                  var exit$6 = 0;
                  if (c >= 3) {
                    var match$14 = match$5[1];
                    if (match$14 && !match$14[1]) {
                      return Curry._2(Format.fprintf(ppf, /* Format */[
                                      /* String_literal */Block.__(11, [
                                          "! ",
                                          /* Alpha */Block.__(15, [/* End_of_format */0])
                                        ]),
                                      "! %a"
                                    ]), pp_element, match$14[0]);
                    } else {
                      exit$6 = 1;
                    }
                  } else {
                    exit$6 = 1;
                  }
                  if (exit$6 === 1) {
                    var pp_sep$2 = function (ppf, param) {
                      switch (c) {
                        case 0 : 
                            return Format.fprintf(ppf, /* Format */[
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* String_literal */Block.__(11, [
                                                "| ",
                                                /* End_of_format */0
                                              ])
                                          ]),
                                        "@ | "
                                      ]);
                        case 1 : 
                            return Format.fprintf(ppf, /* Format */[
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* String_literal */Block.__(11, [
                                                "|| ",
                                                /* End_of_format */0
                                              ])
                                          ]),
                                        "@ || "
                                      ]);
                        case 2 : 
                            return Format.fprintf(ppf, /* Format */[
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@ ",
                                                1,
                                                0
                                              ]),
                                            /* String_literal */Block.__(11, [
                                                "&& ",
                                                /* End_of_format */0
                                              ])
                                          ]),
                                        "@ && "
                                      ]);
                        case 3 : 
                            throw [
                                  Caml_builtin_exceptions.assert_failure,
                                  /* tuple */[
                                    "json_schema.ml",
                                    312,
                                    23
                                  ]
                                ];
                        
                      }
                    };
                    var partial_arg$3 = pp_sep$2;
                    return Curry._2(Format.fprintf(ppf, /* Format */[
                                    /* Formatting_gen */Block.__(18, [
                                        /* Open_box */Block.__(1, [/* Format */[
                                              /* String_literal */Block.__(11, [
                                                  "<hv 0>",
                                                  /* End_of_format */0
                                                ]),
                                              "<hv 0>"
                                            ]]),
                                        /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                /* Close_box */0,
                                                /* End_of_format */0
                                              ])])
                                      ]),
                                    "@[<hv 0>%a@]"
                                  ]), (function (param, param$1) {
                                  return Format.pp_print_list(partial_arg$3, pp_element, param, param$1);
                                }), match$5[1]);
                  }
                  break;
              case 4 : 
                  return Curry._2(Format.fprintf(ppf, /* Format */[
                                  /* Char_literal */Block.__(12, [
                                      /* "$" */36,
                                      /* Alpha */Block.__(15, [/* End_of_format */0])
                                    ]),
                                  "$%a"
                                ]), pp_path, match$5[0]);
              case 5 : 
                  return Curry._1(Format.fprintf(ppf, /* Format */[
                                  /* Char_literal */Block.__(12, [
                                      /* "#" */35,
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* End_of_format */0
                                        ])
                                    ]),
                                  "#%s"
                                ]), match$5[0]);
              case 6 : 
                  return Curry._1(Format.fprintf(ppf, /* Format */[
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* End_of_format */0
                                    ]),
                                  "%s"
                                ]), match$5[0]);
              case 7 : 
                  var match$15 = match$5[0];
                  var pattern = match$15[/* pattern */0];
                  var exit$7 = 0;
                  if (pattern !== undefined) {
                    if (match$15[/* min_length */1] !== 0 || match$15[/* max_length */2] !== undefined) {
                      exit$7 = 1;
                    } else {
                      return Curry._1(Format.fprintf(ppf, /* Format */[
                                      /* Char_literal */Block.__(12, [
                                          /* "/" */47,
                                          /* String */Block.__(2, [
                                              /* No_padding */0,
                                              /* Char_literal */Block.__(12, [
                                                  /* "/" */47,
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ]),
                                      "/%s/"
                                    ]), pattern);
                    }
                  } else if (match$15[/* min_length */1] !== 0 || match$15[/* max_length */2] !== undefined) {
                    exit$7 = 1;
                  } else {
                    return Format.fprintf(ppf, /* Format */[
                                /* String_literal */Block.__(11, [
                                    "string",
                                    /* End_of_format */0
                                  ]),
                                "string"
                              ]);
                  }
                  if (exit$7 === 1) {
                    return Curry._6(Format.fprintf(ppf, /* Format */[
                                    /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                            " (",
                                            /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                                    "length",
                                                    /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                            /* ")" */41,
                                                            /* End_of_format */0
                                                          ])])
                                                  ])])
                                          ])]),
                                    "%a (%alength%a)"
                                  ]), (function (ppf, param) {
                                  if (param !== undefined) {
                                    return Curry._1(Format.fprintf(ppf, /* Format */[
                                                    /* Char_literal */Block.__(12, [
                                                        /* "/" */47,
                                                        /* String */Block.__(2, [
                                                            /* No_padding */0,
                                                            /* Char_literal */Block.__(12, [
                                                                /* "/" */47,
                                                                /* End_of_format */0
                                                              ])
                                                          ])
                                                      ]),
                                                    "/%s/"
                                                  ]), param);
                                  } else {
                                    return Format.fprintf(ppf, /* Format */[
                                                /* String_literal */Block.__(11, [
                                                    "string",
                                                    /* End_of_format */0
                                                  ]),
                                                "string"
                                              ]);
                                  }
                                }), pattern, (function (ppf, n) {
                                  if (n > 0) {
                                    return Curry._1(Format.fprintf(ppf, /* Format */[
                                                    /* Int */Block.__(4, [
                                                        /* Int_d */0,
                                                        /* No_padding */0,
                                                        /* No_precision */0,
                                                        /* String_literal */Block.__(11, [
                                                            " <= ",
                                                            /* End_of_format */0
                                                          ])
                                                      ]),
                                                    "%d <= "
                                                  ]), n);
                                  } else {
                                    return 0;
                                  }
                                }), match$15[/* min_length */1], (function (ppf, param) {
                                  if (param !== undefined) {
                                    return Curry._1(Format.fprintf(ppf, /* Format */[
                                                    /* String_literal */Block.__(11, [
                                                        "<= ",
                                                        /* Int */Block.__(4, [
                                                            /* Int_d */0,
                                                            /* No_padding */0,
                                                            /* No_precision */0,
                                                            /* End_of_format */0
                                                          ])
                                                      ]),
                                                    "<= %d"
                                                  ]), param);
                                  } else {
                                    return /* () */0;
                                  }
                                }), match$15[/* max_length */2]);
                  }
                  break;
              case 8 : 
                  var specs$1 = match$5[0];
                  var exit$8 = 0;
                  if (specs$1[/* multiple_of */0] !== undefined || specs$1[/* minimum */1] !== undefined || specs$1[/* maximum */2] !== undefined) {
                    exit$8 = 1;
                  } else {
                    return Format.fprintf(ppf, /* Format */[
                                /* String_literal */Block.__(11, [
                                    "integer",
                                    /* End_of_format */0
                                  ]),
                                "integer"
                              ]);
                  }
                  if (exit$8 === 1) {
                    return Curry._2(Format.fprintf(ppf, /* Format */[
                                    /* String_literal */Block.__(11, [
                                        "integer ",
                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                      ]),
                                    "integer %a"
                                  ]), pp_numeric_specs, specs$1);
                  }
                  break;
              case 9 : 
                  var specs$2 = match$5[0];
                  var exit$9 = 0;
                  if (specs$2[/* multiple_of */0] !== undefined || specs$2[/* minimum */1] !== undefined || specs$2[/* maximum */2] !== undefined) {
                    exit$9 = 1;
                  } else {
                    return Format.fprintf(ppf, /* Format */[
                                /* String_literal */Block.__(11, [
                                    "number",
                                    /* End_of_format */0
                                  ]),
                                "number"
                              ]);
                  }
                  if (exit$9 === 1) {
                    return Curry._2(Format.fprintf(ppf, /* Format */[
                                    /* String_literal */Block.__(11, [
                                        "number ",
                                        /* Alpha */Block.__(15, [/* End_of_format */0])
                                      ]),
                                    "number %a"
                                  ]), pp_numeric_specs, specs$2);
                  }
                  break;
              
            }
          }
        }
      }
    }
  }
}

function pp_object_contents(ppf, param) {
  var additional_properties = param[/* additional_properties */2];
  var first = /* record */[/* contents */true];
  var pp_sep = function (ppf, param) {
    if (first[0]) {
      first[0] = false;
      return /* () */0;
    } else {
      return Format.fprintf(ppf, /* Format */[
                  /* Char_literal */Block.__(12, [
                      /* "," */44,
                      /* Formatting_lit */Block.__(17, [
                          /* Break */Block.__(0, [
                              "@ ",
                              1,
                              0
                            ]),
                          /* End_of_format */0
                        ])
                    ]),
                  ",@ "
                ]);
    }
  };
  List.iter((function (param) {
          return Curry._7(Format.fprintf(ppf, /* Format */[
                          /* Alpha */Block.__(15, [/* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hv 2>",
                                            /* End_of_format */0
                                          ]),
                                        "<hv 2>"
                                      ]]),
                                  /* Alpha */Block.__(15, [/* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* Char_literal */Block.__(12, [
                                              /* ":" */58,
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                          /* Close_box */0,
                                                          /* End_of_format */0
                                                        ])])
                                                ])
                                            ])
                                        ])])
                                ])]),
                          "%a@[<hv 2>%a%s:@ %a@]"
                        ]), pp_sep, /* () */0, pp_string, param[0], param[2] ? "" : "?", pp_element, param[1]);
        }), param[/* properties */0]);
  List.iter((function (param) {
          return Curry._5(Format.fprintf(ppf, /* Format */[
                          /* Alpha */Block.__(15, [/* Formatting_gen */Block.__(18, [
                                  /* Open_box */Block.__(1, [/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "<hv 2>",
                                            /* End_of_format */0
                                          ]),
                                        "<hv 2>"
                                      ]]),
                                  /* Char_literal */Block.__(12, [
                                      /* "/" */47,
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* String_literal */Block.__(11, [
                                              "/:",
                                              /* Formatting_lit */Block.__(17, [
                                                  /* Break */Block.__(0, [
                                                      "@ ",
                                                      1,
                                                      0
                                                    ]),
                                                  /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                          /* Close_box */0,
                                                          /* End_of_format */0
                                                        ])])
                                                ])
                                            ])
                                        ])
                                    ])
                                ])]),
                          "%a@[<hv 2>/%s/:@ %a@]"
                        ]), pp_sep, /* () */0, param[0], pp_element, param[1]);
        }), param[/* pattern_properties */1]);
  if (additional_properties !== undefined) {
    var elt = additional_properties;
    var match = elt[/* kind */4];
    var exit = 0;
    if (typeof match === "number" && match === 2) {
      return Curry._2(Format.fprintf(ppf, /* Format */[
                      /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                              "...",
                              /* End_of_format */0
                            ])]),
                      "%a..."
                    ]), pp_sep, /* () */0);
    } else {
      exit = 1;
    }
    if (exit === 1) {
      return Curry._4(Format.fprintf(ppf, /* Format */[
                      /* Alpha */Block.__(15, [/* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<hv 2>",
                                        /* End_of_format */0
                                      ]),
                                    "<hv 2>"
                                  ]]),
                              /* String_literal */Block.__(11, [
                                  "*:",
                                  /* Formatting_lit */Block.__(17, [
                                      /* Break */Block.__(0, [
                                          "@ ",
                                          1,
                                          0
                                        ]),
                                      /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                              /* Close_box */0,
                                              /* End_of_format */0
                                            ])])
                                    ])
                                ])
                            ])]),
                      "%a@[<hv 2>*:@ %a@]"
                    ]), pp_sep, /* () */0, pp_element, elt);
    }
    
  } else {
    return /* () */0;
  }
}

function pp(ppf, schema) {
  Format.fprintf(ppf, /* Format */[
        /* Formatting_gen */Block.__(18, [
            /* Open_box */Block.__(1, [/* Format */[
                  /* String_literal */Block.__(11, [
                      "<v 0>",
                      /* End_of_format */0
                    ]),
                  "<v 0>"
                ]]),
            /* End_of_format */0
          ]),
        "@[<v 0>"
      ]);
  pp_element(ppf, schema[/* root */0]);
  List.iter((function (param) {
          var elt = param[1];
          var path = param[0];
          var match = pp_desc(elt);
          if (match !== undefined) {
            var stripped_002 = /* default */elt[/* default */2];
            var stripped_003 = /* enum */elt[/* enum */3];
            var stripped_004 = /* kind */elt[/* kind */4];
            var stripped_005 = /* format */elt[/* format */5];
            var stripped_006 = /* id */elt[/* id */6];
            var stripped = /* record */[
              /* title */undefined,
              /* description */undefined,
              stripped_002,
              stripped_003,
              stripped_004,
              stripped_005,
              stripped_006
            ];
            return Curry._6(Format.fprintf(ppf, /* Format */[
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@,",
                                    0,
                                    0
                                  ]),
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<v 2>",
                                              /* End_of_format */0
                                            ]),
                                          "<v 2>"
                                        ]]),
                                    /* Char_literal */Block.__(12, [
                                        /* "$" */36,
                                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                /* ":" */58,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@,",
                                                        0,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                            /* Break */Block.__(0, [
                                                                "@,",
                                                                0,
                                                                0
                                                              ]),
                                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                    /* Close_box */0,
                                                                    /* End_of_format */0
                                                                  ])])
                                                          ])])
                                                  ])
                                              ])])
                                      ])
                                  ])
                              ]),
                            "@,@[<v 2>$%a:@,%a@,%a@]"
                          ]), pp_path, path, match, /* () */0, pp_element, stripped);
          } else {
            return Curry._4(Format.fprintf(ppf, /* Format */[
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@,",
                                    0,
                                    0
                                  ]),
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<hv 2>",
                                              /* End_of_format */0
                                            ]),
                                          "<hv 2>"
                                        ]]),
                                    /* Char_literal */Block.__(12, [
                                        /* "$" */36,
                                        /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                                /* ":" */58,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@ ",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                            /* Close_box */0,
                                                            /* End_of_format */0
                                                          ])])
                                                  ])
                                              ])])
                                      ])
                                  ])
                              ]),
                            "@,@[<hv 2>$%a:@ %a@]"
                          ]), pp_path, path, pp_element, elt);
          }
        }), schema[/* definitions */2]);
  List.iter((function (param) {
          var elt = param[1];
          var id = param[0];
          var match = pp_desc(elt);
          if (match !== undefined) {
            var stripped_002 = /* default */elt[/* default */2];
            var stripped_003 = /* enum */elt[/* enum */3];
            var stripped_004 = /* kind */elt[/* kind */4];
            var stripped_005 = /* format */elt[/* format */5];
            var stripped = /* record */[
              /* title */undefined,
              /* description */undefined,
              stripped_002,
              stripped_003,
              stripped_004,
              stripped_005,
              /* id */undefined
            ];
            return Curry._5(Format.fprintf(ppf, /* Format */[
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@,",
                                    0,
                                    0
                                  ]),
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<v 2>",
                                              /* End_of_format */0
                                            ]),
                                          "<v 2>"
                                        ]]),
                                    /* Char_literal */Block.__(12, [
                                        /* "#" */35,
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* Char_literal */Block.__(12, [
                                                /* ":" */58,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@,",
                                                        0,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                            /* Break */Block.__(0, [
                                                                "@,",
                                                                0,
                                                                0
                                                              ]),
                                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                    /* Close_box */0,
                                                                    /* End_of_format */0
                                                                  ])])
                                                          ])])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ]),
                            "@,@[<v 2>#%s:@,%a@,%a@]"
                          ]), id, match, /* () */0, pp_element, stripped);
          } else {
            return Curry._3(Format.fprintf(ppf, /* Format */[
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@,",
                                    0,
                                    0
                                  ]),
                                /* Formatting_gen */Block.__(18, [
                                    /* Open_box */Block.__(1, [/* Format */[
                                          /* String_literal */Block.__(11, [
                                              "<hv 2>",
                                              /* End_of_format */0
                                            ]),
                                          "<hv 2>"
                                        ]]),
                                    /* Char_literal */Block.__(12, [
                                        /* "#" */35,
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* Char_literal */Block.__(12, [
                                                /* ":" */58,
                                                /* Formatting_lit */Block.__(17, [
                                                    /* Break */Block.__(0, [
                                                        "@ ",
                                                        1,
                                                        0
                                                      ]),
                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                            /* Close_box */0,
                                                            /* End_of_format */0
                                                          ])])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ]),
                            "@,@[<hv 2>#%s:@ %a@]"
                          ]), id, pp_element, /* record */[
                        /* title */elt[/* title */0],
                        /* description */elt[/* description */1],
                        /* default */elt[/* default */2],
                        /* enum */elt[/* enum */3],
                        /* kind */elt[/* kind */4],
                        /* format */elt[/* format */5],
                        /* id */undefined
                      ]);
          }
        }), schema[/* ids */3]);
  return Format.fprintf(ppf, /* Format */[
              /* Formatting_lit */Block.__(17, [
                  /* Close_box */0,
                  /* End_of_format */0
                ]),
              "@]"
            ]);
}

var Cannot_parse = Caml_exceptions.create("Json_schema.Cannot_parse");

var Dangling_reference = Caml_exceptions.create("Json_schema.Dangling_reference");

var Bad_reference = Caml_exceptions.create("Json_schema.Bad_reference");

var Unexpected = Caml_exceptions.create("Json_schema.Unexpected");

var Duplicate_definition = Caml_exceptions.create("Json_schema.Duplicate_definition");

function print_error(print_unknown, ppf, exn) {
  if (exn[0] === Cannot_parse) {
    var partial_arg = true;
    return Curry._4(Format.fprintf(ppf, /* Format */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_box */Block.__(1, [/* Format */[
                              /* String_literal */Block.__(11, [
                                  "<v 2>",
                                  /* End_of_format */0
                                ]),
                              "<v 2>"
                            ]]),
                        /* String_literal */Block.__(11, [
                            "Schema parse error:",
                            /* Formatting_lit */Block.__(17, [
                                /* Break */Block.__(0, [
                                    "@,",
                                    0,
                                    0
                                  ]),
                                /* String_literal */Block.__(11, [
                                    "At ",
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@,",
                                                0,
                                                0
                                              ]),
                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* End_of_format */0
                                                  ])])
                                          ])])
                                  ])
                              ])
                          ])
                      ]),
                    "@[<v 2>Schema parse error:@,At %a@,%a@]"
                  ]), (function (param, param$1) {
                  return Json_query.print_path_as_json_path(partial_arg, param, param$1);
                }), exn[1], (function (param, param$1) {
                  return print_error(print_unknown, param, param$1);
                }), exn[2]);
  } else if (exn[0] === Dangling_reference) {
    return Curry._1(Format.fprintf(ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Dangling reference ",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "Dangling reference %s"
                  ]), exn[1]);
  } else if (exn[0] === Bad_reference) {
    return Curry._1(Format.fprintf(ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Illegal reference notation ",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "Illegal reference notation %s"
                  ]), exn[1]);
  } else if (exn[0] === Unexpected) {
    return Curry._2(Format.fprintf(ppf, /* Format */[
                    /* String_literal */Block.__(11, [
                        "Unexpected ",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                " instead of ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ])
                          ])
                      ]),
                    "Unexpected %s instead of %s"
                  ]), exn[1], exn[2]);
  } else if (exn[0] === Duplicate_definition) {
    var partial_arg$1 = false;
    return Curry._6(Format.fprintf(ppf, /* Format */[
                    /* Formatting_gen */Block.__(18, [
                        /* Open_box */Block.__(1, [/* Format */[
                              /* String_literal */Block.__(11, [
                                  "<v 2>",
                                  /* End_of_format */0
                                ]),
                              "<v 2>"
                            ]]),
                        /* String_literal */Block.__(11, [
                            "Duplicate definition ",
                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@,",
                                        0,
                                        0
                                      ]),
                                    /* String_literal */Block.__(11, [
                                        "To be inserted:",
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@,",
                                                0,
                                                0
                                              ]),
                                            /* String_literal */Block.__(11, [
                                                "  ",
                                                /* Formatting_gen */Block.__(18, [
                                                    /* Open_box */Block.__(1, [/* Format */[
                                                          /* String_literal */Block.__(11, [
                                                              "<v 0>",
                                                              /* End_of_format */0
                                                            ]),
                                                          "<v 0>"
                                                        ]]),
                                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                            /* Close_box */0,
                                                            /* Formatting_lit */Block.__(17, [
                                                                /* Break */Block.__(0, [
                                                                    "@,",
                                                                    0,
                                                                    0
                                                                  ]),
                                                                /* String_literal */Block.__(11, [
                                                                    "Already present:",
                                                                    /* Formatting_lit */Block.__(17, [
                                                                        /* Break */Block.__(0, [
                                                                            "@,",
                                                                            0,
                                                                            0
                                                                          ]),
                                                                        /* String_literal */Block.__(11, [
                                                                            "  ",
                                                                            /* Formatting_gen */Block.__(18, [
                                                                                /* Open_box */Block.__(1, [/* Format */[
                                                                                      /* String_literal */Block.__(11, [
                                                                                          "<v 0>",
                                                                                          /* End_of_format */0
                                                                                        ]),
                                                                                      "<v 0>"
                                                                                    ]]),
                                                                                /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                                                        /* Close_box */0,
                                                                                        /* Formatting_lit */Block.__(17, [
                                                                                            /* Close_box */0,
                                                                                            /* End_of_format */0
                                                                                          ])
                                                                                      ])])
                                                                              ])
                                                                          ])
                                                                      ])
                                                                  ])
                                                              ])
                                                          ])])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])])
                          ])
                      ]),
                    "@[<v 2>Duplicate definition %a@,To be inserted:@,  @[<v 0>%a@]@,Already present:@,  @[<v 0>%a@]@]"
                  ]), (function (param, param$1) {
                  return Json_query.print_path_as_json_pointer(partial_arg$1, param, param$1);
                }), exn[1], pp_element, exn[2], pp_element, exn[3]);
  } else {
    return Json_query.print_error(print_unknown, ppf, exn);
  }
}

function insert_definition(name, elt, defs) {
  var insert = function (param) {
    if (param) {
      var def = param[0];
      var defelt = def[1];
      var match = defelt[/* kind */4];
      var exit = 0;
      if (Caml_obj.caml_notequal(def[0], name)) {
        return /* :: */[
                def,
                insert(param[1])
              ];
      } else if (typeof match === "number" && match >= 3) {
        return /* :: */[
                /* tuple */[
                  name,
                  elt
                ],
                param[1]
              ];
      } else {
        exit = 1;
      }
      if (exit === 1) {
        if (!eq_element(elt, defelt)) {
          throw [
                Duplicate_definition,
                name,
                elt,
                defelt
              ];
        }
        return /* :: */[
                /* tuple */[
                  name,
                  elt
                ],
                param[1]
              ];
      }
      
    } else {
      return /* :: */[
              /* tuple */[
                name,
                elt
              ],
              /* [] */0
            ];
    }
  };
  return insert(defs);
}

var Query = Json_query.Make(Json_repr.Ezjsonm);

function to_json(schema) {
  var obj = function (l) {
    return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                79,
                l
              ]);
  };
  var set_always = function (f, v) {
    return /* :: */[
            /* tuple */[
              f,
              Curry._1(Json_repr.Ezjsonm[/* repr */1], v)
            ],
            /* [] */0
          ];
  };
  var set_if_some = function (f, v, cb) {
    if (v !== undefined) {
      return /* :: */[
              /* tuple */[
                f,
                Curry._1(Json_repr.Ezjsonm[/* repr */1], Curry._1(cb, Caml_option.valFromOption(v)))
              ],
              /* [] */0
            ];
    } else {
      return /* [] */0;
    }
  };
  var set_if_cons = function (f, v, cb) {
    if (v) {
      return /* :: */[
              /* tuple */[
                f,
                Curry._1(Json_repr.Ezjsonm[/* repr */1], Curry._1(cb, v))
              ],
              /* [] */0
            ];
    } else {
      return /* [] */0;
    }
  };
  var set_if_neq = function (f, v, v$prime, cb) {
    if (Caml_obj.caml_notequal(v, v$prime)) {
      return /* :: */[
              /* tuple */[
                f,
                Curry._1(Json_repr.Ezjsonm[/* repr */1], Curry._1(cb, v))
              ],
              /* [] */0
            ];
    } else {
      return /* [] */0;
    }
  };
  var format_element = function (param) {
    var kind = param[/* kind */4];
    var tmp;
    if (typeof kind === "number") {
      switch (kind) {
        case 0 : 
            tmp = set_always("type", /* `String */[
                  -976970511,
                  "boolean"
                ]);
            break;
        case 1 : 
            tmp = set_always("type", /* `String */[
                  -976970511,
                  "null"
                ]);
            break;
        case 2 : 
            tmp = /* [] */0;
            break;
        case 3 : 
            tmp = Pervasives.invalid_arg("Json_schema.to_json: remaining dummy element");
            break;
        
      }
    } else {
      switch (kind.tag | 0) {
        case 0 : 
            var specs = kind[0];
            var required = List.fold_left((function (r, param) {
                    if (param[2]) {
                      return /* :: */[
                              Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `String */[
                                    -976970511,
                                    param[0]
                                  ]),
                              r
                            ];
                    } else {
                      return r;
                    }
                  }), /* [] */0, specs[/* properties */0]);
            var properties = List.map((function (param) {
                    return /* tuple */[
                            param[0],
                            obj(format_element(param[1]))
                          ];
                  }), specs[/* properties */0]);
            tmp = Pervasives.$at(set_always("type", /* `String */[
                      -976970511,
                      "object"
                    ]), Pervasives.$at(set_always("properties", /* `O */[
                          79,
                          properties
                        ]), Pervasives.$at(set_if_cons("required", required, (function (l) {
                                return /* `A */[
                                        65,
                                        l
                                      ];
                              })), Pervasives.$at(set_if_cons("patternProperties", specs[/* pattern_properties */1], (function (fs) {
                                    return /* `O */[
                                            79,
                                            List.map((function (param) {
                                                    return /* tuple */[
                                                            param[0],
                                                            obj(format_element(param[1]))
                                                          ];
                                                  }), fs)
                                          ];
                                  })), Pervasives.$at(set_if_neq("additionalProperties", specs[/* additional_properties */2], /* record */[
                                      /* title */undefined,
                                      /* description */undefined,
                                      /* default */undefined,
                                      /* enum */undefined,
                                      /* kind : Any */2,
                                      /* format */undefined,
                                      /* id */undefined
                                    ], (function (param) {
                                        if (param !== undefined) {
                                          return /* `O */[
                                                  79,
                                                  format_element(param)
                                                ];
                                        } else {
                                          return /* `Bool */[
                                                  737456202,
                                                  false
                                                ];
                                        }
                                      })), Pervasives.$at(set_if_neq("minProperties", specs[/* min_properties */3], 0, (function (i) {
                                            return /* `Float */[
                                                    365180284,
                                                    i
                                                  ];
                                          })), Pervasives.$at(set_if_some("maxProperties", specs[/* max_properties */4], (function (i) {
                                                return /* `Float */[
                                                        365180284,
                                                        i
                                                      ];
                                              })), Pervasives.$at(set_if_cons("schemaDependencies", specs[/* schema_dependencies */5], (function (fs) {
                                                    return /* `O */[
                                                            79,
                                                            List.map((function (param) {
                                                                    return /* tuple */[
                                                                            param[0],
                                                                            obj(format_element(param[1]))
                                                                          ];
                                                                  }), fs)
                                                          ];
                                                  })), set_if_cons("propertyDependencies", specs[/* property_dependencies */6], (function (fs) {
                                                    var strings = function (ls) {
                                                      return List.map((function (s) {
                                                                    return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `String */[
                                                                                -976970511,
                                                                                s
                                                                              ]);
                                                                  }), ls);
                                                    };
                                                    var property_dependencies = List.map((function (param) {
                                                            return /* tuple */[
                                                                    param[0],
                                                                    Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `A */[
                                                                          65,
                                                                          strings(param[1])
                                                                        ])
                                                                  ];
                                                          }), fs);
                                                    return /* `O */[
                                                            79,
                                                            property_dependencies
                                                          ];
                                                  }))))))))));
            break;
        case 1 : 
            var specs$1 = kind[1];
            tmp = Pervasives.$at(set_always("type", /* `String */[
                      -976970511,
                      "array"
                    ]), Pervasives.$at(set_always("items", /* `A */[
                          65,
                          List.map((function (elt) {
                                  return obj(format_element(elt));
                                }), kind[0])
                        ]), Pervasives.$at(set_if_neq("minItems", specs$1[/* min_items */0], 0, (function (i) {
                                return /* `Float */[
                                        365180284,
                                        i
                                      ];
                              })), Pervasives.$at(set_if_some("maxItems", specs$1[/* max_items */1], (function (i) {
                                    return /* `Float */[
                                            365180284,
                                            i
                                          ];
                                  })), Pervasives.$at(set_if_neq("uniqueItems", specs$1[/* unique_items */2], false, (function (b) {
                                        return /* `Bool */[
                                                737456202,
                                                b
                                              ];
                                      })), set_if_neq("additionalItems", specs$1[/* additional_items */3], /* record */[
                                      /* title */undefined,
                                      /* description */undefined,
                                      /* default */undefined,
                                      /* enum */undefined,
                                      /* kind : Any */2,
                                      /* format */undefined,
                                      /* id */undefined
                                    ], (function (param) {
                                        if (param !== undefined) {
                                          return /* `O */[
                                                  79,
                                                  format_element(param)
                                                ];
                                        } else {
                                          return /* `Bool */[
                                                  737456202,
                                                  false
                                                ];
                                        }
                                      })))))));
            break;
        case 2 : 
            var match = kind[1];
            tmp = Pervasives.$at(set_always("type", /* `String */[
                      -976970511,
                      "array"
                    ]), Pervasives.$at(set_always("items", /* `O */[
                          79,
                          format_element(kind[0])
                        ]), Pervasives.$at(set_if_neq("minItems", match[/* min_items */0], 0, (function (i) {
                                return /* `Float */[
                                        365180284,
                                        i
                                      ];
                              })), Pervasives.$at(set_if_some("maxItems", match[/* max_items */1], (function (i) {
                                    return /* `Float */[
                                            365180284,
                                            i
                                          ];
                                  })), set_if_neq("uniqueItems", match[/* unique_items */2], false, (function (b) {
                                    return /* `Bool */[
                                            737456202,
                                            b
                                          ];
                                  }))))));
            break;
        case 3 : 
            var combinator = function (param) {
              switch (param) {
                case 0 : 
                    return "anyOf";
                case 1 : 
                    return "oneOf";
                case 2 : 
                    return "allOf";
                case 3 : 
                    return "not";
                
              }
            };
            tmp = set_always(combinator(kind[0]), /* `A */[
                  65,
                  List.map((function (elt) {
                          return obj(format_element(elt));
                        }), kind[1])
                ]);
            break;
        case 4 : 
            tmp = set_always("$ref", /* `String */[
                  -976970511,
                  "#" + Json_query.json_pointer_of_path(undefined, kind[0])
                ]);
            break;
        case 5 : 
            tmp = set_always("$ref", /* `String */[
                  -976970511,
                  "#" + kind[0]
                ]);
            break;
        case 6 : 
            tmp = set_always("$ref", /* `String */[
                  -976970511,
                  kind[0]
                ]);
            break;
        case 7 : 
            var match$1 = kind[0];
            tmp = Pervasives.$at(set_always("type", /* `String */[
                      -976970511,
                      "string"
                    ]), Pervasives.$at(set_if_neq("minLength", match$1[/* min_length */1], 0, (function (i) {
                            return /* `Float */[
                                    365180284,
                                    i
                                  ];
                          })), Pervasives.$at(set_if_some("maxLength", match$1[/* max_length */2], (function (i) {
                                return /* `Float */[
                                        365180284,
                                        i
                                      ];
                              })), set_if_some("pattern", match$1[/* pattern */0], (function (s) {
                                return /* `String */[
                                        -976970511,
                                        s
                                      ];
                              })))));
            break;
        case 8 : 
            var specs$2 = kind[0];
            var match$2 = specs$2[/* minimum */1];
            var tmp$1;
            if (match$2 !== undefined) {
              var match$3 = match$2;
              var v = match$3[0];
              tmp$1 = match$3[1] >= 672226188 ? /* :: */[
                  /* tuple */[
                    "minimum",
                    Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Float */[
                          365180284,
                          v
                        ])
                  ],
                  /* [] */0
                ] : /* :: */[
                  /* tuple */[
                    "minimum",
                    Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Float */[
                          365180284,
                          v
                        ])
                  ],
                  /* :: */[
                    /* tuple */[
                      "exclusiveMinimum",
                      Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Bool */[
                            737456202,
                            true
                          ])
                    ],
                    /* [] */0
                  ]
                ];
            } else {
              tmp$1 = /* [] */0;
            }
            var match$4 = specs$2[/* maximum */2];
            var tmp$2;
            if (match$4 !== undefined) {
              var match$5 = match$4;
              var v$1 = match$5[0];
              tmp$2 = match$5[1] >= 672226188 ? /* :: */[
                  /* tuple */[
                    "maximum",
                    Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Float */[
                          365180284,
                          v$1
                        ])
                  ],
                  /* [] */0
                ] : /* :: */[
                  /* tuple */[
                    "maximum",
                    Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Float */[
                          365180284,
                          v$1
                        ])
                  ],
                  /* :: */[
                    /* tuple */[
                      "exclusiveMaximum",
                      Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Bool */[
                            737456202,
                            true
                          ])
                    ],
                    /* [] */0
                  ]
                ];
            } else {
              tmp$2 = /* [] */0;
            }
            tmp = Pervasives.$at(set_always("type", /* `String */[
                      -976970511,
                      "integer"
                    ]), Pervasives.$at(set_if_some("multipleOf", specs$2[/* multiple_of */0], (function (v) {
                            return /* `Float */[
                                    365180284,
                                    v
                                  ];
                          })), Pervasives.$at(tmp$1, tmp$2)));
            break;
        case 9 : 
            var specs$3 = kind[0];
            var match$6 = specs$3[/* minimum */1];
            var tmp$3;
            if (match$6 !== undefined) {
              var match$7 = match$6;
              var v$2 = match$7[0];
              tmp$3 = match$7[1] >= 672226188 ? /* :: */[
                  /* tuple */[
                    "minimum",
                    Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Float */[
                          365180284,
                          v$2
                        ])
                  ],
                  /* [] */0
                ] : /* :: */[
                  /* tuple */[
                    "minimum",
                    Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Float */[
                          365180284,
                          v$2
                        ])
                  ],
                  /* :: */[
                    /* tuple */[
                      "exclusiveMinimum",
                      Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Bool */[
                            737456202,
                            true
                          ])
                    ],
                    /* [] */0
                  ]
                ];
            } else {
              tmp$3 = /* [] */0;
            }
            var match$8 = specs$3[/* maximum */2];
            var tmp$4;
            if (match$8 !== undefined) {
              var match$9 = match$8;
              var v$3 = match$9[0];
              tmp$4 = match$9[1] >= 672226188 ? /* :: */[
                  /* tuple */[
                    "maximum",
                    Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Float */[
                          365180284,
                          v$3
                        ])
                  ],
                  /* [] */0
                ] : /* :: */[
                  /* tuple */[
                    "maximum",
                    Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Float */[
                          365180284,
                          v$3
                        ])
                  ],
                  /* :: */[
                    /* tuple */[
                      "exclusiveMaximum",
                      Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Bool */[
                            737456202,
                            true
                          ])
                    ],
                    /* [] */0
                  ]
                ];
            } else {
              tmp$4 = /* [] */0;
            }
            tmp = Pervasives.$at(set_always("type", /* `String */[
                      -976970511,
                      "number"
                    ]), Pervasives.$at(set_if_some("multipleOf", specs$3[/* multiple_of */0], (function (v) {
                            return /* `Float */[
                                    365180284,
                                    v
                                  ];
                          })), Pervasives.$at(tmp$3, tmp$4)));
            break;
        
      }
    }
    return Pervasives.$at(set_if_some("title", param[/* title */0], (function (s) {
                      return /* `String */[
                              -976970511,
                              s
                            ];
                    })), Pervasives.$at(set_if_some("description", param[/* description */1], (function (s) {
                          return /* `String */[
                                  -976970511,
                                  s
                                ];
                        })), Pervasives.$at(tmp, Pervasives.$at(set_if_some("default", param[/* default */2], (function (j) {
                                  return Curry._1(Json_repr.Ezjsonm[/* view */0], Json_repr.any_to_repr(Json_repr.Ezjsonm, j));
                                })), Pervasives.$at(set_if_some("enum", param[/* enum */3], (function (js) {
                                      return /* `A */[
                                              65,
                                              List.map((function (param) {
                                                      return Json_repr.any_to_repr(Json_repr.Ezjsonm, param);
                                                    }), js)
                                            ];
                                    })), set_if_some("format", param[/* format */5], (function (s) {
                                      return /* `String */[
                                              -976970511,
                                              s
                                            ];
                                    })))))));
  };
  return List.fold_left((function (acc, param) {
                return Curry._3(Query[/* insert */2], param[0], obj(format_element(param[1])), acc);
              }), obj(Pervasives.$at(set_always("$schema", /* `String */[
                          -976970511,
                          version
                        ]), format_element(schema[/* root */0]))), schema[/* definitions */2]);
}

function unexpected(kind, expected) {
  var kind$1;
  if (typeof kind === "number") {
    kind$1 = "null";
  } else {
    var variant = kind[0];
    kind$1 = variant !== 65 ? (
        variant >= 365180284 ? (
            variant >= 737456202 ? "boolean" : "number"
          ) : (
            variant >= 79 ? (
                kind[1] ? "object" : "empty object"
              ) : (
                kind[1] === "" ? "empty string" : "string"
              )
          )
      ) : (
        kind[1] ? "array" : "empty array"
      );
  }
  return [
          Cannot_parse,
          /* [] */0,
          [
            Unexpected,
            kind$1,
            expected
          ]
        ];
}

function at_path(p, exn) {
  if (exn[0] === Cannot_parse) {
    return [
            Cannot_parse,
            Pervasives.$at(p, exn[1]),
            exn[2]
          ];
  } else {
    return exn;
  }
}

function at_field(n) {
  var partial_arg_000 = /* `Field */[
    331416730,
    n
  ];
  var partial_arg = /* :: */[
    partial_arg_000,
    /* [] */0
  ];
  return (function (param) {
      return at_path(partial_arg, param);
    });
}

function at_index(i) {
  var partial_arg_000 = /* `Index */[
    -784200974,
    i
  ];
  var partial_arg = /* :: */[
    partial_arg_000,
    /* [] */0
  ];
  return (function (param) {
      return at_path(partial_arg, param);
    });
}

function of_json(json) {
  var opt_field = function (obj, n) {
    var match = Curry._1(Json_repr.Ezjsonm[/* view */0], obj);
    if (typeof match === "number" || match[0] !== 79) {
      return undefined;
    } else {
      try {
        return Caml_option.some(List.assoc(n, match[1]));
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          return undefined;
        } else {
          throw exn;
        }
      }
    }
  };
  var opt_field_view = function (obj, n) {
    var match = Curry._1(Json_repr.Ezjsonm[/* view */0], obj);
    if (typeof match === "number" || match[0] !== 79) {
      return undefined;
    } else {
      try {
        return Curry._1(Json_repr.Ezjsonm[/* view */0], List.assoc(n, match[1]));
      }
      catch (exn){
        if (exn === Caml_builtin_exceptions.not_found) {
          return undefined;
        } else {
          throw exn;
        }
      }
    }
  };
  var opt_string_field = function (obj, n) {
    var match = opt_field_view(obj, n);
    if (match !== undefined) {
      var k = match;
      if (typeof k === "number") {
        throw at_field(n)(unexpected(k, "string"));
      }
      if (k[0] !== -976970511) {
        throw at_field(n)(unexpected(k, "string"));
      }
      return k[1];
    }
    
  };
  var opt_bool_field = function (def, obj, n) {
    var match = opt_field_view(obj, n);
    if (match !== undefined) {
      var k = match;
      if (typeof k === "number") {
        throw at_field(n)(unexpected(k, "bool"));
      }
      if (k[0] !== 737456202) {
        throw at_field(n)(unexpected(k, "bool"));
      }
      return k[1];
    } else {
      return def;
    }
  };
  var opt_int_field = function (obj, n) {
    var match = opt_field_view(obj, n);
    if (match !== undefined) {
      var k = match;
      var exit = 0;
      if (typeof k === "number" || k[0] !== 365180284) {
        exit = 1;
      } else {
        var f = k[1];
        if (Caml_float.caml_modf_float(f)[0] === 0 && f <= Math.pow(2, 53) && f >= Math.pow(-2, 53)) {
          return f;
        } else {
          exit = 1;
        }
      }
      if (exit === 1) {
        throw at_field(n)(unexpected(k, "integer"));
      }
      
    }
    
  };
  var opt_length_field = function (obj, n) {
    var match = opt_field_view(obj, n);
    if (match !== undefined) {
      var k = match;
      var exit = 0;
      if (typeof k === "number" || k[0] !== 365180284) {
        exit = 1;
      } else {
        var f = k[1];
        if (Caml_float.caml_modf_float(f)[0] === 0 && f <= Math.pow(2, 30) && f >= 0) {
          return f | 0;
        } else {
          exit = 1;
        }
      }
      if (exit === 1) {
        throw at_field(n)(unexpected(k, "length"));
      }
      
    }
    
  };
  var opt_float_field = function (obj, n) {
    var match = opt_field_view(obj, n);
    if (match !== undefined) {
      var k = match;
      if (typeof k === "number") {
        throw at_field(n)(unexpected(k, "number"));
      }
      if (k[0] !== 365180284) {
        throw at_field(n)(unexpected(k, "number"));
      }
      return k[1];
    }
    
  };
  var opt_array_field = function (obj, n) {
    var match = opt_field_view(obj, n);
    if (match !== undefined) {
      var k = match;
      if (typeof k === "number") {
        throw at_field(n)(unexpected(k, "array"));
      }
      if (k[0] !== 65) {
        throw at_field(n)(unexpected(k, "array"));
      }
      return k[1];
    }
    
  };
  var opt_uri_field = function (obj, n) {
    var match = opt_string_field(obj, n);
    if (match !== undefined) {
      return match;
    }
    
  };
  var match = opt_uri_field(json, "id");
  var schema_source = match !== undefined ? "Uri.with_fragment uri None" : "Uri.empty";
  var collected_definitions = /* record */[/* contents : [] */0];
  var collected_id_defs = /* record */[/* contents : [] */0];
  var collected_id_refs = /* record */[/* contents : [] */0];
  var collect_definition = function (uri) {
    var match = "lol";
    if (match !== undefined) {
      var fragment = match;
      if ($$String.contains(fragment, /* "/" */47)) {
        var path;
        try {
          path = Json_query.path_of_json_pointer(false, fragment);
        }
        catch (raw_err){
          var err = Caml_js_exceptions.internalToOCamlException(raw_err);
          throw [
                Cannot_parse,
                /* [] */0,
                err
              ];
        }
        try {
          var raw = Curry._2(Query[/* query */0], path, json);
          if (!List.mem_assoc(path, collected_definitions[0])) {
            collected_definitions[0] = insert_definition(path, /* record */[
                  /* title */undefined,
                  /* description */undefined,
                  /* default */undefined,
                  /* enum */undefined,
                  /* kind : Dummy */3,
                  /* format */undefined,
                  /* id */undefined
                ], collected_definitions[0]);
            var elt;
            try {
              elt = parse_element(schema_source, raw);
            }
            catch (raw_err$1){
              var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
              throw at_path(path, err$1);
            }
            collected_definitions[0] = insert_definition(path, elt, collected_definitions[0]);
          }
          return /* Def_ref */Block.__(4, [path]);
        }
        catch (exn){
          if (exn === Caml_builtin_exceptions.not_found) {
            throw [
                  Cannot_parse,
                  /* [] */0,
                  [
                    Dangling_reference,
                    uri
                  ]
                ];
          }
          throw exn;
        }
      } else {
        collected_id_refs[0] = /* :: */[
          fragment,
          collected_id_refs[0]
        ];
        return /* Id_ref */Block.__(5, [fragment]);
      }
    } else {
      throw [
            Cannot_parse,
            /* [] */0,
            [
              Bad_reference,
              "uri has no fragment"
            ]
          ];
    }
  };
  var parse_element = function (source, json) {
    opt_uri_field(json, "id");
    if (source !== schema_source) {
      return /* record */[
              /* title */undefined,
              /* description */undefined,
              /* default */undefined,
              /* enum */undefined,
              /* kind : Ext_ref */Block.__(6, [""]),
              /* format */undefined,
              /* id */undefined
            ];
    } else {
      var id;
      id = undefined;
      var match = opt_field_view(json, "type");
      var as_kind;
      if (match !== undefined) {
        var k = match;
        if (typeof k === "number") {
          var partial_arg_000 = /* `Field */[
            331416730,
            "type"
          ];
          var partial_arg = /* :: */[
            partial_arg_000,
            /* [] */0
          ];
          throw (function (param) {
                    return at_path(partial_arg, param);
                  })(unexpected(k, "type, type array or operator"));
        }
        var variant = k[0];
        if (variant !== -976970511) {
          if (variant !== 65) {
            var partial_arg_000$1 = /* `Field */[
              331416730,
              "type"
            ];
            var partial_arg$1 = /* :: */[
              partial_arg_000$1,
              /* [] */0
            ];
            throw (function (param) {
                      return at_path(partial_arg$1, param);
                    })(unexpected(k, "type, type array or operator"));
          }
          var l = k[1];
          if (l) {
            var items = function (_i, _acc, _param) {
              while(true) {
                var param = _param;
                var acc = _acc;
                var i = _i;
                if (param) {
                  var k = param[0];
                  var exit = 0;
                  if (typeof k === "number" || k[0] !== -976970511) {
                    exit = 1;
                  } else {
                    var kind = parse_element_kind(source, json, k[1]);
                    var $$case = element(kind);
                    _param = param[1];
                    _acc = /* :: */[
                      $$case,
                      acc
                    ];
                    _i = i + 1 | 0;
                    continue ;
                  }
                  if (exit === 1) {
                    var partial_arg_000 = /* `Field */[
                      331416730,
                      "type"
                    ];
                    var partial_arg = /* :: */[
                      partial_arg_000,
                      /* [] */0
                    ];
                    throw (function(partial_arg){
                          return function (param) {
                            return at_path(partial_arg, param);
                          }
                          }(partial_arg))(at_index(i)(unexpected(k, "type")));
                  }
                  
                } else {
                  var kind_001 = List.rev(acc);
                  var kind$1 = /* Combine */Block.__(3, [
                      /* Any_of */0,
                      kind_001
                    ]);
                  return element(kind$1);
                }
              };
            };
            as_kind = items(0, /* [] */0, List.map(Json_repr.Ezjsonm[/* view */0], l));
          } else {
            var partial_arg_000$2 = /* `Field */[
              331416730,
              "type"
            ];
            var partial_arg$2 = /* :: */[
              partial_arg_000$2,
              /* [] */0
            ];
            throw (function (param) {
                      return at_path(partial_arg$2, param);
                    })(unexpected(k, "type, type array or operator"));
          }
        } else {
          as_kind = element(parse_element_kind(source, json, k[1]));
        }
      } else {
        as_kind = undefined;
      }
      var match$1 = opt_uri_field(json, "$ref");
      var as_ref;
      if (match$1 !== undefined) {
        var path = collect_definition(match$1);
        as_ref = element(path);
      } else {
        as_ref = undefined;
      }
      var as_nary = function (name, combinator, others) {
        var build = function (cases) {
          if (cases) {
            if (cases[1]) {
              var kind = /* Combine */Block.__(3, [
                  combinator,
                  cases
                ]);
              return element(kind);
            } else {
              return cases[0];
            }
          }
          
        };
        var match = opt_field_view(json, name);
        if (match !== undefined) {
          var k = match;
          var exit = 0;
          if (typeof k === "number" || k[0] !== 65) {
            exit = 1;
          } else {
            var cases = k[1];
            if (cases) {
              var _i = 0;
              var _acc = /* [] */0;
              var _param = cases;
              while(true) {
                var param = _param;
                var acc = _acc;
                var i = _i;
                if (param) {
                  var elt;
                  try {
                    elt = parse_element(source, param[0]);
                  }
                  catch (raw_err){
                    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                    throw at_field(name)(at_index(i)(err));
                  }
                  _param = param[1];
                  _acc = /* :: */[
                    elt,
                    acc
                  ];
                  _i = i + 1 | 0;
                  continue ;
                } else {
                  return build(Pervasives.$at(others, List.rev(acc)));
                }
              };
            } else {
              exit = 1;
            }
          }
          if (exit === 1) {
            throw at_field(name)(unexpected(k, "a list of elements"));
          }
          
        } else {
          return build(others);
        }
      };
      var match$2 = opt_field_view(json, "not");
      var as_not;
      if (match$2 !== undefined) {
        var elt;
        try {
          elt = parse_element(source, Curry._1(Json_repr.Ezjsonm[/* repr */1], match$2));
        }
        catch (raw_err){
          var err = Caml_js_exceptions.internalToOCamlException(raw_err);
          var partial_arg_000$3 = /* `Field */[
            331416730,
            "not"
          ];
          var partial_arg$3 = /* :: */[
            partial_arg_000$3,
            /* [] */0
          ];
          throw (function (param) {
                    return at_path(partial_arg$3, param);
                  })(err);
        }
        var kind_001 = /* :: */[
          elt,
          /* [] */0
        ];
        var kind = /* Combine */Block.__(3, [
            /* Not */3,
            kind_001
          ]);
        as_not = element(kind);
      } else {
        as_not = undefined;
      }
      var title = opt_string_field(json, "title");
      var description = opt_string_field(json, "description");
      var match$3 = opt_field(json, "default");
      var $$default = match$3 !== undefined ? Json_repr.repr_to_any(Json_repr.Ezjsonm, Caml_option.valFromOption(match$3)) : undefined;
      var match$4 = opt_array_field(json, "enum");
      var $$enum = match$4 !== undefined ? List.map((function (param) {
                return Json_repr.repr_to_any(Json_repr.Ezjsonm, param);
              }), match$4) : undefined;
      var format = opt_string_field(json, "format");
      var as_one_of = as_nary("oneOf", /* One_of */1, /* [] */0);
      var as_any_of = as_nary("anyOf", /* Any_of */0, /* [] */0);
      var all_001 = /* :: */[
        as_ref,
        /* :: */[
          as_not,
          /* :: */[
            as_one_of,
            /* :: */[
              as_any_of,
              /* [] */0
            ]
          ]
        ]
      ];
      var all = /* :: */[
        as_kind,
        all_001
      ];
      var cases = List.flatten(List.map((function (param) {
                  if (param !== undefined) {
                    return /* :: */[
                            param,
                            /* [] */0
                          ];
                  } else {
                    return /* [] */0;
                  }
                }), all));
      var match$5 = as_nary("allOf", /* All_of */2, cases);
      var kind$1 = match$5 !== undefined ? match$5[/* kind */4] : /* Any */2;
      return /* record */[
              /* title */title,
              /* description */description,
              /* default */$$default,
              /* enum */$$enum,
              /* kind */kind$1,
              /* format */format,
              /* id */id
            ];
    }
  };
  var parse_element_kind = function (source, json, name) {
    var integer_specs = function (json) {
      var multiple_of = opt_int_field(json, "multipleOf");
      var minimum;
      if (opt_bool_field(false, json, "exclusiveMinimum")) {
        var match = opt_int_field(json, "minimum");
        if (match !== undefined) {
          minimum = /* tuple */[
            match,
            /* Inclusive */672226188
          ];
        } else {
          throw [
                Caml_builtin_exceptions.failure,
                "minimum field required when exclusiveMinimum is true"
              ];
        }
      } else {
        var match$1 = opt_int_field(json, "minimum");
        minimum = match$1 !== undefined ? /* tuple */[
            match$1,
            /* Exclusive */407121086
          ] : undefined;
      }
      var maximum;
      if (opt_bool_field(false, json, "exclusiveMaximum")) {
        var match$2 = opt_int_field(json, "maximum");
        if (match$2 !== undefined) {
          maximum = /* tuple */[
            match$2,
            /* Inclusive */672226188
          ];
        } else {
          throw [
                Caml_builtin_exceptions.failure,
                "maximum field required when exclusiveMaximum is true"
              ];
        }
      } else {
        var match$3 = opt_int_field(json, "maximum");
        maximum = match$3 !== undefined ? /* tuple */[
            match$3,
            /* Exclusive */407121086
          ] : undefined;
      }
      return /* record */[
              /* multiple_of */multiple_of,
              /* minimum */minimum,
              /* maximum */maximum
            ];
    };
    var numeric_specs = function (json) {
      var multiple_of = opt_float_field(json, "multipleOf");
      var minimum;
      if (opt_bool_field(false, json, "exclusiveMinimum")) {
        var match = opt_float_field(json, "minimum");
        if (match !== undefined) {
          minimum = /* tuple */[
            match,
            /* Inclusive */672226188
          ];
        } else {
          throw [
                Caml_builtin_exceptions.failure,
                "minimum field required when exclusiveMinimum is true"
              ];
        }
      } else {
        var match$1 = opt_float_field(json, "minimum");
        minimum = match$1 !== undefined ? /* tuple */[
            match$1,
            /* Exclusive */407121086
          ] : undefined;
      }
      var maximum;
      if (opt_bool_field(false, json, "exclusiveMaximum")) {
        var match$2 = opt_float_field(json, "maximum");
        if (match$2 !== undefined) {
          maximum = /* tuple */[
            match$2,
            /* Inclusive */672226188
          ];
        } else {
          throw [
                Caml_builtin_exceptions.failure,
                "maximum field required when exclusiveMaximum is true"
              ];
        }
      } else {
        var match$3 = opt_float_field(json, "maximum");
        maximum = match$3 !== undefined ? /* tuple */[
            match$3,
            /* Exclusive */407121086
          ] : undefined;
      }
      return /* record */[
              /* multiple_of */multiple_of,
              /* minimum */minimum,
              /* maximum */maximum
            ];
    };
    switch (name) {
      case "array" : 
          var unique_items = opt_bool_field(false, json, "uniqueItems");
          var min_items = opt_length_field(json, "minItems");
          var max_items = opt_length_field(json, "maxItems");
          var min_items$1 = min_items !== undefined ? min_items : 0;
          var match = opt_field_view(json, "additionalItems");
          var specs;
          if (match !== undefined) {
            var elt = match;
            var exit = 0;
            if (typeof elt === "number" || elt[0] !== 737456202) {
              exit = 1;
            } else {
              specs = elt[1] ? /* record */[
                  /* min_items */min_items$1,
                  /* max_items */max_items,
                  /* unique_items */unique_items,
                  /* additional_items *//* record */[
                    /* title */undefined,
                    /* description */undefined,
                    /* default */undefined,
                    /* enum */undefined,
                    /* kind : Any */2,
                    /* format */undefined,
                    /* id */undefined
                  ]
                ] : /* record */[
                  /* min_items */min_items$1,
                  /* max_items */max_items,
                  /* unique_items */unique_items,
                  /* additional_items */undefined
                ];
            }
            if (exit === 1) {
              var elt$1;
              try {
                elt$1 = parse_element(source, Curry._1(Json_repr.Ezjsonm[/* repr */1], elt));
              }
              catch (raw_err){
                var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                var partial_arg_000 = /* `Field */[
                  331416730,
                  "additionalItems"
                ];
                var partial_arg = /* :: */[
                  partial_arg_000,
                  /* [] */0
                ];
                throw (function (param) {
                          return at_path(partial_arg, param);
                        })(err);
              }
              specs = /* record */[
                /* min_items */min_items$1,
                /* max_items */max_items,
                /* unique_items */unique_items,
                /* additional_items */elt$1
              ];
            }
            
          } else {
            specs = /* record */[
              /* min_items */min_items$1,
              /* max_items */max_items,
              /* unique_items */unique_items,
              /* additional_items */undefined
            ];
          }
          var match$1 = opt_field_view(json, "items");
          if (match$1 !== undefined) {
            var elt$2 = match$1;
            var exit$1 = 0;
            if (typeof elt$2 === "number" || elt$2[0] !== 65) {
              exit$1 = 1;
            } else {
              var _i = 0;
              var _acc = /* [] */0;
              var _param = elt$2[1];
              while(true) {
                var param = _param;
                var acc = _acc;
                var i = _i;
                if (param) {
                  var elt$3;
                  try {
                    elt$3 = parse_element(source, param[0]);
                  }
                  catch (raw_err$1){
                    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
                    var partial_arg_000$1 = /* `Field */[
                      331416730,
                      "items"
                    ];
                    var partial_arg$1 = /* :: */[
                      partial_arg_000$1,
                      /* [] */0
                    ];
                    throw (function(partial_arg$1){
                          return function (param) {
                            return at_path(partial_arg$1, param);
                          }
                          }(partial_arg$1))(at_index(i)(err$1));
                  }
                  _param = param[1];
                  _acc = /* :: */[
                    elt$3,
                    acc
                  ];
                  _i = i + 1 | 0;
                  continue ;
                } else {
                  return /* Array */Block.__(1, [
                            List.rev(acc),
                            specs
                          ]);
                }
              };
            }
            if (exit$1 === 1) {
              var elt$4;
              try {
                elt$4 = parse_element(source, Curry._1(Json_repr.Ezjsonm[/* repr */1], elt$2));
              }
              catch (raw_err$2){
                var err$2 = Caml_js_exceptions.internalToOCamlException(raw_err$2);
                var partial_arg_000$2 = /* `Field */[
                  331416730,
                  "items"
                ];
                var partial_arg$2 = /* :: */[
                  partial_arg_000$2,
                  /* [] */0
                ];
                throw (function (param) {
                          return at_path(partial_arg$2, param);
                        })(err$2);
              }
              return /* Monomorphic_array */Block.__(2, [
                        elt$4,
                        specs
                      ]);
            }
            
          } else {
            return /* Monomorphic_array */Block.__(2, [
                      /* record */[
                        /* title */undefined,
                        /* description */undefined,
                        /* default */undefined,
                        /* enum */undefined,
                        /* kind : Any */2,
                        /* format */undefined,
                        /* id */undefined
                      ],
                      specs
                    ]);
          }
          break;
      case "boolean" : 
          return /* Boolean */0;
      case "integer" : 
          return /* Integer */Block.__(8, [integer_specs(json)]);
      case "null" : 
          return /* Null */1;
      case "number" : 
          return /* Number */Block.__(9, [numeric_specs(json)]);
      case "object" : 
          var match$2 = opt_array_field(json, "required");
          var required;
          if (match$2 !== undefined) {
            var items = function (_i, _acc, _param) {
              while(true) {
                var param = _param;
                var acc = _acc;
                var i = _i;
                if (param) {
                  var k = param[0];
                  var exit = 0;
                  if (typeof k === "number" || k[0] !== -976970511) {
                    exit = 1;
                  } else {
                    _param = param[1];
                    _acc = /* :: */[
                      k[1],
                      acc
                    ];
                    _i = i + 1 | 0;
                    continue ;
                  }
                  if (exit === 1) {
                    var partial_arg_000 = /* `Field */[
                      331416730,
                      "required"
                    ];
                    var partial_arg = /* :: */[
                      partial_arg_000,
                      /* [] */0
                    ];
                    throw (function(partial_arg){
                          return function (param) {
                            return at_path(partial_arg, param);
                          }
                          }(partial_arg))(at_index(i)(unexpected(k, "string")));
                  }
                  
                } else {
                  return List.rev(acc);
                }
              };
            };
            required = items(0, /* [] */0, List.map(Json_repr.Ezjsonm[/* view */0], match$2));
          } else {
            required = /* [] */0;
          }
          var match$3 = opt_field_view(json, "properties");
          var properties;
          if (match$3 !== undefined) {
            var k = match$3;
            if (typeof k === "number") {
              var partial_arg_000$3 = /* `Field */[
                331416730,
                "properties"
              ];
              var partial_arg$3 = /* :: */[
                partial_arg_000$3,
                /* [] */0
              ];
              throw (function (param) {
                        return at_path(partial_arg$3, param);
                      })(unexpected(k, "object"));
            }
            if (k[0] !== 79) {
              var partial_arg_000$4 = /* `Field */[
                331416730,
                "properties"
              ];
              var partial_arg$4 = /* :: */[
                partial_arg_000$4,
                /* [] */0
              ];
              throw (function (param) {
                        return at_path(partial_arg$4, param);
                      })(unexpected(k, "object"));
            }
            var items$1 = function (_acc, _param) {
              while(true) {
                var param = _param;
                var acc = _acc;
                if (param) {
                  var match = param[0];
                  var n = match[0];
                  var elt;
                  try {
                    elt = parse_element(source, match[1]);
                  }
                  catch (raw_err){
                    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                    var partial_arg_000 = /* `Field */[
                      331416730,
                      "properties"
                    ];
                    var partial_arg = /* :: */[
                      partial_arg_000,
                      /* [] */0
                    ];
                    throw (function(partial_arg){
                          return function (param) {
                            return at_path(partial_arg, param);
                          }
                          }(partial_arg))(at_field(n)(err));
                  }
                  var req = List.mem(n, required);
                  _param = param[1];
                  _acc = /* :: */[
                    /* tuple */[
                      n,
                      elt,
                      req,
                      undefined
                    ],
                    acc
                  ];
                  continue ;
                } else {
                  return List.rev(acc);
                }
              };
            };
            properties = items$1(/* [] */0, k[1]);
          } else {
            properties = /* [] */0;
          }
          var match$4 = opt_field_view(json, "additionalProperties");
          var additional_properties;
          if (match$4 !== undefined) {
            var elt$5 = match$4;
            var exit$2 = 0;
            if (typeof elt$5 === "number" || elt$5[0] !== 737456202) {
              exit$2 = 1;
            } else {
              additional_properties = elt$5[1] ? /* record */[
                  /* title */undefined,
                  /* description */undefined,
                  /* default */undefined,
                  /* enum */undefined,
                  /* kind : Any */2,
                  /* format */undefined,
                  /* id */undefined
                ] : undefined;
            }
            if (exit$2 === 1) {
              var tmp;
              try {
                tmp = parse_element(source, Curry._1(Json_repr.Ezjsonm[/* repr */1], elt$5));
              }
              catch (raw_err$3){
                var err$3 = Caml_js_exceptions.internalToOCamlException(raw_err$3);
                var partial_arg_000$5 = /* `Field */[
                  331416730,
                  "additionalProperties"
                ];
                var partial_arg$5 = /* :: */[
                  partial_arg_000$5,
                  /* [] */0
                ];
                throw (function (param) {
                          return at_path(partial_arg$5, param);
                        })(err$3);
              }
              additional_properties = tmp;
            }
            
          } else {
            additional_properties = /* record */[
              /* title */undefined,
              /* description */undefined,
              /* default */undefined,
              /* enum */undefined,
              /* kind : Any */2,
              /* format */undefined,
              /* id */undefined
            ];
          }
          var match$5 = opt_field_view(json, "propertyDependencies");
          var property_dependencies;
          if (match$5 !== undefined) {
            var k$1 = match$5;
            if (typeof k$1 === "number") {
              var partial_arg_000$6 = /* `Field */[
                331416730,
                "propertyDependencies"
              ];
              var partial_arg$6 = /* :: */[
                partial_arg_000$6,
                /* [] */0
              ];
              throw (function (param) {
                        return at_path(partial_arg$6, param);
                      })(unexpected(k$1, "object"));
            }
            if (k$1[0] !== 79) {
              var partial_arg_000$7 = /* `Field */[
                331416730,
                "propertyDependencies"
              ];
              var partial_arg$7 = /* :: */[
                partial_arg_000$7,
                /* [] */0
              ];
              throw (function (param) {
                        return at_path(partial_arg$7, param);
                      })(unexpected(k$1, "object"));
            }
            var sets = function (sacc, param) {
              if (param) {
                var match = param[0];
                var k = match[1];
                var n = match[0];
                var exit = 0;
                if (typeof k === "number" || k[0] !== 65) {
                  exit = 1;
                } else {
                  var tl = param[1];
                  var _j = 0;
                  var _acc = /* [] */0;
                  var _param = List.map(Json_repr.Ezjsonm[/* view */0], k[1]);
                  while(true) {
                    var param$1 = _param;
                    var acc = _acc;
                    var j = _j;
                    if (param$1) {
                      var k$1 = param$1[0];
                      var exit$1 = 0;
                      if (typeof k$1 === "number" || k$1[0] !== -976970511) {
                        exit$1 = 1;
                      } else {
                        _param = param$1[1];
                        _acc = /* :: */[
                          k$1[1],
                          acc
                        ];
                        _j = j + 1 | 0;
                        continue ;
                      }
                      if (exit$1 === 1) {
                        var partial_arg_000 = /* `Field */[
                          331416730,
                          "propertyDependencies"
                        ];
                        var partial_arg = /* :: */[
                          partial_arg_000,
                          /* [] */0
                        ];
                        throw (function(partial_arg){
                              return function (param) {
                                return at_path(partial_arg, param);
                              }
                              }(partial_arg))(at_field(n)(at_index(j)(unexpected(k$1, "string"))));
                      }
                      
                    } else {
                      return sets(/* :: */[
                                  /* tuple */[
                                    n,
                                    List.rev(acc)
                                  ],
                                  sacc
                                ], tl);
                    }
                  };
                }
                if (exit === 1) {
                  var partial_arg_000$1 = /* `Field */[
                    331416730,
                    "propertyDependencies"
                  ];
                  var partial_arg$1 = /* :: */[
                    partial_arg_000$1,
                    /* [] */0
                  ];
                  throw (function (param) {
                            return at_path(partial_arg$1, param);
                          })(at_field(n)(unexpected(k, "string array")));
                }
                
              } else {
                return List.rev(sacc);
              }
            };
            property_dependencies = sets(/* [] */0, List.map((function (param) {
                        return /* tuple */[
                                param[0],
                                Curry._1(Json_repr.Ezjsonm[/* view */0], param[1])
                              ];
                      }), k$1[1]));
          } else {
            property_dependencies = /* [] */0;
          }
          var parse_element_assoc = function (field) {
            var match = opt_field_view(json, field);
            if (match !== undefined) {
              var k = match;
              if (typeof k === "number") {
                throw at_field(field)(unexpected(k, "object"));
              }
              if (k[0] !== 79) {
                throw at_field(field)(unexpected(k, "object"));
              }
              var _acc = /* [] */0;
              var _param = k[1];
              while(true) {
                var param = _param;
                var acc = _acc;
                if (param) {
                  var match$1 = param[0];
                  var n = match$1[0];
                  var elt;
                  try {
                    elt = parse_element(source, match$1[1]);
                  }
                  catch (raw_err){
                    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                    throw at_field(field)(at_field(n)(err));
                  }
                  _param = param[1];
                  _acc = /* :: */[
                    /* tuple */[
                      n,
                      elt
                    ],
                    acc
                  ];
                  continue ;
                } else {
                  return List.rev(acc);
                }
              };
            } else {
              return /* [] */0;
            }
          };
          var pattern_properties = parse_element_assoc("patternProperties");
          var schema_dependencies = parse_element_assoc("schemaDependencies");
          var match$6 = opt_length_field(json, "minProperties");
          var min_properties = match$6 !== undefined ? match$6 : 0;
          var max_properties = opt_length_field(json, "maxProperties");
          return /* Object */Block.__(0, [/* record */[
                      /* properties */properties,
                      /* pattern_properties */pattern_properties,
                      /* additional_properties */additional_properties,
                      /* min_properties */min_properties,
                      /* max_properties */max_properties,
                      /* schema_dependencies */schema_dependencies,
                      /* property_dependencies */property_dependencies
                    ]]);
      case "string" : 
          var pattern = opt_string_field(json, "pattern");
          var min_length = opt_length_field(json, "minLength");
          var max_length = opt_length_field(json, "maxLength");
          var min_length$1 = min_length !== undefined ? min_length : 0;
          var specs$1 = /* record */[
            /* pattern */pattern,
            /* min_length */min_length$1,
            /* max_length */max_length
          ];
          return /* String */Block.__(7, [specs$1]);
      default:
        throw [
              Cannot_parse,
              /* [] */0,
              [
                Unexpected,
                name,
                "a known type"
              ]
            ];
    }
  };
  var root = parse_element("Uri.empty", json);
  var exit = 0;
  var val;
  try {
    val = Curry._1(Json_repr.Ezjsonm[/* view */0], Curry._2(Query[/* query */0], /* :: */[
              /* `Field */[
                331416730,
                "definitions"
              ],
              /* [] */0
            ], json));
    exit = 1;
  }
  catch (exn){
    if (exn !== Caml_builtin_exceptions.not_found) {
      throw exn;
    }
    
  }
  if (exit === 1) {
    if (typeof val !== "number") {
      if (val[0] === 79) {
        var all = List.map((function (param) {
                return "#/definitions/" + param[0];
              }), val[1]);
        List.iter((function (uri) {
                collect_definition(uri);
                return /* () */0;
              }), all);
      }
      
    }
    
  }
  List.iter((function (id) {
          if (List.mem_assoc(id, collected_id_defs[0])) {
            return 0;
          } else {
            throw [
                  Cannot_parse,
                  /* [] */0,
                  [
                    Dangling_reference,
                    "(Uri.(with_fragment empty (Some id)))"
                  ]
                ];
          }
        }), collected_id_refs[0]);
  var ids = collected_id_defs[0];
  var definitions = collected_definitions[0];
  return /* record */[
          /* root */root,
          /* source */schema_source,
          /* definitions */definitions,
          /* ids */ids,
          /* world : [] */0
        ];
}

function check_definitions(root, definitions) {
  var collected_id_defs = /* record */[/* contents : [] */0];
  var collected_id_refs = /* record */[/* contents : [] */0];
  var check = function (_elt) {
    while(true) {
      var elt = _elt;
      var id = elt[/* id */6];
      var kind = elt[/* kind */4];
      if (id !== undefined) {
        collected_id_defs[0] = /* :: */[
          /* tuple */[
            id,
            elt
          ],
          collected_id_defs[0]
        ];
      }
      if (typeof kind === "number") {
        return /* () */0;
      } else {
        switch (kind.tag | 0) {
          case 0 : 
              var match = kind[0];
              var additional_properties = match[/* additional_properties */2];
              List.iter((function (param) {
                      return check(param[1]);
                    }), match[/* properties */0]);
              List.iter((function (param) {
                      return check(param[1]);
                    }), match[/* pattern_properties */1]);
              List.iter((function (param) {
                      return check(param[1]);
                    }), match[/* schema_dependencies */5]);
              if (additional_properties !== undefined) {
                _elt = additional_properties;
                continue ;
              } else {
                return /* () */0;
              }
          case 1 : 
              var additional_items = kind[1][/* additional_items */3];
              List.iter(check, kind[0]);
              if (additional_items !== undefined) {
                _elt = additional_items;
                continue ;
              } else {
                return /* () */0;
              }
          case 2 : 
              var additional_items$1 = kind[1][/* additional_items */3];
              check(kind[0]);
              if (additional_items$1 !== undefined) {
                _elt = additional_items$1;
                continue ;
              } else {
                return /* () */0;
              }
          case 3 : 
              return List.iter(check, kind[1]);
          case 4 : 
              var path = kind[0];
              if (List.mem_assoc(path, definitions)) {
                return 0;
              } else {
                Json_query.json_pointer_of_path(undefined, path);
                throw [
                      Dangling_reference,
                      "(Uri.(with_fragment empty) (Some path))"
                    ];
              }
          case 5 : 
              collected_id_refs[0] = /* :: */[
                kind[0],
                collected_id_refs[0]
              ];
              return /* () */0;
          default:
            return /* () */0;
        }
      }
    };
  };
  check(root);
  List.iter((function (param) {
          return check(param[1]);
        }), definitions);
  List.iter((function (id) {
          if (List.mem_assoc(id, collected_id_defs[0])) {
            return 0;
          } else {
            throw [
                  Dangling_reference,
                  "(Uri.(with_fragment empty (Some id)))"
                ];
          }
        }), collected_id_refs[0]);
  return collected_id_defs[0];
}

function create(root) {
  var ids = check_definitions(root, /* [] */0);
  return /* record */[
          /* root */root,
          /* source */"Uri.empty",
          /* definitions : [] */0,
          /* ids */ids,
          /* world : [] */0
        ];
}

function root(param) {
  return param[/* root */0];
}

function update(root, sch) {
  var ids = check_definitions(root, sch[/* definitions */2]);
  return /* record */[
          /* root */root,
          /* source */sch[/* source */1],
          /* definitions */sch[/* definitions */2],
          /* ids */ids,
          /* world */sch[/* world */4]
        ];
}

var any = create(/* record */[
      /* title */undefined,
      /* description */undefined,
      /* default */undefined,
      /* enum */undefined,
      /* kind : Any */2,
      /* format */undefined,
      /* id */undefined
    ]);

var self_000 = /* root */element(/* Ext_ref */Block.__(6, [version]));

var self = /* record */[
  self_000,
  /* source */"Uri.empty",
  /* definitions : [] */0,
  /* ids : [] */0,
  /* world : [] */0
];

function simplify(schema) {
  var res = /* record */[/* contents : [] */0];
  var collect = function (_param) {
    while(true) {
      var param = _param;
      var kind = param[/* kind */4];
      if (typeof kind === "number") {
        return /* () */0;
      } else {
        switch (kind.tag | 0) {
          case 0 : 
              var match = kind[0];
              var additional_properties = match[/* additional_properties */2];
              List.iter((function (param) {
                      return collect(param[1]);
                    }), match[/* properties */0]);
              List.iter((function (param) {
                      return collect(param[1]);
                    }), match[/* pattern_properties */1]);
              List.iter((function (param) {
                      return collect(param[1]);
                    }), match[/* schema_dependencies */5]);
              if (additional_properties !== undefined) {
                _param = additional_properties;
                continue ;
              } else {
                return /* () */0;
              }
          case 1 : 
              var additional_items = kind[1][/* additional_items */3];
              List.iter(collect, kind[0]);
              if (additional_items !== undefined) {
                _param = additional_items;
                continue ;
              } else {
                return /* () */0;
              }
          case 2 : 
              var additional_items$1 = kind[1][/* additional_items */3];
              collect(kind[0]);
              if (additional_items$1 !== undefined) {
                _param = additional_items$1;
                continue ;
              } else {
                return /* () */0;
              }
          case 3 : 
              return List.iter(collect, kind[1]);
          case 4 : 
              var path = kind[0];
              var def = List.assoc(path, schema[/* definitions */2]);
              res[0] = insert_definition(path, def, res[0]);
              return /* () */0;
          default:
            return /* () */0;
        }
      }
    };
  };
  collect(schema[/* root */0]);
  return /* record */[
          /* root */schema[/* root */0],
          /* source */schema[/* source */1],
          /* definitions */res[0],
          /* ids */schema[/* ids */3],
          /* world */schema[/* world */4]
        ];
}

function definition_path_of_name($staropt$star, name) {
  var definitions_path = $staropt$star !== undefined ? $staropt$star : "/definitions/";
  var tmp;
  var exit = 0;
  var val;
  try {
    val = Caml_string.get(name, 0);
    exit = 1;
  }
  catch (exn){
    throw [
          Bad_reference,
          name
        ];
  }
  if (exit === 1) {
    tmp = val !== 47 ? definitions_path + name : name;
  }
  return Json_query.path_of_json_pointer(false, tmp);
}

function find_definition(definitions_path, name, schema) {
  var path = definition_path_of_name(definitions_path, name);
  return List.assoc(path, schema[/* definitions */2]);
}

function definition_ref(definitions_path, name) {
  var path = definition_path_of_name(definitions_path, name);
  return element(/* Def_ref */Block.__(4, [path]));
}

function definition_exists(definitions_path, name, schema) {
  var path = definition_path_of_name(definitions_path, name);
  return List.mem_assoc(path, schema[/* definitions */2]);
}

function add_definition(definitions_path, name, elt, schema) {
  var path = definition_path_of_name(definitions_path, name);
  var definitions = insert_definition(path, elt, schema[/* definitions */2]);
  return /* tuple */[
          /* record */[
            /* root */schema[/* root */0],
            /* source */schema[/* source */1],
            /* definitions */definitions,
            /* ids */schema[/* ids */3],
            /* world */schema[/* world */4]
          ],
          element(/* Def_ref */Block.__(4, [path]))
        ];
}

function merge_definitions(param) {
  var sb = param[1];
  var sa = param[0];
  var sorted_merge = function (rem) {
    if (rem) {
      var match = rem[1];
      if (match) {
        var tl = match[1];
        var b = match[0];
        var db = b[1];
        var a = rem[0];
        var da = a[1];
        var na = a[0];
        if (Caml_obj.caml_equal(na, b[0])) {
          if (da[/* kind */4] === /* Dummy */3 || db[/* kind */4] === /* Dummy */3 || eq_element(da, db)) {
            return /* :: */[
                    /* tuple */[
                      na,
                      da
                    ],
                    sorted_merge(tl)
                  ];
          } else {
            throw [
                  Duplicate_definition,
                  na,
                  da,
                  db
                ];
          }
        } else {
          return /* :: */[
                  a,
                  sorted_merge(/* :: */[
                        b,
                        tl
                      ])
                ];
        }
      } else {
        return rem;
      }
    } else {
      return rem;
    }
  };
  var definitions = sorted_merge(List.sort(Caml_obj.caml_compare, Pervasives.$at(sa[/* definitions */2], sb[/* definitions */2])));
  return /* tuple */[
          /* record */[
            /* root */sa[/* root */0],
            /* source */sa[/* source */1],
            /* definitions */definitions,
            /* ids */sa[/* ids */3],
            /* world */sa[/* world */4]
          ],
          /* record */[
            /* root */sb[/* root */0],
            /* source */sb[/* source */1],
            /* definitions */definitions,
            /* ids */sb[/* ids */3],
            /* world */sb[/* world */4]
          ]
        ];
}

function combine(op, schemas) {
  var _sacc = any;
  var _eacc = /* [] */0;
  var _param = schemas;
  while(true) {
    var param = _param;
    var eacc = _eacc;
    var sacc = _sacc;
    if (param) {
      var match = merge_definitions(/* tuple */[
            sacc,
            param[0]
          ]);
      _param = param[1];
      _eacc = /* :: */[
        match[1][/* root */0],
        eacc
      ];
      _sacc = match[0];
      continue ;
    } else {
      return update(element(/* Combine */Block.__(3, [
                        op,
                        eacc
                      ])), sacc);
    }
  };
}

function is_nullable(param) {
  var ids = param[/* ids */3];
  var definitions = param[/* definitions */2];
  var nullable = function (_param) {
    while(true) {
      var param = _param;
      var kind = param[/* kind */4];
      var exit = 0;
      if (typeof kind === "number") {
        switch (kind) {
          case 1 : 
          case 2 : 
              return true;
          case 3 : 
              exit = 1;
              break;
          default:
            return false;
        }
      } else {
        switch (kind.tag | 0) {
          case 3 : 
              var match = kind[0];
              if (match !== 2) {
                if (match >= 3) {
                  var match$1 = kind[1];
                  if (match$1 && !match$1[1]) {
                    return !nullable(match$1[0]);
                  } else {
                    exit = 1;
                  }
                } else {
                  return List.exists(nullable, kind[1]);
                }
              } else {
                return List.for_all(nullable, kind[1]);
              }
              break;
          case 4 : 
              _param = List.assoc(kind[0], definitions);
              continue ;
          case 5 : 
              _param = List.assoc(kind[0], ids);
              continue ;
          default:
            return false;
        }
      }
      if (exit === 1) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "json_schema.ml",
                1179,
                36
              ]
            ];
      }
      
    };
  };
  return nullable(param[/* root */0]);
}

var object_specs_002 = /* additional_properties *//* record */[
  /* title */undefined,
  /* description */undefined,
  /* default */undefined,
  /* enum */undefined,
  /* kind : Any */2,
  /* format */undefined,
  /* id */undefined
];

var object_specs = /* record */[
  /* properties : [] */0,
  /* pattern_properties : [] */0,
  object_specs_002,
  /* min_properties */0,
  /* max_properties */undefined,
  /* schema_dependencies : [] */0,
  /* property_dependencies : [] */0
];

var array_specs = /* record */[
  /* min_items */0,
  /* max_items */undefined,
  /* unique_items */false,
  /* additional_items */undefined
];

var string_specs = /* record */[
  /* pattern */undefined,
  /* min_length */0,
  /* max_length */undefined
];

var numeric_specs = /* record */[
  /* multiple_of */undefined,
  /* minimum */undefined,
  /* maximum */undefined
];

function Make(funarg) {
  var Query = Json_query.Make(funarg);
  var to_json = function (schema) {
    var obj = function (l) {
      return Curry._1(funarg[/* repr */1], /* `O */[
                  79,
                  l
                ]);
    };
    var set_always = function (f, v) {
      return /* :: */[
              /* tuple */[
                f,
                Curry._1(funarg[/* repr */1], v)
              ],
              /* [] */0
            ];
    };
    var set_if_some = function (f, v, cb) {
      if (v !== undefined) {
        return /* :: */[
                /* tuple */[
                  f,
                  Curry._1(funarg[/* repr */1], Curry._1(cb, Caml_option.valFromOption(v)))
                ],
                /* [] */0
              ];
      } else {
        return /* [] */0;
      }
    };
    var set_if_cons = function (f, v, cb) {
      if (v) {
        return /* :: */[
                /* tuple */[
                  f,
                  Curry._1(funarg[/* repr */1], Curry._1(cb, v))
                ],
                /* [] */0
              ];
      } else {
        return /* [] */0;
      }
    };
    var set_if_neq = function (f, v, v$prime, cb) {
      if (Caml_obj.caml_notequal(v, v$prime)) {
        return /* :: */[
                /* tuple */[
                  f,
                  Curry._1(funarg[/* repr */1], Curry._1(cb, v))
                ],
                /* [] */0
              ];
      } else {
        return /* [] */0;
      }
    };
    var format_element = function (param) {
      var kind = param[/* kind */4];
      var tmp;
      if (typeof kind === "number") {
        switch (kind) {
          case 0 : 
              tmp = set_always("type", /* `String */[
                    -976970511,
                    "boolean"
                  ]);
              break;
          case 1 : 
              tmp = set_always("type", /* `String */[
                    -976970511,
                    "null"
                  ]);
              break;
          case 2 : 
              tmp = /* [] */0;
              break;
          case 3 : 
              tmp = Pervasives.invalid_arg("Json_schema.to_json: remaining dummy element");
              break;
          
        }
      } else {
        switch (kind.tag | 0) {
          case 0 : 
              var specs = kind[0];
              var required = List.fold_left((function (r, param) {
                      if (param[2]) {
                        return /* :: */[
                                Curry._1(funarg[/* repr */1], /* `String */[
                                      -976970511,
                                      param[0]
                                    ]),
                                r
                              ];
                      } else {
                        return r;
                      }
                    }), /* [] */0, specs[/* properties */0]);
              var properties = List.map((function (param) {
                      return /* tuple */[
                              param[0],
                              obj(format_element(param[1]))
                            ];
                    }), specs[/* properties */0]);
              tmp = Pervasives.$at(set_always("type", /* `String */[
                        -976970511,
                        "object"
                      ]), Pervasives.$at(set_always("properties", /* `O */[
                            79,
                            properties
                          ]), Pervasives.$at(set_if_cons("required", required, (function (l) {
                                  return /* `A */[
                                          65,
                                          l
                                        ];
                                })), Pervasives.$at(set_if_cons("patternProperties", specs[/* pattern_properties */1], (function (fs) {
                                      return /* `O */[
                                              79,
                                              List.map((function (param) {
                                                      return /* tuple */[
                                                              param[0],
                                                              obj(format_element(param[1]))
                                                            ];
                                                    }), fs)
                                            ];
                                    })), Pervasives.$at(set_if_neq("additionalProperties", specs[/* additional_properties */2], /* record */[
                                        /* title */undefined,
                                        /* description */undefined,
                                        /* default */undefined,
                                        /* enum */undefined,
                                        /* kind : Any */2,
                                        /* format */undefined,
                                        /* id */undefined
                                      ], (function (param) {
                                          if (param !== undefined) {
                                            return /* `O */[
                                                    79,
                                                    format_element(param)
                                                  ];
                                          } else {
                                            return /* `Bool */[
                                                    737456202,
                                                    false
                                                  ];
                                          }
                                        })), Pervasives.$at(set_if_neq("minProperties", specs[/* min_properties */3], 0, (function (i) {
                                              return /* `Float */[
                                                      365180284,
                                                      i
                                                    ];
                                            })), Pervasives.$at(set_if_some("maxProperties", specs[/* max_properties */4], (function (i) {
                                                  return /* `Float */[
                                                          365180284,
                                                          i
                                                        ];
                                                })), Pervasives.$at(set_if_cons("schemaDependencies", specs[/* schema_dependencies */5], (function (fs) {
                                                      return /* `O */[
                                                              79,
                                                              List.map((function (param) {
                                                                      return /* tuple */[
                                                                              param[0],
                                                                              obj(format_element(param[1]))
                                                                            ];
                                                                    }), fs)
                                                            ];
                                                    })), set_if_cons("propertyDependencies", specs[/* property_dependencies */6], (function (fs) {
                                                      var strings = function (ls) {
                                                        return List.map((function (s) {
                                                                      return Curry._1(funarg[/* repr */1], /* `String */[
                                                                                  -976970511,
                                                                                  s
                                                                                ]);
                                                                    }), ls);
                                                      };
                                                      var property_dependencies = List.map((function (param) {
                                                              return /* tuple */[
                                                                      param[0],
                                                                      Curry._1(funarg[/* repr */1], /* `A */[
                                                                            65,
                                                                            strings(param[1])
                                                                          ])
                                                                    ];
                                                            }), fs);
                                                      return /* `O */[
                                                              79,
                                                              property_dependencies
                                                            ];
                                                    }))))))))));
              break;
          case 1 : 
              var specs$1 = kind[1];
              tmp = Pervasives.$at(set_always("type", /* `String */[
                        -976970511,
                        "array"
                      ]), Pervasives.$at(set_always("items", /* `A */[
                            65,
                            List.map((function (elt) {
                                    return obj(format_element(elt));
                                  }), kind[0])
                          ]), Pervasives.$at(set_if_neq("minItems", specs$1[/* min_items */0], 0, (function (i) {
                                  return /* `Float */[
                                          365180284,
                                          i
                                        ];
                                })), Pervasives.$at(set_if_some("maxItems", specs$1[/* max_items */1], (function (i) {
                                      return /* `Float */[
                                              365180284,
                                              i
                                            ];
                                    })), Pervasives.$at(set_if_neq("uniqueItems", specs$1[/* unique_items */2], false, (function (b) {
                                          return /* `Bool */[
                                                  737456202,
                                                  b
                                                ];
                                        })), set_if_neq("additionalItems", specs$1[/* additional_items */3], /* record */[
                                        /* title */undefined,
                                        /* description */undefined,
                                        /* default */undefined,
                                        /* enum */undefined,
                                        /* kind : Any */2,
                                        /* format */undefined,
                                        /* id */undefined
                                      ], (function (param) {
                                          if (param !== undefined) {
                                            return /* `O */[
                                                    79,
                                                    format_element(param)
                                                  ];
                                          } else {
                                            return /* `Bool */[
                                                    737456202,
                                                    false
                                                  ];
                                          }
                                        })))))));
              break;
          case 2 : 
              var match = kind[1];
              tmp = Pervasives.$at(set_always("type", /* `String */[
                        -976970511,
                        "array"
                      ]), Pervasives.$at(set_always("items", /* `O */[
                            79,
                            format_element(kind[0])
                          ]), Pervasives.$at(set_if_neq("minItems", match[/* min_items */0], 0, (function (i) {
                                  return /* `Float */[
                                          365180284,
                                          i
                                        ];
                                })), Pervasives.$at(set_if_some("maxItems", match[/* max_items */1], (function (i) {
                                      return /* `Float */[
                                              365180284,
                                              i
                                            ];
                                    })), set_if_neq("uniqueItems", match[/* unique_items */2], false, (function (b) {
                                      return /* `Bool */[
                                              737456202,
                                              b
                                            ];
                                    }))))));
              break;
          case 3 : 
              var combinator = function (param) {
                switch (param) {
                  case 0 : 
                      return "anyOf";
                  case 1 : 
                      return "oneOf";
                  case 2 : 
                      return "allOf";
                  case 3 : 
                      return "not";
                  
                }
              };
              tmp = set_always(combinator(kind[0]), /* `A */[
                    65,
                    List.map((function (elt) {
                            return obj(format_element(elt));
                          }), kind[1])
                  ]);
              break;
          case 4 : 
              tmp = set_always("$ref", /* `String */[
                    -976970511,
                    "#" + Json_query.json_pointer_of_path(undefined, kind[0])
                  ]);
              break;
          case 5 : 
              tmp = set_always("$ref", /* `String */[
                    -976970511,
                    "#" + kind[0]
                  ]);
              break;
          case 6 : 
              tmp = set_always("$ref", /* `String */[
                    -976970511,
                    kind[0]
                  ]);
              break;
          case 7 : 
              var match$1 = kind[0];
              tmp = Pervasives.$at(set_always("type", /* `String */[
                        -976970511,
                        "string"
                      ]), Pervasives.$at(set_if_neq("minLength", match$1[/* min_length */1], 0, (function (i) {
                              return /* `Float */[
                                      365180284,
                                      i
                                    ];
                            })), Pervasives.$at(set_if_some("maxLength", match$1[/* max_length */2], (function (i) {
                                  return /* `Float */[
                                          365180284,
                                          i
                                        ];
                                })), set_if_some("pattern", match$1[/* pattern */0], (function (s) {
                                  return /* `String */[
                                          -976970511,
                                          s
                                        ];
                                })))));
              break;
          case 8 : 
              var specs$2 = kind[0];
              var match$2 = specs$2[/* minimum */1];
              var tmp$1;
              if (match$2 !== undefined) {
                var match$3 = match$2;
                var v = match$3[0];
                tmp$1 = match$3[1] >= 672226188 ? /* :: */[
                    /* tuple */[
                      "minimum",
                      Curry._1(funarg[/* repr */1], /* `Float */[
                            365180284,
                            v
                          ])
                    ],
                    /* [] */0
                  ] : /* :: */[
                    /* tuple */[
                      "minimum",
                      Curry._1(funarg[/* repr */1], /* `Float */[
                            365180284,
                            v
                          ])
                    ],
                    /* :: */[
                      /* tuple */[
                        "exclusiveMinimum",
                        Curry._1(funarg[/* repr */1], /* `Bool */[
                              737456202,
                              true
                            ])
                      ],
                      /* [] */0
                    ]
                  ];
              } else {
                tmp$1 = /* [] */0;
              }
              var match$4 = specs$2[/* maximum */2];
              var tmp$2;
              if (match$4 !== undefined) {
                var match$5 = match$4;
                var v$1 = match$5[0];
                tmp$2 = match$5[1] >= 672226188 ? /* :: */[
                    /* tuple */[
                      "maximum",
                      Curry._1(funarg[/* repr */1], /* `Float */[
                            365180284,
                            v$1
                          ])
                    ],
                    /* [] */0
                  ] : /* :: */[
                    /* tuple */[
                      "maximum",
                      Curry._1(funarg[/* repr */1], /* `Float */[
                            365180284,
                            v$1
                          ])
                    ],
                    /* :: */[
                      /* tuple */[
                        "exclusiveMaximum",
                        Curry._1(funarg[/* repr */1], /* `Bool */[
                              737456202,
                              true
                            ])
                      ],
                      /* [] */0
                    ]
                  ];
              } else {
                tmp$2 = /* [] */0;
              }
              tmp = Pervasives.$at(set_always("type", /* `String */[
                        -976970511,
                        "integer"
                      ]), Pervasives.$at(set_if_some("multipleOf", specs$2[/* multiple_of */0], (function (v) {
                              return /* `Float */[
                                      365180284,
                                      v
                                    ];
                            })), Pervasives.$at(tmp$1, tmp$2)));
              break;
          case 9 : 
              var specs$3 = kind[0];
              var match$6 = specs$3[/* minimum */1];
              var tmp$3;
              if (match$6 !== undefined) {
                var match$7 = match$6;
                var v$2 = match$7[0];
                tmp$3 = match$7[1] >= 672226188 ? /* :: */[
                    /* tuple */[
                      "minimum",
                      Curry._1(funarg[/* repr */1], /* `Float */[
                            365180284,
                            v$2
                          ])
                    ],
                    /* [] */0
                  ] : /* :: */[
                    /* tuple */[
                      "minimum",
                      Curry._1(funarg[/* repr */1], /* `Float */[
                            365180284,
                            v$2
                          ])
                    ],
                    /* :: */[
                      /* tuple */[
                        "exclusiveMinimum",
                        Curry._1(funarg[/* repr */1], /* `Bool */[
                              737456202,
                              true
                            ])
                      ],
                      /* [] */0
                    ]
                  ];
              } else {
                tmp$3 = /* [] */0;
              }
              var match$8 = specs$3[/* maximum */2];
              var tmp$4;
              if (match$8 !== undefined) {
                var match$9 = match$8;
                var v$3 = match$9[0];
                tmp$4 = match$9[1] >= 672226188 ? /* :: */[
                    /* tuple */[
                      "maximum",
                      Curry._1(funarg[/* repr */1], /* `Float */[
                            365180284,
                            v$3
                          ])
                    ],
                    /* [] */0
                  ] : /* :: */[
                    /* tuple */[
                      "maximum",
                      Curry._1(funarg[/* repr */1], /* `Float */[
                            365180284,
                            v$3
                          ])
                    ],
                    /* :: */[
                      /* tuple */[
                        "exclusiveMaximum",
                        Curry._1(funarg[/* repr */1], /* `Bool */[
                              737456202,
                              true
                            ])
                      ],
                      /* [] */0
                    ]
                  ];
              } else {
                tmp$4 = /* [] */0;
              }
              tmp = Pervasives.$at(set_always("type", /* `String */[
                        -976970511,
                        "number"
                      ]), Pervasives.$at(set_if_some("multipleOf", specs$3[/* multiple_of */0], (function (v) {
                              return /* `Float */[
                                      365180284,
                                      v
                                    ];
                            })), Pervasives.$at(tmp$3, tmp$4)));
              break;
          
        }
      }
      return Pervasives.$at(set_if_some("title", param[/* title */0], (function (s) {
                        return /* `String */[
                                -976970511,
                                s
                              ];
                      })), Pervasives.$at(set_if_some("description", param[/* description */1], (function (s) {
                            return /* `String */[
                                    -976970511,
                                    s
                                  ];
                          })), Pervasives.$at(tmp, Pervasives.$at(set_if_some("default", param[/* default */2], (function (j) {
                                    return Curry._1(funarg[/* view */0], Json_repr.any_to_repr(funarg, j));
                                  })), Pervasives.$at(set_if_some("enum", param[/* enum */3], (function (js) {
                                        return /* `A */[
                                                65,
                                                List.map((function (param) {
                                                        return Json_repr.any_to_repr(funarg, param);
                                                      }), js)
                                              ];
                                      })), set_if_some("format", param[/* format */5], (function (s) {
                                        return /* `String */[
                                                -976970511,
                                                s
                                              ];
                                      })))))));
    };
    return List.fold_left((function (acc, param) {
                  return Curry._3(Query[/* insert */2], param[0], obj(format_element(param[1])), acc);
                }), obj(Pervasives.$at(set_always("$schema", /* `String */[
                            -976970511,
                            version
                          ]), format_element(schema[/* root */0]))), schema[/* definitions */2]);
  };
  var unexpected = function (kind, expected) {
    var kind$1;
    if (typeof kind === "number") {
      kind$1 = "null";
    } else {
      var variant = kind[0];
      kind$1 = variant !== 65 ? (
          variant >= 365180284 ? (
              variant >= 737456202 ? "boolean" : "number"
            ) : (
              variant >= 79 ? (
                  kind[1] ? "object" : "empty object"
                ) : (
                  kind[1] === "" ? "empty string" : "string"
                )
            )
        ) : (
          kind[1] ? "array" : "empty array"
        );
    }
    return [
            Cannot_parse,
            /* [] */0,
            [
              Unexpected,
              kind$1,
              expected
            ]
          ];
  };
  var at_path = function (p, exn) {
    if (exn[0] === Cannot_parse) {
      return [
              Cannot_parse,
              Pervasives.$at(p, exn[1]),
              exn[2]
            ];
    } else {
      return exn;
    }
  };
  var at_field = function (n) {
    var partial_arg_000 = /* `Field */[
      331416730,
      n
    ];
    var partial_arg = /* :: */[
      partial_arg_000,
      /* [] */0
    ];
    return (function (param) {
        return at_path(partial_arg, param);
      });
  };
  var at_index = function (i) {
    var partial_arg_000 = /* `Index */[
      -784200974,
      i
    ];
    var partial_arg = /* :: */[
      partial_arg_000,
      /* [] */0
    ];
    return (function (param) {
        return at_path(partial_arg, param);
      });
  };
  var of_json = function (json) {
    var opt_field = function (obj, n) {
      var match = Curry._1(funarg[/* view */0], obj);
      if (typeof match === "number" || match[0] !== 79) {
        return undefined;
      } else {
        try {
          return Caml_option.some(List.assoc(n, match[1]));
        }
        catch (exn){
          if (exn === Caml_builtin_exceptions.not_found) {
            return undefined;
          } else {
            throw exn;
          }
        }
      }
    };
    var opt_field_view = function (obj, n) {
      var match = Curry._1(funarg[/* view */0], obj);
      if (typeof match === "number" || match[0] !== 79) {
        return undefined;
      } else {
        try {
          return Curry._1(funarg[/* view */0], List.assoc(n, match[1]));
        }
        catch (exn){
          if (exn === Caml_builtin_exceptions.not_found) {
            return undefined;
          } else {
            throw exn;
          }
        }
      }
    };
    var opt_string_field = function (obj, n) {
      var match = opt_field_view(obj, n);
      if (match !== undefined) {
        var k = match;
        if (typeof k === "number") {
          throw at_field(n)(unexpected(k, "string"));
        }
        if (k[0] !== -976970511) {
          throw at_field(n)(unexpected(k, "string"));
        }
        return k[1];
      }
      
    };
    var opt_bool_field = function (def, obj, n) {
      var match = opt_field_view(obj, n);
      if (match !== undefined) {
        var k = match;
        if (typeof k === "number") {
          throw at_field(n)(unexpected(k, "bool"));
        }
        if (k[0] !== 737456202) {
          throw at_field(n)(unexpected(k, "bool"));
        }
        return k[1];
      } else {
        return def;
      }
    };
    var opt_int_field = function (obj, n) {
      var match = opt_field_view(obj, n);
      if (match !== undefined) {
        var k = match;
        var exit = 0;
        if (typeof k === "number" || k[0] !== 365180284) {
          exit = 1;
        } else {
          var f = k[1];
          if (Caml_float.caml_modf_float(f)[0] === 0 && f <= Math.pow(2, 53) && f >= Math.pow(-2, 53)) {
            return f;
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          throw at_field(n)(unexpected(k, "integer"));
        }
        
      }
      
    };
    var opt_length_field = function (obj, n) {
      var match = opt_field_view(obj, n);
      if (match !== undefined) {
        var k = match;
        var exit = 0;
        if (typeof k === "number" || k[0] !== 365180284) {
          exit = 1;
        } else {
          var f = k[1];
          if (Caml_float.caml_modf_float(f)[0] === 0 && f <= Math.pow(2, 30) && f >= 0) {
            return f | 0;
          } else {
            exit = 1;
          }
        }
        if (exit === 1) {
          throw at_field(n)(unexpected(k, "length"));
        }
        
      }
      
    };
    var opt_float_field = function (obj, n) {
      var match = opt_field_view(obj, n);
      if (match !== undefined) {
        var k = match;
        if (typeof k === "number") {
          throw at_field(n)(unexpected(k, "number"));
        }
        if (k[0] !== 365180284) {
          throw at_field(n)(unexpected(k, "number"));
        }
        return k[1];
      }
      
    };
    var opt_array_field = function (obj, n) {
      var match = opt_field_view(obj, n);
      if (match !== undefined) {
        var k = match;
        if (typeof k === "number") {
          throw at_field(n)(unexpected(k, "array"));
        }
        if (k[0] !== 65) {
          throw at_field(n)(unexpected(k, "array"));
        }
        return k[1];
      }
      
    };
    var opt_uri_field = function (obj, n) {
      var match = opt_string_field(obj, n);
      if (match !== undefined) {
        return match;
      }
      
    };
    var match = opt_uri_field(json, "id");
    var schema_source = match !== undefined ? "Uri.with_fragment uri None" : "Uri.empty";
    var collected_definitions = /* record */[/* contents : [] */0];
    var collected_id_defs = /* record */[/* contents : [] */0];
    var collected_id_refs = /* record */[/* contents : [] */0];
    var collect_definition = function (uri) {
      var match = "lol";
      if (match !== undefined) {
        var fragment = match;
        if ($$String.contains(fragment, /* "/" */47)) {
          var path;
          try {
            path = Json_query.path_of_json_pointer(false, fragment);
          }
          catch (raw_err){
            var err = Caml_js_exceptions.internalToOCamlException(raw_err);
            throw [
                  Cannot_parse,
                  /* [] */0,
                  err
                ];
          }
          try {
            var raw = Curry._2(Query[/* query */0], path, json);
            if (!List.mem_assoc(path, collected_definitions[0])) {
              collected_definitions[0] = insert_definition(path, /* record */[
                    /* title */undefined,
                    /* description */undefined,
                    /* default */undefined,
                    /* enum */undefined,
                    /* kind : Dummy */3,
                    /* format */undefined,
                    /* id */undefined
                  ], collected_definitions[0]);
              var elt;
              try {
                elt = parse_element(schema_source, raw);
              }
              catch (raw_err$1){
                var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
                throw at_path(path, err$1);
              }
              collected_definitions[0] = insert_definition(path, elt, collected_definitions[0]);
            }
            return /* Def_ref */Block.__(4, [path]);
          }
          catch (exn){
            if (exn === Caml_builtin_exceptions.not_found) {
              throw [
                    Cannot_parse,
                    /* [] */0,
                    [
                      Dangling_reference,
                      uri
                    ]
                  ];
            }
            throw exn;
          }
        } else {
          collected_id_refs[0] = /* :: */[
            fragment,
            collected_id_refs[0]
          ];
          return /* Id_ref */Block.__(5, [fragment]);
        }
      } else {
        throw [
              Cannot_parse,
              /* [] */0,
              [
                Bad_reference,
                "uri has no fragment"
              ]
            ];
      }
    };
    var parse_element = function (source, json) {
      opt_uri_field(json, "id");
      if (source !== schema_source) {
        return /* record */[
                /* title */undefined,
                /* description */undefined,
                /* default */undefined,
                /* enum */undefined,
                /* kind : Ext_ref */Block.__(6, [""]),
                /* format */undefined,
                /* id */undefined
              ];
      } else {
        var id;
        id = undefined;
        var match = opt_field_view(json, "type");
        var as_kind;
        if (match !== undefined) {
          var k = match;
          if (typeof k === "number") {
            var partial_arg_000 = /* `Field */[
              331416730,
              "type"
            ];
            var partial_arg = /* :: */[
              partial_arg_000,
              /* [] */0
            ];
            throw (function (param) {
                      return at_path(partial_arg, param);
                    })(unexpected(k, "type, type array or operator"));
          }
          var variant = k[0];
          if (variant !== -976970511) {
            if (variant !== 65) {
              var partial_arg_000$1 = /* `Field */[
                331416730,
                "type"
              ];
              var partial_arg$1 = /* :: */[
                partial_arg_000$1,
                /* [] */0
              ];
              throw (function (param) {
                        return at_path(partial_arg$1, param);
                      })(unexpected(k, "type, type array or operator"));
            }
            var l = k[1];
            if (l) {
              var items = function (_i, _acc, _param) {
                while(true) {
                  var param = _param;
                  var acc = _acc;
                  var i = _i;
                  if (param) {
                    var k = param[0];
                    var exit = 0;
                    if (typeof k === "number" || k[0] !== -976970511) {
                      exit = 1;
                    } else {
                      var kind = parse_element_kind(source, json, k[1]);
                      var $$case = element(kind);
                      _param = param[1];
                      _acc = /* :: */[
                        $$case,
                        acc
                      ];
                      _i = i + 1 | 0;
                      continue ;
                    }
                    if (exit === 1) {
                      var partial_arg_000 = /* `Field */[
                        331416730,
                        "type"
                      ];
                      var partial_arg = /* :: */[
                        partial_arg_000,
                        /* [] */0
                      ];
                      throw (function(partial_arg){
                            return function (param) {
                              return at_path(partial_arg, param);
                            }
                            }(partial_arg))(at_index(i)(unexpected(k, "type")));
                    }
                    
                  } else {
                    var kind_001 = List.rev(acc);
                    var kind$1 = /* Combine */Block.__(3, [
                        /* Any_of */0,
                        kind_001
                      ]);
                    return element(kind$1);
                  }
                };
              };
              as_kind = items(0, /* [] */0, List.map(funarg[/* view */0], l));
            } else {
              var partial_arg_000$2 = /* `Field */[
                331416730,
                "type"
              ];
              var partial_arg$2 = /* :: */[
                partial_arg_000$2,
                /* [] */0
              ];
              throw (function (param) {
                        return at_path(partial_arg$2, param);
                      })(unexpected(k, "type, type array or operator"));
            }
          } else {
            as_kind = element(parse_element_kind(source, json, k[1]));
          }
        } else {
          as_kind = undefined;
        }
        var match$1 = opt_uri_field(json, "$ref");
        var as_ref;
        if (match$1 !== undefined) {
          var path = collect_definition(match$1);
          as_ref = element(path);
        } else {
          as_ref = undefined;
        }
        var as_nary = function (name, combinator, others) {
          var build = function (cases) {
            if (cases) {
              if (cases[1]) {
                var kind = /* Combine */Block.__(3, [
                    combinator,
                    cases
                  ]);
                return element(kind);
              } else {
                return cases[0];
              }
            }
            
          };
          var match = opt_field_view(json, name);
          if (match !== undefined) {
            var k = match;
            var exit = 0;
            if (typeof k === "number" || k[0] !== 65) {
              exit = 1;
            } else {
              var cases = k[1];
              if (cases) {
                var _i = 0;
                var _acc = /* [] */0;
                var _param = cases;
                while(true) {
                  var param = _param;
                  var acc = _acc;
                  var i = _i;
                  if (param) {
                    var elt;
                    try {
                      elt = parse_element(source, param[0]);
                    }
                    catch (raw_err){
                      var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                      throw at_field(name)(at_index(i)(err));
                    }
                    _param = param[1];
                    _acc = /* :: */[
                      elt,
                      acc
                    ];
                    _i = i + 1 | 0;
                    continue ;
                  } else {
                    return build(Pervasives.$at(others, List.rev(acc)));
                  }
                };
              } else {
                exit = 1;
              }
            }
            if (exit === 1) {
              throw at_field(name)(unexpected(k, "a list of elements"));
            }
            
          } else {
            return build(others);
          }
        };
        var match$2 = opt_field_view(json, "not");
        var as_not;
        if (match$2 !== undefined) {
          var elt;
          try {
            elt = parse_element(source, Curry._1(funarg[/* repr */1], match$2));
          }
          catch (raw_err){
            var err = Caml_js_exceptions.internalToOCamlException(raw_err);
            var partial_arg_000$3 = /* `Field */[
              331416730,
              "not"
            ];
            var partial_arg$3 = /* :: */[
              partial_arg_000$3,
              /* [] */0
            ];
            throw (function (param) {
                      return at_path(partial_arg$3, param);
                    })(err);
          }
          var kind_001 = /* :: */[
            elt,
            /* [] */0
          ];
          var kind = /* Combine */Block.__(3, [
              /* Not */3,
              kind_001
            ]);
          as_not = element(kind);
        } else {
          as_not = undefined;
        }
        var title = opt_string_field(json, "title");
        var description = opt_string_field(json, "description");
        var match$3 = opt_field(json, "default");
        var $$default = match$3 !== undefined ? Json_repr.repr_to_any(funarg, Caml_option.valFromOption(match$3)) : undefined;
        var match$4 = opt_array_field(json, "enum");
        var $$enum = match$4 !== undefined ? List.map((function (param) {
                  return Json_repr.repr_to_any(funarg, param);
                }), match$4) : undefined;
        var format = opt_string_field(json, "format");
        var as_one_of = as_nary("oneOf", /* One_of */1, /* [] */0);
        var as_any_of = as_nary("anyOf", /* Any_of */0, /* [] */0);
        var all_001 = /* :: */[
          as_ref,
          /* :: */[
            as_not,
            /* :: */[
              as_one_of,
              /* :: */[
                as_any_of,
                /* [] */0
              ]
            ]
          ]
        ];
        var all = /* :: */[
          as_kind,
          all_001
        ];
        var cases = List.flatten(List.map((function (param) {
                    if (param !== undefined) {
                      return /* :: */[
                              param,
                              /* [] */0
                            ];
                    } else {
                      return /* [] */0;
                    }
                  }), all));
        var match$5 = as_nary("allOf", /* All_of */2, cases);
        var kind$1 = match$5 !== undefined ? match$5[/* kind */4] : /* Any */2;
        return /* record */[
                /* title */title,
                /* description */description,
                /* default */$$default,
                /* enum */$$enum,
                /* kind */kind$1,
                /* format */format,
                /* id */id
              ];
      }
    };
    var parse_element_kind = function (source, json, name) {
      var integer_specs = function (json) {
        var multiple_of = opt_int_field(json, "multipleOf");
        var minimum;
        if (opt_bool_field(false, json, "exclusiveMinimum")) {
          var match = opt_int_field(json, "minimum");
          if (match !== undefined) {
            minimum = /* tuple */[
              match,
              /* Inclusive */672226188
            ];
          } else {
            throw [
                  Caml_builtin_exceptions.failure,
                  "minimum field required when exclusiveMinimum is true"
                ];
          }
        } else {
          var match$1 = opt_int_field(json, "minimum");
          minimum = match$1 !== undefined ? /* tuple */[
              match$1,
              /* Exclusive */407121086
            ] : undefined;
        }
        var maximum;
        if (opt_bool_field(false, json, "exclusiveMaximum")) {
          var match$2 = opt_int_field(json, "maximum");
          if (match$2 !== undefined) {
            maximum = /* tuple */[
              match$2,
              /* Inclusive */672226188
            ];
          } else {
            throw [
                  Caml_builtin_exceptions.failure,
                  "maximum field required when exclusiveMaximum is true"
                ];
          }
        } else {
          var match$3 = opt_int_field(json, "maximum");
          maximum = match$3 !== undefined ? /* tuple */[
              match$3,
              /* Exclusive */407121086
            ] : undefined;
        }
        return /* record */[
                /* multiple_of */multiple_of,
                /* minimum */minimum,
                /* maximum */maximum
              ];
      };
      var numeric_specs = function (json) {
        var multiple_of = opt_float_field(json, "multipleOf");
        var minimum;
        if (opt_bool_field(false, json, "exclusiveMinimum")) {
          var match = opt_float_field(json, "minimum");
          if (match !== undefined) {
            minimum = /* tuple */[
              match,
              /* Inclusive */672226188
            ];
          } else {
            throw [
                  Caml_builtin_exceptions.failure,
                  "minimum field required when exclusiveMinimum is true"
                ];
          }
        } else {
          var match$1 = opt_float_field(json, "minimum");
          minimum = match$1 !== undefined ? /* tuple */[
              match$1,
              /* Exclusive */407121086
            ] : undefined;
        }
        var maximum;
        if (opt_bool_field(false, json, "exclusiveMaximum")) {
          var match$2 = opt_float_field(json, "maximum");
          if (match$2 !== undefined) {
            maximum = /* tuple */[
              match$2,
              /* Inclusive */672226188
            ];
          } else {
            throw [
                  Caml_builtin_exceptions.failure,
                  "maximum field required when exclusiveMaximum is true"
                ];
          }
        } else {
          var match$3 = opt_float_field(json, "maximum");
          maximum = match$3 !== undefined ? /* tuple */[
              match$3,
              /* Exclusive */407121086
            ] : undefined;
        }
        return /* record */[
                /* multiple_of */multiple_of,
                /* minimum */minimum,
                /* maximum */maximum
              ];
      };
      switch (name) {
        case "array" : 
            var unique_items = opt_bool_field(false, json, "uniqueItems");
            var min_items = opt_length_field(json, "minItems");
            var max_items = opt_length_field(json, "maxItems");
            var min_items$1 = min_items !== undefined ? min_items : 0;
            var match = opt_field_view(json, "additionalItems");
            var specs;
            if (match !== undefined) {
              var elt = match;
              var exit = 0;
              if (typeof elt === "number" || elt[0] !== 737456202) {
                exit = 1;
              } else {
                specs = elt[1] ? /* record */[
                    /* min_items */min_items$1,
                    /* max_items */max_items,
                    /* unique_items */unique_items,
                    /* additional_items *//* record */[
                      /* title */undefined,
                      /* description */undefined,
                      /* default */undefined,
                      /* enum */undefined,
                      /* kind : Any */2,
                      /* format */undefined,
                      /* id */undefined
                    ]
                  ] : /* record */[
                    /* min_items */min_items$1,
                    /* max_items */max_items,
                    /* unique_items */unique_items,
                    /* additional_items */undefined
                  ];
              }
              if (exit === 1) {
                var elt$1;
                try {
                  elt$1 = parse_element(source, Curry._1(funarg[/* repr */1], elt));
                }
                catch (raw_err){
                  var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                  var partial_arg_000 = /* `Field */[
                    331416730,
                    "additionalItems"
                  ];
                  var partial_arg = /* :: */[
                    partial_arg_000,
                    /* [] */0
                  ];
                  throw (function (param) {
                            return at_path(partial_arg, param);
                          })(err);
                }
                specs = /* record */[
                  /* min_items */min_items$1,
                  /* max_items */max_items,
                  /* unique_items */unique_items,
                  /* additional_items */elt$1
                ];
              }
              
            } else {
              specs = /* record */[
                /* min_items */min_items$1,
                /* max_items */max_items,
                /* unique_items */unique_items,
                /* additional_items */undefined
              ];
            }
            var match$1 = opt_field_view(json, "items");
            if (match$1 !== undefined) {
              var elt$2 = match$1;
              var exit$1 = 0;
              if (typeof elt$2 === "number" || elt$2[0] !== 65) {
                exit$1 = 1;
              } else {
                var _i = 0;
                var _acc = /* [] */0;
                var _param = elt$2[1];
                while(true) {
                  var param = _param;
                  var acc = _acc;
                  var i = _i;
                  if (param) {
                    var elt$3;
                    try {
                      elt$3 = parse_element(source, param[0]);
                    }
                    catch (raw_err$1){
                      var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
                      var partial_arg_000$1 = /* `Field */[
                        331416730,
                        "items"
                      ];
                      var partial_arg$1 = /* :: */[
                        partial_arg_000$1,
                        /* [] */0
                      ];
                      throw (function(partial_arg$1){
                            return function (param) {
                              return at_path(partial_arg$1, param);
                            }
                            }(partial_arg$1))(at_index(i)(err$1));
                    }
                    _param = param[1];
                    _acc = /* :: */[
                      elt$3,
                      acc
                    ];
                    _i = i + 1 | 0;
                    continue ;
                  } else {
                    return /* Array */Block.__(1, [
                              List.rev(acc),
                              specs
                            ]);
                  }
                };
              }
              if (exit$1 === 1) {
                var elt$4;
                try {
                  elt$4 = parse_element(source, Curry._1(funarg[/* repr */1], elt$2));
                }
                catch (raw_err$2){
                  var err$2 = Caml_js_exceptions.internalToOCamlException(raw_err$2);
                  var partial_arg_000$2 = /* `Field */[
                    331416730,
                    "items"
                  ];
                  var partial_arg$2 = /* :: */[
                    partial_arg_000$2,
                    /* [] */0
                  ];
                  throw (function (param) {
                            return at_path(partial_arg$2, param);
                          })(err$2);
                }
                return /* Monomorphic_array */Block.__(2, [
                          elt$4,
                          specs
                        ]);
              }
              
            } else {
              return /* Monomorphic_array */Block.__(2, [
                        /* record */[
                          /* title */undefined,
                          /* description */undefined,
                          /* default */undefined,
                          /* enum */undefined,
                          /* kind : Any */2,
                          /* format */undefined,
                          /* id */undefined
                        ],
                        specs
                      ]);
            }
            break;
        case "boolean" : 
            return /* Boolean */0;
        case "integer" : 
            return /* Integer */Block.__(8, [integer_specs(json)]);
        case "null" : 
            return /* Null */1;
        case "number" : 
            return /* Number */Block.__(9, [numeric_specs(json)]);
        case "object" : 
            var match$2 = opt_array_field(json, "required");
            var required;
            if (match$2 !== undefined) {
              var items = function (_i, _acc, _param) {
                while(true) {
                  var param = _param;
                  var acc = _acc;
                  var i = _i;
                  if (param) {
                    var k = param[0];
                    var exit = 0;
                    if (typeof k === "number" || k[0] !== -976970511) {
                      exit = 1;
                    } else {
                      _param = param[1];
                      _acc = /* :: */[
                        k[1],
                        acc
                      ];
                      _i = i + 1 | 0;
                      continue ;
                    }
                    if (exit === 1) {
                      var partial_arg_000 = /* `Field */[
                        331416730,
                        "required"
                      ];
                      var partial_arg = /* :: */[
                        partial_arg_000,
                        /* [] */0
                      ];
                      throw (function(partial_arg){
                            return function (param) {
                              return at_path(partial_arg, param);
                            }
                            }(partial_arg))(at_index(i)(unexpected(k, "string")));
                    }
                    
                  } else {
                    return List.rev(acc);
                  }
                };
              };
              required = items(0, /* [] */0, List.map(funarg[/* view */0], match$2));
            } else {
              required = /* [] */0;
            }
            var match$3 = opt_field_view(json, "properties");
            var properties;
            if (match$3 !== undefined) {
              var k = match$3;
              if (typeof k === "number") {
                var partial_arg_000$3 = /* `Field */[
                  331416730,
                  "properties"
                ];
                var partial_arg$3 = /* :: */[
                  partial_arg_000$3,
                  /* [] */0
                ];
                throw (function (param) {
                          return at_path(partial_arg$3, param);
                        })(unexpected(k, "object"));
              }
              if (k[0] !== 79) {
                var partial_arg_000$4 = /* `Field */[
                  331416730,
                  "properties"
                ];
                var partial_arg$4 = /* :: */[
                  partial_arg_000$4,
                  /* [] */0
                ];
                throw (function (param) {
                          return at_path(partial_arg$4, param);
                        })(unexpected(k, "object"));
              }
              var items$1 = function (_acc, _param) {
                while(true) {
                  var param = _param;
                  var acc = _acc;
                  if (param) {
                    var match = param[0];
                    var n = match[0];
                    var elt;
                    try {
                      elt = parse_element(source, match[1]);
                    }
                    catch (raw_err){
                      var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                      var partial_arg_000 = /* `Field */[
                        331416730,
                        "properties"
                      ];
                      var partial_arg = /* :: */[
                        partial_arg_000,
                        /* [] */0
                      ];
                      throw (function(partial_arg){
                            return function (param) {
                              return at_path(partial_arg, param);
                            }
                            }(partial_arg))(at_field(n)(err));
                    }
                    var req = List.mem(n, required);
                    _param = param[1];
                    _acc = /* :: */[
                      /* tuple */[
                        n,
                        elt,
                        req,
                        undefined
                      ],
                      acc
                    ];
                    continue ;
                  } else {
                    return List.rev(acc);
                  }
                };
              };
              properties = items$1(/* [] */0, k[1]);
            } else {
              properties = /* [] */0;
            }
            var match$4 = opt_field_view(json, "additionalProperties");
            var additional_properties;
            if (match$4 !== undefined) {
              var elt$5 = match$4;
              var exit$2 = 0;
              if (typeof elt$5 === "number" || elt$5[0] !== 737456202) {
                exit$2 = 1;
              } else {
                additional_properties = elt$5[1] ? /* record */[
                    /* title */undefined,
                    /* description */undefined,
                    /* default */undefined,
                    /* enum */undefined,
                    /* kind : Any */2,
                    /* format */undefined,
                    /* id */undefined
                  ] : undefined;
              }
              if (exit$2 === 1) {
                var tmp;
                try {
                  tmp = parse_element(source, Curry._1(funarg[/* repr */1], elt$5));
                }
                catch (raw_err$3){
                  var err$3 = Caml_js_exceptions.internalToOCamlException(raw_err$3);
                  var partial_arg_000$5 = /* `Field */[
                    331416730,
                    "additionalProperties"
                  ];
                  var partial_arg$5 = /* :: */[
                    partial_arg_000$5,
                    /* [] */0
                  ];
                  throw (function (param) {
                            return at_path(partial_arg$5, param);
                          })(err$3);
                }
                additional_properties = tmp;
              }
              
            } else {
              additional_properties = /* record */[
                /* title */undefined,
                /* description */undefined,
                /* default */undefined,
                /* enum */undefined,
                /* kind : Any */2,
                /* format */undefined,
                /* id */undefined
              ];
            }
            var match$5 = opt_field_view(json, "propertyDependencies");
            var property_dependencies;
            if (match$5 !== undefined) {
              var k$1 = match$5;
              if (typeof k$1 === "number") {
                var partial_arg_000$6 = /* `Field */[
                  331416730,
                  "propertyDependencies"
                ];
                var partial_arg$6 = /* :: */[
                  partial_arg_000$6,
                  /* [] */0
                ];
                throw (function (param) {
                          return at_path(partial_arg$6, param);
                        })(unexpected(k$1, "object"));
              }
              if (k$1[0] !== 79) {
                var partial_arg_000$7 = /* `Field */[
                  331416730,
                  "propertyDependencies"
                ];
                var partial_arg$7 = /* :: */[
                  partial_arg_000$7,
                  /* [] */0
                ];
                throw (function (param) {
                          return at_path(partial_arg$7, param);
                        })(unexpected(k$1, "object"));
              }
              var sets = function (sacc, param) {
                if (param) {
                  var match = param[0];
                  var k = match[1];
                  var n = match[0];
                  var exit = 0;
                  if (typeof k === "number" || k[0] !== 65) {
                    exit = 1;
                  } else {
                    var tl = param[1];
                    var _j = 0;
                    var _acc = /* [] */0;
                    var _param = List.map(funarg[/* view */0], k[1]);
                    while(true) {
                      var param$1 = _param;
                      var acc = _acc;
                      var j = _j;
                      if (param$1) {
                        var k$1 = param$1[0];
                        var exit$1 = 0;
                        if (typeof k$1 === "number" || k$1[0] !== -976970511) {
                          exit$1 = 1;
                        } else {
                          _param = param$1[1];
                          _acc = /* :: */[
                            k$1[1],
                            acc
                          ];
                          _j = j + 1 | 0;
                          continue ;
                        }
                        if (exit$1 === 1) {
                          var partial_arg_000 = /* `Field */[
                            331416730,
                            "propertyDependencies"
                          ];
                          var partial_arg = /* :: */[
                            partial_arg_000,
                            /* [] */0
                          ];
                          throw (function(partial_arg){
                                return function (param) {
                                  return at_path(partial_arg, param);
                                }
                                }(partial_arg))(at_field(n)(at_index(j)(unexpected(k$1, "string"))));
                        }
                        
                      } else {
                        return sets(/* :: */[
                                    /* tuple */[
                                      n,
                                      List.rev(acc)
                                    ],
                                    sacc
                                  ], tl);
                      }
                    };
                  }
                  if (exit === 1) {
                    var partial_arg_000$1 = /* `Field */[
                      331416730,
                      "propertyDependencies"
                    ];
                    var partial_arg$1 = /* :: */[
                      partial_arg_000$1,
                      /* [] */0
                    ];
                    throw (function (param) {
                              return at_path(partial_arg$1, param);
                            })(at_field(n)(unexpected(k, "string array")));
                  }
                  
                } else {
                  return List.rev(sacc);
                }
              };
              property_dependencies = sets(/* [] */0, List.map((function (param) {
                          return /* tuple */[
                                  param[0],
                                  Curry._1(funarg[/* view */0], param[1])
                                ];
                        }), k$1[1]));
            } else {
              property_dependencies = /* [] */0;
            }
            var parse_element_assoc = function (field) {
              var match = opt_field_view(json, field);
              if (match !== undefined) {
                var k = match;
                if (typeof k === "number") {
                  throw at_field(field)(unexpected(k, "object"));
                }
                if (k[0] !== 79) {
                  throw at_field(field)(unexpected(k, "object"));
                }
                var _acc = /* [] */0;
                var _param = k[1];
                while(true) {
                  var param = _param;
                  var acc = _acc;
                  if (param) {
                    var match$1 = param[0];
                    var n = match$1[0];
                    var elt;
                    try {
                      elt = parse_element(source, match$1[1]);
                    }
                    catch (raw_err){
                      var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                      throw at_field(field)(at_field(n)(err));
                    }
                    _param = param[1];
                    _acc = /* :: */[
                      /* tuple */[
                        n,
                        elt
                      ],
                      acc
                    ];
                    continue ;
                  } else {
                    return List.rev(acc);
                  }
                };
              } else {
                return /* [] */0;
              }
            };
            var pattern_properties = parse_element_assoc("patternProperties");
            var schema_dependencies = parse_element_assoc("schemaDependencies");
            var match$6 = opt_length_field(json, "minProperties");
            var min_properties = match$6 !== undefined ? match$6 : 0;
            var max_properties = opt_length_field(json, "maxProperties");
            return /* Object */Block.__(0, [/* record */[
                        /* properties */properties,
                        /* pattern_properties */pattern_properties,
                        /* additional_properties */additional_properties,
                        /* min_properties */min_properties,
                        /* max_properties */max_properties,
                        /* schema_dependencies */schema_dependencies,
                        /* property_dependencies */property_dependencies
                      ]]);
        case "string" : 
            var pattern = opt_string_field(json, "pattern");
            var min_length = opt_length_field(json, "minLength");
            var max_length = opt_length_field(json, "maxLength");
            var min_length$1 = min_length !== undefined ? min_length : 0;
            var specs$1 = /* record */[
              /* pattern */pattern,
              /* min_length */min_length$1,
              /* max_length */max_length
            ];
            return /* String */Block.__(7, [specs$1]);
        default:
          throw [
                Cannot_parse,
                /* [] */0,
                [
                  Unexpected,
                  name,
                  "a known type"
                ]
              ];
      }
    };
    var root = parse_element("Uri.empty", json);
    var exit = 0;
    var val;
    try {
      val = Curry._1(funarg[/* view */0], Curry._2(Query[/* query */0], /* :: */[
                /* `Field */[
                  331416730,
                  "definitions"
                ],
                /* [] */0
              ], json));
      exit = 1;
    }
    catch (exn){
      if (exn !== Caml_builtin_exceptions.not_found) {
        throw exn;
      }
      
    }
    if (exit === 1) {
      if (typeof val !== "number") {
        if (val[0] === 79) {
          var all = List.map((function (param) {
                  return "#/definitions/" + param[0];
                }), val[1]);
          List.iter((function (uri) {
                  collect_definition(uri);
                  return /* () */0;
                }), all);
        }
        
      }
      
    }
    List.iter((function (id) {
            if (List.mem_assoc(id, collected_id_defs[0])) {
              return 0;
            } else {
              throw [
                    Cannot_parse,
                    /* [] */0,
                    [
                      Dangling_reference,
                      "(Uri.(with_fragment empty (Some id)))"
                    ]
                  ];
            }
          }), collected_id_refs[0]);
    var ids = collected_id_defs[0];
    var definitions = collected_definitions[0];
    return /* record */[
            /* root */root,
            /* source */schema_source,
            /* definitions */definitions,
            /* ids */ids,
            /* world : [] */0
          ];
  };
  var check_definitions = function (root, definitions) {
    var collected_id_defs = /* record */[/* contents : [] */0];
    var collected_id_refs = /* record */[/* contents : [] */0];
    var check = function (_elt) {
      while(true) {
        var elt = _elt;
        var id = elt[/* id */6];
        var kind = elt[/* kind */4];
        if (id !== undefined) {
          collected_id_defs[0] = /* :: */[
            /* tuple */[
              id,
              elt
            ],
            collected_id_defs[0]
          ];
        }
        if (typeof kind === "number") {
          return /* () */0;
        } else {
          switch (kind.tag | 0) {
            case 0 : 
                var match = kind[0];
                var additional_properties = match[/* additional_properties */2];
                List.iter((function (param) {
                        return check(param[1]);
                      }), match[/* properties */0]);
                List.iter((function (param) {
                        return check(param[1]);
                      }), match[/* pattern_properties */1]);
                List.iter((function (param) {
                        return check(param[1]);
                      }), match[/* schema_dependencies */5]);
                if (additional_properties !== undefined) {
                  _elt = additional_properties;
                  continue ;
                } else {
                  return /* () */0;
                }
            case 1 : 
                var additional_items = kind[1][/* additional_items */3];
                List.iter(check, kind[0]);
                if (additional_items !== undefined) {
                  _elt = additional_items;
                  continue ;
                } else {
                  return /* () */0;
                }
            case 2 : 
                var additional_items$1 = kind[1][/* additional_items */3];
                check(kind[0]);
                if (additional_items$1 !== undefined) {
                  _elt = additional_items$1;
                  continue ;
                } else {
                  return /* () */0;
                }
            case 3 : 
                return List.iter(check, kind[1]);
            case 4 : 
                var path = kind[0];
                if (List.mem_assoc(path, definitions)) {
                  return 0;
                } else {
                  Json_query.json_pointer_of_path(undefined, path);
                  throw [
                        Dangling_reference,
                        "(Uri.(with_fragment empty) (Some path))"
                      ];
                }
            case 5 : 
                collected_id_refs[0] = /* :: */[
                  kind[0],
                  collected_id_refs[0]
                ];
                return /* () */0;
            default:
              return /* () */0;
          }
        }
      };
    };
    check(root);
    List.iter((function (param) {
            return check(param[1]);
          }), definitions);
    List.iter((function (id) {
            if (List.mem_assoc(id, collected_id_defs[0])) {
              return 0;
            } else {
              throw [
                    Dangling_reference,
                    "(Uri.(with_fragment empty (Some id)))"
                  ];
            }
          }), collected_id_refs[0]);
    return collected_id_defs[0];
  };
  var create = function (root) {
    var ids = check_definitions(root, /* [] */0);
    return /* record */[
            /* root */root,
            /* source */"Uri.empty",
            /* definitions : [] */0,
            /* ids */ids,
            /* world : [] */0
          ];
  };
  create(/* record */[
        /* title */undefined,
        /* description */undefined,
        /* default */undefined,
        /* enum */undefined,
        /* kind : Any */2,
        /* format */undefined,
        /* id */undefined
      ]);
  element(/* Ext_ref */Block.__(6, [version]));
  return [
          to_json,
          of_json
        ];
}

exports.element = element;
exports.create = create;
exports.root = root;
exports.update = update;
exports.self = self;
exports.any = any;
exports.combine = combine;
exports.is_nullable = is_nullable;
exports.merge_definitions = merge_definitions;
exports.simplify = simplify;
exports.add_definition = add_definition;
exports.find_definition = find_definition;
exports.definition_exists = definition_exists;
exports.definition_ref = definition_ref;
exports.array_specs = array_specs;
exports.object_specs = object_specs;
exports.string_specs = string_specs;
exports.numeric_specs = numeric_specs;
exports.to_json = to_json;
exports.of_json = of_json;
exports.pp = pp;
exports.Cannot_parse = Cannot_parse;
exports.Dangling_reference = Dangling_reference;
exports.Bad_reference = Bad_reference;
exports.Unexpected = Unexpected;
exports.Duplicate_definition = Duplicate_definition;
exports.print_error = print_error;
exports.Make = Make;
/* Query Not a pure module */
