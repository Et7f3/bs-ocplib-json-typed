// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Sys = require("bs-platform/lib/js/sys.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Int32 = require("bs-platform/lib/js/int32.js");
var Format = require("bs-platform/lib/js/format.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Json_repr = require("./json_repr.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_float = require("bs-platform/lib/js/caml_float.js");
var Caml_int64 = require("bs-platform/lib/js/caml_int64.js");
var Json_query = require("./json_query.bs.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Json_schema = require("./json_schema.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var Unexpected = Caml_exceptions.create("Json_encoding.Unexpected");

var No_case_matched = Caml_exceptions.create("Json_encoding.No_case_matched");

var Bad_array_size = Caml_exceptions.create("Json_encoding.Bad_array_size");

var Missing_field = Caml_exceptions.create("Json_encoding.Missing_field");

var Unexpected_field = Caml_exceptions.create("Json_encoding.Unexpected_field");

var Bad_schema = Caml_exceptions.create("Json_encoding.Bad_schema");

var Cannot_destruct = Caml_exceptions.create("Json_encoding.Cannot_destruct");

function unexpected(kind, expected) {
  var kind$1;
  if (typeof kind === "number") {
    kind$1 = "null";
  } else {
    var variant = kind[0];
    kind$1 = variant !== 65 ? (
        variant >= 365180284 ? (
            variant >= 737456202 ? "boolean" : "number"
          ) : (
            variant >= 79 ? (
                kind[1] ? "object" : "empty object"
              ) : "string"
          )
      ) : (
        kind[1] ? "array" : "empty array"
      );
  }
  return [
          Cannot_destruct,
          /* tuple */[
            /* [] */0,
            [
              Unexpected,
              kind$1,
              expected
            ]
          ]
        ];
}

function construct(enc, v) {
  var construct$1 = function (_enc) {
    while(true) {
      var enc = _enc;
      if (typeof enc === "number") {
        switch (enc) {
          case 0 : 
              return (function (param) {
                  return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* Null */870828711);
                });
          case 1 : 
              return (function (param) {
                  return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                              79,
                              /* [] */0
                            ]);
                });
          case 2 : 
              return (function (param) {
                  return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                              79,
                              /* [] */0
                            ]);
                });
          case 3 : 
              return (function (b) {
                  return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Bool */[
                              737456202,
                              b
                            ]);
                });
          case 4 : 
              return (function (s) {
                  return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `String */[
                              -976970511,
                              s
                            ]);
                });
          
        }
      } else {
        switch (enc.tag | 0) {
          case 0 : 
              var t = enc[0];
              return (function(t){
              return function (param) {
                if (param !== undefined) {
                  return Curry._1(construct$1(t), Caml_option.valFromOption(param));
                } else {
                  return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* Null */870828711);
                }
              }
              }(t));
          case 1 : 
              var str = enc[0];
              return (function(str){
              return function (param) {
                return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `String */[
                            -976970511,
                            str
                          ]);
              }
              }(str));
          case 2 : 
              var match = enc[0];
              var upper_bound = match[/* upper_bound */4];
              var lower_bound = match[/* lower_bound */3];
              var to_float = match[/* to_float */2];
              var int_name = match[/* int_name */0];
              return (function(upper_bound,lower_bound,to_float,int_name){
              return function (i) {
                if (Caml_obj.caml_lessthan(i, lower_bound) || Caml_obj.caml_greaterthan(i, upper_bound)) {
                  Pervasives.invalid_arg("Json_encoding.construct: " + (int_name + " out of range"));
                }
                return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Float */[
                            365180284,
                            Curry._1(to_float, i)
                          ]);
              }
              }(upper_bound,lower_bound,to_float,int_name));
          case 3 : 
              var match$1 = enc[0];
              if (match$1 !== undefined) {
                var match$2 = match$1;
                var maximum = match$2[/* maximum */2];
                var minimum = match$2[/* minimum */1];
                var err = "Json_encoding.construct: " + (match$2[/* float_name */0] + " out of range");
                return (function(maximum,minimum,err){
                return function ($$float) {
                  if ($$float < minimum || $$float > maximum) {
                    Pervasives.invalid_arg(err);
                  }
                  return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Float */[
                              365180284,
                              $$float
                            ]);
                }
                }(maximum,minimum,err));
              } else {
                return (function ($$float) {
                    return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `Float */[
                                365180284,
                                $$float
                              ]);
                  });
              }
          case 4 : 
              var t$1 = enc[0];
              var w = (function(t$1){
              return function w(v) {
                return Curry._1(construct$1(t$1), v);
              }
              }(t$1));
              return (function (arr) {
                  return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `A */[
                              65,
                              $$Array.to_list($$Array.map(w, arr))
                            ]);
                });
          case 5 : 
              var match$3 = enc[0];
              switch (match$3.tag | 0) {
                case 0 : 
                    var match$4 = match$3[0];
                    var t$2 = match$4[/* encoding */1];
                    var n = match$4[/* name */0];
                    return (function(t$2,n){
                    return function (v) {
                      return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                                  79,
                                  /* :: */[
                                    /* tuple */[
                                      n,
                                      Curry._1(construct$1(t$2), v)
                                    ],
                                    /* [] */0
                                  ]
                                ]);
                    }
                    }(t$2,n));
                case 1 : 
                    var match$5 = match$3[0];
                    var t$3 = match$5[/* encoding */1];
                    var n$1 = match$5[/* name */0];
                    return (function(t$3,n$1){
                    return function (param) {
                      if (param !== undefined) {
                        return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                                    79,
                                    /* :: */[
                                      /* tuple */[
                                        n$1,
                                        Curry._1(construct$1(t$3), Caml_option.valFromOption(param))
                                      ],
                                      /* [] */0
                                    ]
                                  ]);
                      } else {
                        return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                                    79,
                                    /* [] */0
                                  ]);
                      }
                    }
                    }(t$3,n$1));
                case 2 : 
                    var match$6 = match$3[0];
                    var d = match$6[/* default */4];
                    var t$4 = match$6[/* encoding */1];
                    var n$2 = match$6[/* name */0];
                    return (function(d,t$4,n$2){
                    return function (v) {
                      return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                                  79,
                                  Caml_obj.caml_notequal(v, d) ? /* :: */[
                                      /* tuple */[
                                        n$2,
                                        Curry._1(construct$1(t$4), v)
                                      ],
                                      /* [] */0
                                    ] : /* [] */0
                                ]);
                    }
                    }(d,t$4,n$2));
                
              }
          case 6 : 
              var o2 = enc[1];
              var o1 = enc[0];
              return (function(o2,o1){
              return function (param) {
                var match = Curry._1(Json_repr.Ezjsonm[/* view */0], Curry._1(construct$1(o1), param[0]));
                var match$1 = Curry._1(Json_repr.Ezjsonm[/* view */0], Curry._1(construct$1(o2), param[1]));
                if (typeof match === "number" || match[0] !== 79 || typeof match$1 === "number" || match$1[0] !== 79) {
                  return Pervasives.invalid_arg("Json_encoding.construct: consequence of bad merge_objs");
                } else {
                  return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `O */[
                              79,
                              Pervasives.$at(match[1], match$1[1])
                            ]);
                }
              }
              }(o2,o1));
          case 7 : 
              var t$5 = enc[0];
              return (function(t$5){
              return function (v) {
                return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `A */[
                            65,
                            /* :: */[
                              Curry._1(construct$1(t$5), v),
                              /* [] */0
                            ]
                          ]);
              }
              }(t$5));
          case 8 : 
              var o2$1 = enc[1];
              var o1$1 = enc[0];
              return (function(o2$1,o1$1){
              return function (param) {
                var match = Curry._1(Json_repr.Ezjsonm[/* view */0], Curry._1(construct$1(o1$1), param[0]));
                var match$1 = Curry._1(Json_repr.Ezjsonm[/* view */0], Curry._1(construct$1(o2$1), param[1]));
                if (typeof match === "number" || match[0] !== 65 || typeof match$1 === "number" || match$1[0] !== 65) {
                  return Pervasives.invalid_arg("Json_encoding.construct: consequence of bad merge_tups");
                } else {
                  return Curry._1(Json_repr.Ezjsonm[/* repr */1], /* `A */[
                              65,
                              Pervasives.$at(match[1], match$1[1])
                            ]);
                }
              }
              }(o2$1,o1$1));
          case 9 : 
              var write = enc[0][/* write */0];
              return (function(write){
              return function (j) {
                return Curry._2(write, Json_repr.Ezjsonm, j);
              }
              }(write));
          case 10 : 
              var t$6 = enc[2];
              var ffrom = enc[0];
              return (function(t$6,ffrom){
              return function (v) {
                return Curry._1(construct$1(t$6), Curry._1(ffrom, v));
              }
              }(t$6,ffrom));
          case 11 : 
              _enc = enc[0][/* encoding */3];
              continue ;
          case 12 : 
              _enc = Curry._1(enc[0][/* self */3], enc);
              continue ;
          case 13 : 
              var cases = enc[0];
              return (function(cases){
              return function (v) {
                var _param = cases;
                while(true) {
                  var param = _param;
                  if (param) {
                    var match = param[0][0];
                    var match$1 = Curry._1(match[/* proj */1], v);
                    if (match$1 !== undefined) {
                      return Curry._1(construct$1(match[/* encoding */0]), Caml_option.valFromOption(match$1));
                    } else {
                      _param = param[1];
                      continue ;
                    }
                  } else {
                    return Pervasives.invalid_arg("Json_encoding.construct: consequence of bad union");
                  }
                };
              }
              }(cases));
          
        }
      }
    };
  };
  return Curry._1(construct$1(enc), v);
}

function destruct(_enc) {
  while(true) {
    var enc = _enc;
    if (typeof enc === "number") {
      switch (enc) {
        case 0 : 
            return (function (v) {
                var k = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
                if (k !== 870828711) {
                  throw unexpected(k, "null");
                } else {
                  return /* () */0;
                }
              });
        case 1 : 
            return (function (v) {
                var k = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
                if (typeof k === "number") {
                  throw unexpected(k, "an empty object");
                }
                if (k[0] !== 79) {
                  throw unexpected(k, "an empty object");
                }
                var match = k[1];
                if (match) {
                  if (match[1]) {
                    throw unexpected(k, "an empty object");
                  }
                  throw [
                        Cannot_destruct,
                        /* tuple */[
                          /* [] */0,
                          [
                            Unexpected_field,
                            match[0][0]
                          ]
                        ]
                      ];
                } else {
                  return /* () */0;
                }
              });
        case 2 : 
            return (function (v) {
                Curry._1(Json_repr.Ezjsonm[/* view */0], v);
                return /* () */0;
              });
        case 3 : 
            return (function (v) {
                var k = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
                if (typeof k === "number") {
                  throw unexpected(k, "boolean");
                }
                if (k[0] !== 737456202) {
                  throw unexpected(k, "boolean");
                }
                return k[1];
              });
        case 4 : 
            return (function (v) {
                var k = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
                if (typeof k === "number") {
                  throw unexpected(k, "string");
                }
                if (k[0] !== -976970511) {
                  throw unexpected(k, "string");
                }
                return k[1];
              });
        
      }
    } else {
      switch (enc.tag | 0) {
        case 0 : 
            var t = enc[0];
            return (function(t){
            return function (v) {
              var match = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
              if (match !== 870828711) {
                return Caml_option.some(Curry._1(destruct(t), v));
              }
              
            }
            }(t));
        case 1 : 
            var str = enc[0];
            return (function(str){
            return function (v) {
              var x = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
              if (typeof x === "number") {
                throw unexpected(x, str);
              }
              if (x[0] !== -976970511) {
                throw unexpected(x, str);
              }
              if (x[1] === str) {
                return /* () */0;
              } else {
                throw unexpected(x, str);
              }
            }
            }(str));
        case 2 : 
            var match = enc[0];
            var to_float = match[/* to_float */2];
            var of_float = match[/* of_float */1];
            var int_name = match[/* int_name */0];
            var lower_bound = Curry._1(to_float, match[/* lower_bound */3]);
            var upper_bound = Curry._1(to_float, match[/* upper_bound */4]);
            return (function(of_float,int_name,lower_bound,upper_bound){
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
              if (typeof k === "number") {
                throw unexpected(k, "number");
              }
              if (k[0] !== 365180284) {
                throw unexpected(k, "number");
              }
              var match = Caml_float.caml_modf_float(k[1]);
              var v$1 = match[1];
              if (match[0] !== 0) {
                var exn_001 = int_name + " cannot have a fractional part";
                var exn = [
                  Caml_builtin_exceptions.failure,
                  exn_001
                ];
                throw [
                      Cannot_destruct,
                      /* tuple */[
                        /* [] */0,
                        exn
                      ]
                    ];
              }
              if (v$1 < lower_bound || v$1 > upper_bound) {
                var exn_001$1 = int_name + " out of range";
                var exn$1 = [
                  Caml_builtin_exceptions.failure,
                  exn_001$1
                ];
                throw [
                      Cannot_destruct,
                      /* tuple */[
                        /* [] */0,
                        exn$1
                      ]
                    ];
              }
              return Curry._1(of_float, v$1);
            }
            }(of_float,int_name,lower_bound,upper_bound));
        case 3 : 
            var match$1 = enc[0];
            if (match$1 !== undefined) {
              var match$2 = match$1;
              var maximum = match$2[/* maximum */2];
              var minimum = match$2[/* minimum */1];
              var float_name = match$2[/* float_name */0];
              return (function(maximum,minimum,float_name){
              return function (v) {
                var k = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
                if (typeof k === "number") {
                  throw unexpected(k, "float");
                }
                if (k[0] !== 365180284) {
                  throw unexpected(k, "float");
                }
                var f = k[1];
                if (f < minimum || f > maximum) {
                  var exn_001 = float_name + " out of range";
                  var exn = [
                    Caml_builtin_exceptions.failure,
                    exn_001
                  ];
                  throw [
                        Cannot_destruct,
                        /* tuple */[
                          /* [] */0,
                          exn
                        ]
                      ];
                } else {
                  return f;
                }
              }
              }(maximum,minimum,float_name));
            } else {
              return (function (v) {
                  var k = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
                  if (typeof k === "number") {
                    throw unexpected(k, "float");
                  }
                  if (k[0] !== 365180284) {
                    throw unexpected(k, "float");
                  }
                  return k[1];
                });
            }
        case 4 : 
            var t$1 = enc[0];
            return (function(t$1){
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
              if (typeof k === "number") {
                throw unexpected(k, "array");
              }
              var variant = k[0];
              if (variant !== 65) {
                if (variant !== 79) {
                  throw unexpected(k, "array");
                }
                if (k[1]) {
                  throw unexpected(k, "array");
                }
                return /* array */[];
              } else {
                return $$Array.mapi((function (i, cell) {
                              try {
                                return Curry._1(destruct(t$1), cell);
                              }
                              catch (raw_exn){
                                var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                                if (exn[0] === Cannot_destruct) {
                                  var match = exn[1];
                                  throw [
                                        Cannot_destruct,
                                        /* tuple */[
                                          /* :: */[
                                            /* `Index */[
                                              -784200974,
                                              i
                                            ],
                                            match[0]
                                          ],
                                          match[1]
                                        ]
                                      ];
                                } else {
                                  throw exn;
                                }
                              }
                            }), $$Array.of_list(k[1]));
              }
            }
            }(t$1));
        case 5 : 
            var d = destruct_obj(enc);
            return (function(d){
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
              if (typeof k === "number") {
                throw unexpected(k, "object");
              }
              if (k[0] !== 79) {
                throw unexpected(k, "object");
              }
              var match = Curry._1(d, k[1]);
              var rest = match[1];
              var r = match[0];
              if (rest) {
                if (!match[2]) {
                  throw [
                        Unexpected_field,
                        rest[0][0]
                      ];
                }
                return r;
              } else {
                return r;
              }
            }
            }(d));
        case 6 : 
            var d$1 = destruct_obj(enc);
            return (function(d$1){
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
              if (typeof k === "number") {
                throw unexpected(k, "object");
              }
              if (k[0] !== 79) {
                throw unexpected(k, "object");
              }
              var match = Curry._1(d$1, k[1]);
              var rest = match[1];
              var r = match[0];
              if (rest) {
                if (!match[2]) {
                  throw [
                        Unexpected_field,
                        rest[0][0]
                      ];
                }
                return r;
              } else {
                return r;
              }
            }
            }(d$1));
        case 7 : 
            var match$3 = destruct_tup(0, enc);
            var i = match$3[1];
            var r = match$3[0];
            return (function(i,r){
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
              if (typeof k === "number") {
                throw unexpected(k, "array");
              }
              if (k[0] !== 65) {
                throw unexpected(k, "array");
              }
              var cells = $$Array.of_list(k[1]);
              var len = cells.length;
              if (i !== cells.length) {
                throw [
                      Cannot_destruct,
                      /* tuple */[
                        /* [] */0,
                        [
                          Bad_array_size,
                          len,
                          i
                        ]
                      ]
                    ];
              }
              return Curry._1(r, cells);
            }
            }(i,r));
        case 8 : 
            var match$4 = destruct_tup(0, enc);
            var i$1 = match$4[1];
            var r$1 = match$4[0];
            return (function(i$1,r$1){
            return function (v) {
              var k = Curry._1(Json_repr.Ezjsonm[/* view */0], v);
              if (typeof k === "number") {
                throw unexpected(k, "array");
              }
              if (k[0] !== 65) {
                throw unexpected(k, "array");
              }
              var cells = $$Array.of_list(k[1]);
              var len = cells.length;
              if (i$1 !== cells.length) {
                throw [
                      Cannot_destruct,
                      /* tuple */[
                        /* [] */0,
                        [
                          Bad_array_size,
                          len,
                          i$1
                        ]
                      ]
                    ];
              }
              return Curry._1(r$1, cells);
            }
            }(i$1,r$1));
        case 9 : 
            return Curry._1(enc[0][/* read */1], Json_repr.Ezjsonm);
        case 10 : 
            var t$2 = enc[2];
            var fto = enc[1];
            return (function(t$2,fto){
            return function (v) {
              return Curry._1(fto, Curry._1(destruct(t$2), v));
            }
            }(t$2,fto));
        case 11 : 
            _enc = enc[0][/* encoding */3];
            continue ;
        case 12 : 
            _enc = Curry._1(enc[0][/* self */3], enc);
            continue ;
        case 13 : 
            var cases = enc[0];
            return (function(cases){
            return function (v) {
              var _errs = /* [] */0;
              var _param = cases;
              while(true) {
                var param = _param;
                var errs = _errs;
                if (param) {
                  var match = param[0][0];
                  try {
                    return Curry._1(match[/* inj */2], Curry._1(destruct(match[/* encoding */0]), v));
                  }
                  catch (raw_err){
                    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                    _param = param[1];
                    _errs = /* :: */[
                      err,
                      errs
                    ];
                    continue ;
                  }
                } else {
                  throw [
                        Cannot_destruct,
                        /* tuple */[
                          /* [] */0,
                          [
                            No_case_matched,
                            List.rev(errs)
                          ]
                        ]
                      ];
                }
              };
            }
            }(cases));
        
      }
    }
  };
}

function destruct_tup(i, _t) {
  while(true) {
    var t = _t;
    if (typeof t === "number") {
      return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_tups");
    } else {
      switch (t.tag | 0) {
        case 7 : 
            var t$1 = t[0];
            return /* tuple */[
                    (function(t$1){
                    return function (arr) {
                      try {
                        return Curry._1(destruct(t$1), Caml_array.caml_array_get(arr, i));
                      }
                      catch (raw_exn){
                        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                        if (exn[0] === Cannot_destruct) {
                          var match = exn[1];
                          throw [
                                Cannot_destruct,
                                /* tuple */[
                                  /* :: */[
                                    /* `Index */[
                                      -784200974,
                                      i
                                    ],
                                    match[0]
                                  ],
                                  match[1]
                                ]
                              ];
                        } else {
                          throw exn;
                        }
                      }
                    }
                    }(t$1)),
                    i + 1 | 0
                  ];
        case 8 : 
            var match = destruct_tup(i, t[0]);
            var r1 = match[0];
            var match$1 = destruct_tup(match[1], t[1]);
            var r2 = match$1[0];
            return /* tuple */[
                    (function(r1,r2){
                    return function (arr) {
                      return /* tuple */[
                              Curry._1(r1, arr),
                              Curry._1(r2, arr)
                            ];
                    }
                    }(r1,r2)),
                    match$1[1]
                  ];
        case 10 : 
            var fto = t[1];
            var match$2 = destruct_tup(i, t[2]);
            var r = match$2[0];
            return /* tuple */[
                    (function(fto,r){
                    return function (arr) {
                      return Curry._1(fto, Curry._1(r, arr));
                    }
                    }(fto,r)),
                    match$2[1]
                  ];
        case 11 : 
            _t = t[0][/* encoding */3];
            continue ;
        case 12 : 
            _t = Curry._1(t[0][/* self */3], t);
            continue ;
        default:
          return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_tups");
      }
    }
  };
}

function destruct_obj(_t) {
  while(true) {
    var t = _t;
    var assoc = function (_acc, n, _param) {
      while(true) {
        var param = _param;
        var acc = _acc;
        if (param) {
          var rest = param[1];
          var oth = param[0];
          if (Caml_obj.caml_equal(n, oth[0])) {
            return /* tuple */[
                    oth[1],
                    Pervasives.$at(acc, rest)
                  ];
          } else {
            _param = rest;
            _acc = /* :: */[
              oth,
              acc
            ];
            continue ;
          }
        } else {
          throw Caml_builtin_exceptions.not_found;
        }
      };
    };
    if (typeof t === "number") {
      switch (t) {
        case 1 : 
            return (function (fields) {
                return /* tuple */[
                        /* () */0,
                        fields,
                        false
                      ];
              });
        case 2 : 
            return (function (fields) {
                return /* tuple */[
                        /* () */0,
                        fields,
                        true
                      ];
              });
        default:
          return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_objs");
      }
    } else {
      switch (t.tag | 0) {
        case 5 : 
            var match = t[0];
            switch (match.tag | 0) {
              case 0 : 
                  var match$1 = match[0];
                  var t$1 = match$1[/* encoding */1];
                  var n = match$1[/* name */0];
                  return (function(t$1,n){
                  return function (fields) {
                    try {
                      var match = assoc(/* [] */0, n, fields);
                      return /* tuple */[
                              Curry._1(destruct(t$1), match[0]),
                              match[1],
                              false
                            ];
                    }
                    catch (raw_exn){
                      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                      if (exn === Caml_builtin_exceptions.not_found) {
                        throw [
                              Cannot_destruct,
                              /* tuple */[
                                /* [] */0,
                                [
                                  Missing_field,
                                  n
                                ]
                              ]
                            ];
                      }
                      if (exn[0] === Cannot_destruct) {
                        var match$1 = exn[1];
                        throw [
                              Cannot_destruct,
                              /* tuple */[
                                /* :: */[
                                  /* `Field */[
                                    331416730,
                                    n
                                  ],
                                  match$1[0]
                                ],
                                match$1[1]
                              ]
                            ];
                      } else {
                        throw exn;
                      }
                    }
                  }
                  }(t$1,n));
              case 1 : 
                  var match$2 = match[0];
                  var t$2 = match$2[/* encoding */1];
                  var n$1 = match$2[/* name */0];
                  return (function(t$2,n$1){
                  return function (fields) {
                    try {
                      var match = assoc(/* [] */0, n$1, fields);
                      return /* tuple */[
                              Caml_option.some(Curry._1(destruct(t$2), match[0])),
                              match[1],
                              false
                            ];
                    }
                    catch (raw_exn){
                      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                      if (exn === Caml_builtin_exceptions.not_found) {
                        return /* tuple */[
                                undefined,
                                fields,
                                false
                              ];
                      } else if (exn[0] === Cannot_destruct) {
                        var match$1 = exn[1];
                        throw [
                              Cannot_destruct,
                              /* tuple */[
                                /* :: */[
                                  /* `Field */[
                                    331416730,
                                    n$1
                                  ],
                                  match$1[0]
                                ],
                                match$1[1]
                              ]
                            ];
                      } else {
                        throw exn;
                      }
                    }
                  }
                  }(t$2,n$1));
              case 2 : 
                  var match$3 = match[0];
                  var d = match$3[/* default */4];
                  var t$3 = match$3[/* encoding */1];
                  var n$2 = match$3[/* name */0];
                  return (function(d,t$3,n$2){
                  return function (fields) {
                    try {
                      var match = assoc(/* [] */0, n$2, fields);
                      return /* tuple */[
                              Curry._1(destruct(t$3), match[0]),
                              match[1],
                              false
                            ];
                    }
                    catch (raw_exn){
                      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                      if (exn === Caml_builtin_exceptions.not_found) {
                        return /* tuple */[
                                d,
                                fields,
                                false
                              ];
                      } else if (exn[0] === Cannot_destruct) {
                        var match$1 = exn[1];
                        throw [
                              Cannot_destruct,
                              /* tuple */[
                                /* :: */[
                                  /* `Field */[
                                    331416730,
                                    n$2
                                  ],
                                  match$1[0]
                                ],
                                match$1[1]
                              ]
                            ];
                      } else {
                        throw exn;
                      }
                    }
                  }
                  }(d,t$3,n$2));
              
            }
        case 6 : 
            var d1 = destruct_obj(t[0]);
            var d2 = destruct_obj(t[1]);
            return (function(d1,d2){
            return function (fields) {
              var match = Curry._1(d1, fields);
              var match$1 = Curry._1(d2, match[1]);
              return /* tuple */[
                      /* tuple */[
                        match[0],
                        match$1[0]
                      ],
                      match$1[1],
                      match[2] || match$1[2]
                    ];
            }
            }(d1,d2));
        case 10 : 
            var fto = t[1];
            var d$1 = destruct_obj(t[2]);
            return (function(fto,d$1){
            return function (fields) {
              var match = Curry._1(d$1, fields);
              return /* tuple */[
                      Curry._1(fto, match[0]),
                      match[1],
                      match[2]
                    ];
            }
            }(fto,d$1));
        case 11 : 
            _t = t[0][/* encoding */3];
            continue ;
        case 12 : 
            _t = Curry._1(t[0][/* self */3], t);
            continue ;
        case 13 : 
            var cases = t[0];
            return (function(cases){
            return function (fields) {
              var _errs = /* [] */0;
              var _param = cases;
              while(true) {
                var param = _param;
                var errs = _errs;
                if (param) {
                  var match = param[0][0];
                  try {
                    var match$1 = Curry._1(destruct_obj(match[/* encoding */0]), fields);
                    return /* tuple */[
                            Curry._1(match[/* inj */2], match$1[0]),
                            match$1[1],
                            match$1[2]
                          ];
                  }
                  catch (raw_err){
                    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                    _param = param[1];
                    _errs = /* :: */[
                      err,
                      errs
                    ];
                    continue ;
                  }
                } else {
                  throw [
                        Cannot_destruct,
                        /* tuple */[
                          /* [] */0,
                          [
                            No_case_matched,
                            List.rev(errs)
                          ]
                        ]
                      ];
                }
              };
            }
            }(cases));
        default:
          return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_objs");
      }
    }
  };
}

function custom(write, read, schema) {
  var read$1 = function (Repr_f, repr) {
    return Curry._1(read, Json_repr.convert(Repr_f, Json_repr.Ezjsonm, repr));
  };
  var write$1 = function (Repr_f, v) {
    return Json_repr.convert(Json_repr.Ezjsonm, Repr_f, Curry._1(write, v));
  };
  return /* Custom */Block.__(9, [
            /* record */[
              /* write */write$1,
              /* read */read$1
            ],
            schema
          ]);
}

function patch_description(title, description, elt) {
  if (title !== undefined) {
    if (description !== undefined) {
      return /* record */[
              /* title */title,
              /* description */description,
              /* default */elt[/* default */2],
              /* enum */elt[/* enum */3],
              /* kind */elt[/* kind */4],
              /* format */elt[/* format */5],
              /* id */elt[/* id */6]
            ];
    } else {
      return /* record */[
              /* title */title,
              /* description */elt[/* description */1],
              /* default */elt[/* default */2],
              /* enum */elt[/* enum */3],
              /* kind */elt[/* kind */4],
              /* format */elt[/* format */5],
              /* id */elt[/* id */6]
            ];
    }
  } else if (description !== undefined) {
    return /* record */[
            /* title */elt[/* title */0],
            /* description */description,
            /* default */elt[/* default */2],
            /* enum */elt[/* enum */3],
            /* kind */elt[/* kind */4],
            /* format */elt[/* format */5],
            /* id */elt[/* id */6]
          ];
  } else {
    return elt;
  }
}

function schema(definitions_path, encoding) {
  var sch = /* record */[/* contents */Json_schema.any];
  var prod = function (l1, l2) {
    if (l1) {
      var match = l1[0];
      var b1 = match[1];
      var l1$1 = match[0];
      return Pervasives.$at(List.map((function (param) {
                        return /* tuple */[
                                Pervasives.$at(l1$1, param[0]),
                                b1 || param[1]
                              ];
                      }), l2), prod(l1[1], l2));
    } else {
      return /* [] */0;
    }
  };
  var object_schema = function (_enc) {
    while(true) {
      var enc = _enc;
      if (typeof enc === "number") {
        switch (enc) {
          case 1 : 
              return /* :: */[
                      /* tuple */[
                        /* [] */0,
                        false
                      ],
                      /* [] */0
                    ];
          case 2 : 
              return /* :: */[
                      /* tuple */[
                        /* [] */0,
                        true
                      ],
                      /* [] */0
                    ];
          default:
            return Pervasives.invalid_arg("Json_encoding.schema: consequence of bad merge_objs");
        }
      } else {
        switch (enc.tag | 0) {
          case 5 : 
              var match = enc[0];
              switch (match.tag | 0) {
                case 0 : 
                    var match$1 = match[0];
                    return /* :: */[
                            /* tuple */[
                              /* :: */[
                                /* tuple */[
                                  match$1[/* name */0],
                                  patch_description(match$1[/* title */2], match$1[/* description */3], schema$1(match$1[/* encoding */1])),
                                  true,
                                  undefined
                                ],
                                /* [] */0
                              ],
                              false
                            ],
                            /* [] */0
                          ];
                case 1 : 
                    var match$2 = match[0];
                    return /* :: */[
                            /* tuple */[
                              /* :: */[
                                /* tuple */[
                                  match$2[/* name */0],
                                  patch_description(match$2[/* title */2], match$2[/* description */3], schema$1(match$2[/* encoding */1])),
                                  false,
                                  undefined
                                ],
                                /* [] */0
                              ],
                              false
                            ],
                            /* [] */0
                          ];
                case 2 : 
                    var match$3 = match[0];
                    var t = match$3[/* encoding */1];
                    var d = Json_repr.repr_to_any(Json_repr.Ezjsonm, construct(t, match$3[/* default */4]));
                    return /* :: */[
                            /* tuple */[
                              /* :: */[
                                /* tuple */[
                                  match$3[/* name */0],
                                  patch_description(match$3[/* title */2], match$3[/* description */3], schema$1(t)),
                                  false,
                                  d
                                ],
                                /* [] */0
                              ],
                              false
                            ],
                            /* [] */0
                          ];
                
              }
          case 6 : 
              return prod(object_schema(enc[0]), object_schema(enc[1]));
          case 10 : 
              if (enc[3] !== undefined) {
                return Pervasives.invalid_arg("Json_encoding.schema: consequence of bad merge_objs");
              } else {
                _enc = enc[2];
                continue ;
              }
          case 11 : 
              _enc = enc[0][/* encoding */3];
              continue ;
          case 12 : 
              _enc = Curry._1(enc[0][/* self */3], enc);
              continue ;
          case 13 : 
              var cases = enc[0];
              if (cases) {
                return List.flatten(List.map((function (param) {
                                  return object_schema(param[0][/* encoding */0]);
                                }), cases));
              } else {
                return Pervasives.invalid_arg("Json_encoding.schema: empty union in object");
              }
          default:
            return Pervasives.invalid_arg("Json_encoding.schema: consequence of bad merge_objs");
        }
      }
    };
  };
  var array_schema = function (_enc) {
    while(true) {
      var enc = _enc;
      if (typeof enc === "number") {
        return Pervasives.invalid_arg("Json_encoding.schema: consequence of bad merge_tups");
      } else {
        switch (enc.tag | 0) {
          case 7 : 
              return /* :: */[
                      schema$1(enc[0]),
                      /* [] */0
                    ];
          case 8 : 
              return Pervasives.$at(array_schema(enc[0]), array_schema(enc[1]));
          case 10 : 
              if (enc[3] !== undefined) {
                return Pervasives.invalid_arg("Json_encoding.schema: consequence of bad merge_tups");
              } else {
                _enc = enc[2];
                continue ;
              }
          case 11 : 
              _enc = enc[0][/* encoding */3];
              continue ;
          case 12 : 
              _enc = Curry._1(enc[0][/* self */3], enc);
              continue ;
          default:
            return Pervasives.invalid_arg("Json_encoding.schema: consequence of bad merge_tups");
        }
      }
    };
  };
  var schema$1 = function (_o) {
    while(true) {
      var o = _o;
      if (typeof o === "number") {
        switch (o) {
          case 0 : 
              return Json_schema.element(/* Null */1);
          case 1 : 
              return Json_schema.element(/* Object */Block.__(0, [/* record */[
                              /* properties */Json_schema.object_specs[/* properties */0],
                              /* pattern_properties */Json_schema.object_specs[/* pattern_properties */1],
                              /* additional_properties */undefined,
                              /* min_properties */Json_schema.object_specs[/* min_properties */3],
                              /* max_properties */Json_schema.object_specs[/* max_properties */4],
                              /* schema_dependencies */Json_schema.object_specs[/* schema_dependencies */5],
                              /* property_dependencies */Json_schema.object_specs[/* property_dependencies */6]
                            ]]));
          case 2 : 
              return Json_schema.element(/* Any */2);
          case 3 : 
              return Json_schema.element(/* Boolean */0);
          case 4 : 
              return Json_schema.element(/* String */Block.__(7, [Json_schema.string_specs]));
          
        }
      } else {
        switch (o.tag | 0) {
          case 0 : 
              return Json_schema.element(/* Combine */Block.__(3, [
                            /* One_of */1,
                            /* :: */[
                              schema$1(o[0]),
                              /* :: */[
                                Json_schema.element(/* Null */1),
                                /* [] */0
                              ]
                            ]
                          ]));
          case 1 : 
              var init = Json_schema.element(/* String */Block.__(7, [Json_schema.string_specs]));
              return /* record */[
                      /* title */init[/* title */0],
                      /* description */init[/* description */1],
                      /* default */init[/* default */2],
                      /* enum *//* :: */[
                        Json_repr.to_any(/* `String */[
                              -976970511,
                              o[0]
                            ]),
                        /* [] */0
                      ],
                      /* kind */init[/* kind */4],
                      /* format */init[/* format */5],
                      /* id */init[/* id */6]
                    ];
          case 2 : 
              var match = o[0];
              var to_float = match[/* to_float */2];
              var minimum = /* tuple */[
                Curry._1(to_float, match[/* lower_bound */3]),
                /* Inclusive */672226188
              ];
              var maximum = /* tuple */[
                Curry._1(to_float, match[/* upper_bound */4]),
                /* Inclusive */672226188
              ];
              return Json_schema.element(/* Integer */Block.__(8, [/* record */[
                              /* multiple_of */undefined,
                              /* minimum */minimum,
                              /* maximum */maximum
                            ]]));
          case 3 : 
              var match$1 = o[0];
              if (match$1 !== undefined) {
                var match$2 = match$1;
                return Json_schema.element(/* Number */Block.__(9, [/* record */[
                                /* multiple_of */undefined,
                                /* minimum *//* tuple */[
                                  match$2[/* minimum */1],
                                  /* Inclusive */672226188
                                ],
                                /* maximum *//* tuple */[
                                  match$2[/* maximum */2],
                                  /* Inclusive */672226188
                                ]
                              ]]));
              } else {
                return Json_schema.element(/* Number */Block.__(9, [Json_schema.numeric_specs]));
              }
          case 4 : 
              return Json_schema.element(/* Monomorphic_array */Block.__(2, [
                            schema$1(o[0]),
                            Json_schema.array_specs
                          ]));
          case 5 : 
              var more = object_schema(o);
              var exit = 0;
              if (more && !more[1]) {
                var match$3 = more[0];
                var additional_properties = match$3[1] ? Json_schema.element(/* Any */2) : undefined;
                return Json_schema.element(/* Object */Block.__(0, [/* record */[
                                /* properties */match$3[0],
                                /* pattern_properties */Json_schema.object_specs[/* pattern_properties */1],
                                /* additional_properties */additional_properties,
                                /* min_properties */Json_schema.object_specs[/* min_properties */3],
                                /* max_properties */Json_schema.object_specs[/* max_properties */4],
                                /* schema_dependencies */Json_schema.object_specs[/* schema_dependencies */5],
                                /* property_dependencies */Json_schema.object_specs[/* property_dependencies */6]
                              ]]));
              } else {
                exit = 1;
              }
              if (exit === 1) {
                var elements = List.map((function (param) {
                        var additional_properties = param[1] ? Json_schema.element(/* Any */2) : undefined;
                        return Json_schema.element(/* Object */Block.__(0, [/* record */[
                                        /* properties */param[0],
                                        /* pattern_properties */Json_schema.object_specs[/* pattern_properties */1],
                                        /* additional_properties */additional_properties,
                                        /* min_properties */Json_schema.object_specs[/* min_properties */3],
                                        /* max_properties */Json_schema.object_specs[/* max_properties */4],
                                        /* schema_dependencies */Json_schema.object_specs[/* schema_dependencies */5],
                                        /* property_dependencies */Json_schema.object_specs[/* property_dependencies */6]
                                      ]]));
                      }), more);
                return Json_schema.element(/* Combine */Block.__(3, [
                              /* One_of */1,
                              elements
                            ]));
              }
              break;
          case 6 : 
              var more$1 = object_schema(o);
              var exit$1 = 0;
              if (more$1 && !more$1[1]) {
                var match$4 = more$1[0];
                var additional_properties$1 = match$4[1] ? Json_schema.element(/* Any */2) : undefined;
                return Json_schema.element(/* Object */Block.__(0, [/* record */[
                                /* properties */match$4[0],
                                /* pattern_properties */Json_schema.object_specs[/* pattern_properties */1],
                                /* additional_properties */additional_properties$1,
                                /* min_properties */Json_schema.object_specs[/* min_properties */3],
                                /* max_properties */Json_schema.object_specs[/* max_properties */4],
                                /* schema_dependencies */Json_schema.object_specs[/* schema_dependencies */5],
                                /* property_dependencies */Json_schema.object_specs[/* property_dependencies */6]
                              ]]));
              } else {
                exit$1 = 1;
              }
              if (exit$1 === 1) {
                var elements$1 = List.map((function (param) {
                        var additional_properties = param[1] ? Json_schema.element(/* Any */2) : undefined;
                        return Json_schema.element(/* Object */Block.__(0, [/* record */[
                                        /* properties */param[0],
                                        /* pattern_properties */Json_schema.object_specs[/* pattern_properties */1],
                                        /* additional_properties */additional_properties,
                                        /* min_properties */Json_schema.object_specs[/* min_properties */3],
                                        /* max_properties */Json_schema.object_specs[/* max_properties */4],
                                        /* schema_dependencies */Json_schema.object_specs[/* schema_dependencies */5],
                                        /* property_dependencies */Json_schema.object_specs[/* property_dependencies */6]
                                      ]]));
                      }), more$1);
                return Json_schema.element(/* Combine */Block.__(3, [
                              /* One_of */1,
                              elements$1
                            ]));
              }
              break;
          case 7 : 
          case 8 : 
              return Json_schema.element(/* Array */Block.__(1, [
                            array_schema(o),
                            Json_schema.array_specs
                          ]));
          case 9 : 
              var s = o[1];
              sch[0] = Json_schema.merge_definitions(/* tuple */[
                      sch[0],
                      s
                    ])[0];
              return Json_schema.root(s);
          case 10 : 
              var match$5 = o[3];
              if (match$5 !== undefined) {
                var s$1 = Caml_option.valFromOption(match$5);
                sch[0] = Json_schema.merge_definitions(/* tuple */[
                        sch[0],
                        s$1
                      ])[0];
                return Json_schema.root(s$1);
              } else {
                _o = o[2];
                continue ;
              }
          case 11 : 
              var match$6 = o[0];
              var schema$2 = patch_description(match$6[/* title */1], match$6[/* description */2], schema$1(match$6[/* encoding */3]));
              var match$7 = Json_schema.add_definition(definitions_path, match$6[/* id */0], schema$2, sch[0]);
              sch[0] = Json_schema.merge_definitions(/* tuple */[
                      sch[0],
                      match$7[0]
                    ])[0];
              return match$7[1];
          case 12 : 
              var match$8 = o[0];
              var name = match$8[/* id */0];
              var fake_schema;
              if (Json_schema.definition_exists(definitions_path, name, sch[0])) {
                fake_schema = Json_schema.update(Json_schema.definition_ref(definitions_path, name), sch[0]);
              } else {
                var match$9 = Json_schema.add_definition(definitions_path, name, Json_schema.element(/* Dummy */3), sch[0]);
                fake_schema = Json_schema.update(match$9[1], match$9[0]);
              }
              var fake_self_000 = /* record */[
                /* write */(function (param, param$1) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "json_encoding.ml",
                            504,
                            40
                          ]
                        ];
                  }),
                /* read */(function (param) {
                    throw [
                          Caml_builtin_exceptions.assert_failure,
                          /* tuple */[
                            "json_encoding.ml",
                            505,
                            37
                          ]
                        ];
                  })
              ];
              var fake_self = /* Custom */Block.__(9, [
                  fake_self_000,
                  fake_schema
                ]);
              var root = patch_description(match$8[/* title */1], match$8[/* description */2], schema$1(Curry._1(match$8[/* self */3], fake_self)));
              var match$10 = Json_schema.add_definition(definitions_path, name, root, sch[0]);
              sch[0] = match$10[0];
              return match$10[1];
          case 13 : 
              var elements$2 = List.map((function (param) {
                      return schema$1(param[0][/* encoding */0]);
                    }), o[0]);
              return Json_schema.element(/* Combine */Block.__(3, [
                            /* One_of */1,
                            elements$2
                          ]));
          
        }
      }
    };
  };
  var schema$2 = schema$1(encoding);
  return Json_schema.update(schema$2, sch[0]);
}

function req(title, description, n, t) {
  return /* Req */Block.__(0, [/* record */[
              /* name */n,
              /* encoding */t,
              /* title */title,
              /* description */description
            ]]);
}

function opt(title, description, n, t) {
  return /* Opt */Block.__(1, [/* record */[
              /* name */n,
              /* encoding */t,
              /* title */title,
              /* description */description
            ]]);
}

function dft(title, description, n, t, d) {
  return /* Dft */Block.__(2, [/* record */[
              /* name */n,
              /* encoding */t,
              /* title */title,
              /* description */description,
              /* default */d
            ]]);
}

function mu(name, title, description, self) {
  return /* Mu */Block.__(12, [/* record */[
              /* id */name,
              /* title */title,
              /* description */description,
              /* self */self
            ]]);
}

var $$int = /* Int */Block.__(2, [/* record */[
      /* int_name */"int",
      /* of_float */(function (prim) {
          return prim | 0;
        }),
      /* to_float */(function (prim) {
          return prim;
        }),
      /* lower_bound */-1073741824,
      /* upper_bound */1073741823
    ]]);

function ranged_int(lower_bound, upper_bound, name) {
  if (Sys.word_size === 64 && (lower_bound < -1073741824 || upper_bound > 1073741823)) {
    Pervasives.invalid_arg("Json_encoding.ranged_int: bounds out of portable int31 range");
  }
  return /* Int */Block.__(2, [/* record */[
              /* int_name */name,
              /* of_float */(function (prim) {
                  return prim | 0;
                }),
              /* to_float */(function (prim) {
                  return prim;
                }),
              /* lower_bound */lower_bound,
              /* upper_bound */upper_bound
            ]]);
}

var int53 = /* Int */Block.__(2, [/* record */[
      /* int_name */"int53",
      /* of_float */Caml_int64.of_float,
      /* to_float */Caml_int64.to_float,
      /* lower_bound : int64 */[
        /* hi */-2097152,
        /* lo */0
      ],
      /* upper_bound : int64 */[
        /* hi */2097152,
        /* lo */0
      ]
    ]]);

function ranged_int53(lower_bound, upper_bound, name) {
  if (Caml_int64.lt(lower_bound, /* int64 */[
          /* hi */-2097152,
          /* lo */0
        ]) || Caml_int64.gt(upper_bound, /* int64 */[
          /* hi */2097152,
          /* lo */0
        ])) {
    Pervasives.invalid_arg("Json_encoding.ranged_int53: bounds out of JSON-representable integers");
  }
  return /* Int */Block.__(2, [/* record */[
              /* int_name */name,
              /* of_float */Caml_int64.of_float,
              /* to_float */Caml_int64.to_float,
              /* lower_bound */lower_bound,
              /* upper_bound */upper_bound
            ]]);
}

var int32 = /* Int */Block.__(2, [/* record */[
      /* int_name */"int32",
      /* of_float */(function (prim) {
          return prim | 0;
        }),
      /* to_float */(function (prim) {
          return prim;
        }),
      /* lower_bound */Int32.min_int,
      /* upper_bound */Int32.max_int
    ]]);

function ranged_int32(lower_bound, upper_bound, name) {
  return /* Int */Block.__(2, [/* record */[
              /* int_name */name,
              /* of_float */(function (prim) {
                  return prim | 0;
                }),
              /* to_float */(function (prim) {
                  return prim;
                }),
              /* lower_bound */lower_bound,
              /* upper_bound */upper_bound
            ]]);
}

function ranged_float(minimum, maximum, float_name) {
  return /* Float */Block.__(3, [/* record */[
              /* float_name */float_name,
              /* minimum */minimum,
              /* maximum */maximum
            ]]);
}

function conv(ffrom, fto, schema, t) {
  return /* Conv */Block.__(10, [
            ffrom,
            fto,
            t,
            schema
          ]);
}

var bytes = /* Conv */Block.__(10, [
    Bytes.to_string,
    Bytes.of_string,
    /* String */4,
    undefined
  ]);

function array(t) {
  return /* Array */Block.__(4, [t]);
}

function obj1(f1) {
  return /* Obj */Block.__(5, [f1]);
}

function obj2(f1, f2) {
  return /* Objs */Block.__(6, [
            /* Obj */Block.__(5, [f1]),
            /* Obj */Block.__(5, [f2])
          ]);
}

function obj3(f1, f2, f3) {
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          param[2]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match[1]
                      ];
              }), undefined, /* Objs */Block.__(6, [
                /* Obj */Block.__(5, [f1]),
                /* Objs */Block.__(6, [
                    /* Obj */Block.__(5, [f2]),
                    /* Obj */Block.__(5, [f3])
                  ])
              ]));
}

function obj4(f1, f2, f3, f4) {
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          /* tuple */[
                            param[2],
                            param[3]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match$1[0],
                        match$1[1]
                      ];
              }), undefined, /* Objs */Block.__(6, [
                /* Obj */Block.__(5, [f1]),
                /* Objs */Block.__(6, [
                    /* Obj */Block.__(5, [f2]),
                    /* Objs */Block.__(6, [
                        /* Obj */Block.__(5, [f3]),
                        /* Obj */Block.__(5, [f4])
                      ])
                  ])
              ]));
}

function obj5(f1, f2, f3, f4, f5) {
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          /* tuple */[
                            param[2],
                            /* tuple */[
                              param[3],
                              param[4]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$2[1]
                      ];
              }), undefined, /* Objs */Block.__(6, [
                /* Obj */Block.__(5, [f1]),
                /* Objs */Block.__(6, [
                    /* Obj */Block.__(5, [f2]),
                    /* Objs */Block.__(6, [
                        /* Obj */Block.__(5, [f3]),
                        /* Objs */Block.__(6, [
                            /* Obj */Block.__(5, [f4]),
                            /* Obj */Block.__(5, [f5])
                          ])
                      ])
                  ])
              ]));
}

function obj6(f1, f2, f3, f4, f5, f6) {
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          /* tuple */[
                            param[2],
                            /* tuple */[
                              param[3],
                              /* tuple */[
                                param[4],
                                param[5]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$3[1]
                      ];
              }), undefined, /* Objs */Block.__(6, [
                /* Obj */Block.__(5, [f1]),
                /* Objs */Block.__(6, [
                    /* Obj */Block.__(5, [f2]),
                    /* Objs */Block.__(6, [
                        /* Obj */Block.__(5, [f3]),
                        /* Objs */Block.__(6, [
                            /* Obj */Block.__(5, [f4]),
                            /* Objs */Block.__(6, [
                                /* Obj */Block.__(5, [f5]),
                                /* Obj */Block.__(5, [f6])
                              ])
                          ])
                      ])
                  ])
              ]));
}

function obj7(f1, f2, f3, f4, f5, f6, f7) {
  var rest_000 = /* Obj */Block.__(5, [f6]);
  var rest_001 = /* Obj */Block.__(5, [f7]);
  var rest = /* Objs */Block.__(6, [
      rest_000,
      rest_001
    ]);
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          /* tuple */[
                            param[2],
                            /* tuple */[
                              param[3],
                              /* tuple */[
                                param[4],
                                /* tuple */[
                                  param[5],
                                  param[6]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$4[1]
                      ];
              }), undefined, /* Objs */Block.__(6, [
                /* Obj */Block.__(5, [f1]),
                /* Objs */Block.__(6, [
                    /* Obj */Block.__(5, [f2]),
                    /* Objs */Block.__(6, [
                        /* Obj */Block.__(5, [f3]),
                        /* Objs */Block.__(6, [
                            /* Obj */Block.__(5, [f4]),
                            /* Objs */Block.__(6, [
                                /* Obj */Block.__(5, [f5]),
                                rest
                              ])
                          ])
                      ])
                  ])
              ]));
}

function obj8(f1, f2, f3, f4, f5, f6, f7, f8) {
  var rest_000 = /* Obj */Block.__(5, [f6]);
  var rest_001 = /* Objs */Block.__(6, [
      /* Obj */Block.__(5, [f7]),
      /* Obj */Block.__(5, [f8])
    ]);
  var rest = /* Objs */Block.__(6, [
      rest_000,
      rest_001
    ]);
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          /* tuple */[
                            param[2],
                            /* tuple */[
                              param[3],
                              /* tuple */[
                                param[4],
                                /* tuple */[
                                  param[5],
                                  /* tuple */[
                                    param[6],
                                    param[7]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                var match$5 = match$4[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$5[0],
                        match$5[1]
                      ];
              }), undefined, /* Objs */Block.__(6, [
                /* Obj */Block.__(5, [f1]),
                /* Objs */Block.__(6, [
                    /* Obj */Block.__(5, [f2]),
                    /* Objs */Block.__(6, [
                        /* Obj */Block.__(5, [f3]),
                        /* Objs */Block.__(6, [
                            /* Obj */Block.__(5, [f4]),
                            /* Objs */Block.__(6, [
                                /* Obj */Block.__(5, [f5]),
                                rest
                              ])
                          ])
                      ])
                  ])
              ]));
}

function obj9(f1, f2, f3, f4, f5, f6, f7, f8, f9) {
  var rest_000 = /* Obj */Block.__(5, [f6]);
  var rest_001 = /* Objs */Block.__(6, [
      /* Obj */Block.__(5, [f7]),
      /* Objs */Block.__(6, [
          /* Obj */Block.__(5, [f8]),
          /* Obj */Block.__(5, [f9])
        ])
    ]);
  var rest = /* Objs */Block.__(6, [
      rest_000,
      rest_001
    ]);
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          /* tuple */[
                            param[2],
                            /* tuple */[
                              param[3],
                              /* tuple */[
                                param[4],
                                /* tuple */[
                                  param[5],
                                  /* tuple */[
                                    param[6],
                                    /* tuple */[
                                      param[7],
                                      param[8]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                var match$5 = match$4[1];
                var match$6 = match$5[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$5[0],
                        match$6[0],
                        match$6[1]
                      ];
              }), undefined, /* Objs */Block.__(6, [
                /* Obj */Block.__(5, [f1]),
                /* Objs */Block.__(6, [
                    /* Obj */Block.__(5, [f2]),
                    /* Objs */Block.__(6, [
                        /* Obj */Block.__(5, [f3]),
                        /* Objs */Block.__(6, [
                            /* Obj */Block.__(5, [f4]),
                            /* Objs */Block.__(6, [
                                /* Obj */Block.__(5, [f5]),
                                rest
                              ])
                          ])
                      ])
                  ])
              ]));
}

function obj10(f1, f2, f3, f4, f5, f6, f7, f8, f9, f10) {
  var rest_000 = /* Obj */Block.__(5, [f6]);
  var rest_001 = /* Objs */Block.__(6, [
      /* Obj */Block.__(5, [f7]),
      /* Objs */Block.__(6, [
          /* Obj */Block.__(5, [f8]),
          /* Objs */Block.__(6, [
              /* Obj */Block.__(5, [f9]),
              /* Obj */Block.__(5, [f10])
            ])
        ])
    ]);
  var rest = /* Objs */Block.__(6, [
      rest_000,
      rest_001
    ]);
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          /* tuple */[
                            param[2],
                            /* tuple */[
                              param[3],
                              /* tuple */[
                                param[4],
                                /* tuple */[
                                  param[5],
                                  /* tuple */[
                                    param[6],
                                    /* tuple */[
                                      param[7],
                                      /* tuple */[
                                        param[8],
                                        param[9]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                var match$5 = match$4[1];
                var match$6 = match$5[1];
                var match$7 = match$6[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$5[0],
                        match$6[0],
                        match$7[0],
                        match$7[1]
                      ];
              }), undefined, /* Objs */Block.__(6, [
                /* Obj */Block.__(5, [f1]),
                /* Objs */Block.__(6, [
                    /* Obj */Block.__(5, [f2]),
                    /* Objs */Block.__(6, [
                        /* Obj */Block.__(5, [f3]),
                        /* Objs */Block.__(6, [
                            /* Obj */Block.__(5, [f4]),
                            /* Objs */Block.__(6, [
                                /* Obj */Block.__(5, [f5]),
                                rest
                              ])
                          ])
                      ])
                  ])
              ]));
}

function tup1(f1) {
  return /* Tup */Block.__(7, [f1]);
}

function tup2(f1, f2) {
  return /* Tups */Block.__(8, [
            /* Tup */Block.__(7, [f1]),
            /* Tup */Block.__(7, [f2])
          ]);
}

function tup3(f1, f2, f3) {
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          param[2]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match[1]
                      ];
              }), undefined, /* Tups */Block.__(8, [
                /* Tup */Block.__(7, [f1]),
                /* Tups */Block.__(8, [
                    /* Tup */Block.__(7, [f2]),
                    /* Tup */Block.__(7, [f3])
                  ])
              ]));
}

function tup4(f1, f2, f3, f4) {
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          /* tuple */[
                            param[2],
                            param[3]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match$1[0],
                        match$1[1]
                      ];
              }), undefined, /* Tups */Block.__(8, [
                /* Tup */Block.__(7, [f1]),
                /* Tups */Block.__(8, [
                    /* Tup */Block.__(7, [f2]),
                    /* Tups */Block.__(8, [
                        /* Tup */Block.__(7, [f3]),
                        /* Tup */Block.__(7, [f4])
                      ])
                  ])
              ]));
}

function tup5(f1, f2, f3, f4, f5) {
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          /* tuple */[
                            param[2],
                            /* tuple */[
                              param[3],
                              param[4]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$2[1]
                      ];
              }), undefined, /* Tups */Block.__(8, [
                /* Tup */Block.__(7, [f1]),
                /* Tups */Block.__(8, [
                    /* Tup */Block.__(7, [f2]),
                    /* Tups */Block.__(8, [
                        /* Tup */Block.__(7, [f3]),
                        /* Tups */Block.__(8, [
                            /* Tup */Block.__(7, [f4]),
                            /* Tup */Block.__(7, [f5])
                          ])
                      ])
                  ])
              ]));
}

function tup6(f1, f2, f3, f4, f5, f6) {
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          /* tuple */[
                            param[2],
                            /* tuple */[
                              param[3],
                              /* tuple */[
                                param[4],
                                param[5]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$3[1]
                      ];
              }), undefined, /* Tups */Block.__(8, [
                /* Tup */Block.__(7, [f1]),
                /* Tups */Block.__(8, [
                    /* Tup */Block.__(7, [f2]),
                    /* Tups */Block.__(8, [
                        /* Tup */Block.__(7, [f3]),
                        /* Tups */Block.__(8, [
                            /* Tup */Block.__(7, [f4]),
                            /* Tups */Block.__(8, [
                                /* Tup */Block.__(7, [f5]),
                                /* Tup */Block.__(7, [f6])
                              ])
                          ])
                      ])
                  ])
              ]));
}

function tup7(f1, f2, f3, f4, f5, f6, f7) {
  var rest_000 = /* Tup */Block.__(7, [f6]);
  var rest_001 = /* Tup */Block.__(7, [f7]);
  var rest = /* Tups */Block.__(8, [
      rest_000,
      rest_001
    ]);
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          /* tuple */[
                            param[2],
                            /* tuple */[
                              param[3],
                              /* tuple */[
                                param[4],
                                /* tuple */[
                                  param[5],
                                  param[6]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$4[1]
                      ];
              }), undefined, /* Tups */Block.__(8, [
                /* Tup */Block.__(7, [f1]),
                /* Tups */Block.__(8, [
                    /* Tup */Block.__(7, [f2]),
                    /* Tups */Block.__(8, [
                        /* Tup */Block.__(7, [f3]),
                        /* Tups */Block.__(8, [
                            /* Tup */Block.__(7, [f4]),
                            /* Tups */Block.__(8, [
                                /* Tup */Block.__(7, [f5]),
                                rest
                              ])
                          ])
                      ])
                  ])
              ]));
}

function tup8(f1, f2, f3, f4, f5, f6, f7, f8) {
  var rest_000 = /* Tup */Block.__(7, [f6]);
  var rest_001 = /* Tups */Block.__(8, [
      /* Tup */Block.__(7, [f7]),
      /* Tup */Block.__(7, [f8])
    ]);
  var rest = /* Tups */Block.__(8, [
      rest_000,
      rest_001
    ]);
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          /* tuple */[
                            param[2],
                            /* tuple */[
                              param[3],
                              /* tuple */[
                                param[4],
                                /* tuple */[
                                  param[5],
                                  /* tuple */[
                                    param[6],
                                    param[7]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                var match$5 = match$4[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$5[0],
                        match$5[1]
                      ];
              }), undefined, /* Tups */Block.__(8, [
                /* Tup */Block.__(7, [f1]),
                /* Tups */Block.__(8, [
                    /* Tup */Block.__(7, [f2]),
                    /* Tups */Block.__(8, [
                        /* Tup */Block.__(7, [f3]),
                        /* Tups */Block.__(8, [
                            /* Tup */Block.__(7, [f4]),
                            /* Tups */Block.__(8, [
                                /* Tup */Block.__(7, [f5]),
                                rest
                              ])
                          ])
                      ])
                  ])
              ]));
}

function tup9(f1, f2, f3, f4, f5, f6, f7, f8, f9) {
  var rest_000 = /* Tup */Block.__(7, [f6]);
  var rest_001 = /* Tups */Block.__(8, [
      /* Tup */Block.__(7, [f7]),
      /* Tups */Block.__(8, [
          /* Tup */Block.__(7, [f8]),
          /* Tup */Block.__(7, [f9])
        ])
    ]);
  var rest = /* Tups */Block.__(8, [
      rest_000,
      rest_001
    ]);
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          /* tuple */[
                            param[2],
                            /* tuple */[
                              param[3],
                              /* tuple */[
                                param[4],
                                /* tuple */[
                                  param[5],
                                  /* tuple */[
                                    param[6],
                                    /* tuple */[
                                      param[7],
                                      param[8]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                var match$5 = match$4[1];
                var match$6 = match$5[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$5[0],
                        match$6[0],
                        match$6[1]
                      ];
              }), undefined, /* Tups */Block.__(8, [
                /* Tup */Block.__(7, [f1]),
                /* Tups */Block.__(8, [
                    /* Tup */Block.__(7, [f2]),
                    /* Tups */Block.__(8, [
                        /* Tup */Block.__(7, [f3]),
                        /* Tups */Block.__(8, [
                            /* Tup */Block.__(7, [f4]),
                            /* Tups */Block.__(8, [
                                /* Tup */Block.__(7, [f5]),
                                rest
                              ])
                          ])
                      ])
                  ])
              ]));
}

function tup10(f1, f2, f3, f4, f5, f6, f7, f8, f9, f10) {
  var rest_000 = /* Tup */Block.__(7, [f6]);
  var rest_001 = /* Tups */Block.__(8, [
      /* Tup */Block.__(7, [f7]),
      /* Tups */Block.__(8, [
          /* Tup */Block.__(7, [f8]),
          /* Tups */Block.__(8, [
              /* Tup */Block.__(7, [f9]),
              /* Tup */Block.__(7, [f10])
            ])
        ])
    ]);
  var rest = /* Tups */Block.__(8, [
      rest_000,
      rest_001
    ]);
  return conv((function (param) {
                return /* tuple */[
                        param[0],
                        /* tuple */[
                          param[1],
                          /* tuple */[
                            param[2],
                            /* tuple */[
                              param[3],
                              /* tuple */[
                                param[4],
                                /* tuple */[
                                  param[5],
                                  /* tuple */[
                                    param[6],
                                    /* tuple */[
                                      param[7],
                                      /* tuple */[
                                        param[8],
                                        param[9]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ];
              }), (function (param) {
                var match = param[1];
                var match$1 = match[1];
                var match$2 = match$1[1];
                var match$3 = match$2[1];
                var match$4 = match$3[1];
                var match$5 = match$4[1];
                var match$6 = match$5[1];
                var match$7 = match$6[1];
                return /* tuple */[
                        param[0],
                        match[0],
                        match$1[0],
                        match$2[0],
                        match$3[0],
                        match$4[0],
                        match$5[0],
                        match$6[0],
                        match$7[0],
                        match$7[1]
                      ];
              }), undefined, /* Tups */Block.__(8, [
                /* Tup */Block.__(7, [f1]),
                /* Tups */Block.__(8, [
                    /* Tup */Block.__(7, [f2]),
                    /* Tups */Block.__(8, [
                        /* Tup */Block.__(7, [f3]),
                        /* Tups */Block.__(8, [
                            /* Tup */Block.__(7, [f4]),
                            /* Tups */Block.__(8, [
                                /* Tup */Block.__(7, [f5]),
                                rest
                              ])
                          ])
                      ])
                  ])
              ]));
}

function repr_agnostic_custom(param, schema) {
  return /* Custom */Block.__(9, [
            /* record */[
              /* write */param[/* write */0],
              /* read */param[/* read */1]
            ],
            schema
          ]);
}

function constant(s) {
  return /* Constant */Block.__(1, [s]);
}

function def(id, title, description, encoding) {
  return /* Describe */Block.__(11, [/* record */[
              /* id */id,
              /* title */title,
              /* description */description,
              /* encoding */encoding
            ]]);
}

function is_nullable(_enc) {
  while(true) {
    var enc = _enc;
    if (typeof enc === "number") {
      switch (enc) {
        case 0 : 
        case 2 : 
            return true;
        default:
          return false;
      }
    } else {
      switch (enc.tag | 0) {
        case 0 : 
            return true;
        case 9 : 
            return Json_schema.is_nullable(enc[1]);
        case 10 : 
            _enc = enc[2];
            continue ;
        case 11 : 
            _enc = enc[0][/* encoding */3];
            continue ;
        case 12 : 
            _enc = Curry._1(enc[0][/* self */3], enc);
            continue ;
        case 13 : 
            return List.exists((function (param) {
                          return is_nullable(param[0][/* encoding */0]);
                        }), enc[0]);
        default:
          return false;
      }
    }
  };
}

function option(t) {
  if (is_nullable(t)) {
    Pervasives.invalid_arg("Json_encoding.option: cannot nest nullable encodings");
  }
  return /* Option */Block.__(0, [t]);
}

var read = Json_repr.repr_to_any;

var write = Json_repr.any_to_repr;

var any_value_000 = /* record */[
  /* write */write,
  /* read */read
];

var any_value = /* Custom */Block.__(9, [
    any_value_000,
    Json_schema.any
  ]);

function read$1(repr, v) {
  return Json_repr.convert(repr, Json_repr.Ezjsonm, v);
}

function write$1(repr, v) {
  return Json_repr.convert(Json_repr.Ezjsonm, repr, v);
}

var any_ezjson_value_000 = /* record */[
  /* write */write$1,
  /* read */read$1
];

var any_ezjson_value = /* Custom */Block.__(9, [
    any_ezjson_value_000,
    Json_schema.any
  ]);

function read$2(Repr, v) {
  var k = Curry._1(Repr[/* view */0], v);
  if (typeof k === "number") {
    throw unexpected(k, "array or object");
  }
  var variant = k[0];
  if (variant !== 65) {
    if (variant !== 79) {
      throw unexpected(k, "array or object");
    }
    return Json_repr.repr_to_any(Repr, v);
  } else {
    return Json_repr.repr_to_any(Repr, v);
  }
}

var write$2 = Json_repr.any_to_repr;

var any_document_000 = /* record */[
  /* write */write$2,
  /* read */read$2
];

var any_document = /* Custom */Block.__(9, [
    any_document_000,
    Json_schema.any
  ]);

var any_schema = custom(Json_schema.to_json, (function (j) {
        try {
          return Json_schema.of_json(j);
        }
        catch (raw_err){
          var err = Caml_js_exceptions.internalToOCamlException(raw_err);
          throw [
                Cannot_destruct,
                /* tuple */[
                  /* [] */0,
                  [
                    Bad_schema,
                    err
                  ]
                ]
              ];
        }
      }), Json_schema.self);

function merge_tups(t1, t2) {
  var is_tup = function (_enc) {
    while(true) {
      var enc = _enc;
      if (typeof enc === "number") {
        return false;
      } else {
        switch (enc.tag | 0) {
          case 7 : 
          case 8 : 
              return true;
          case 10 : 
              if (enc[3] !== undefined) {
                return false;
              } else {
                _enc = enc[2];
                continue ;
              }
          case 11 : 
              _enc = enc[0][/* encoding */3];
              continue ;
          case 12 : 
              _enc = Curry._1(enc[0][/* self */3], enc);
              continue ;
          default:
            return false;
        }
      }
    };
  };
  if (is_tup(t1) && is_tup(t2)) {
    return /* Tups */Block.__(8, [
              t1,
              t2
            ]);
  } else {
    return Pervasives.invalid_arg("Json_encoding.merge_tups");
  }
}

function list(t) {
  return /* Conv */Block.__(10, [
            $$Array.of_list,
            $$Array.to_list,
            /* Array */Block.__(4, [t]),
            undefined
          ]);
}

function merge_objs(o1, o2) {
  var is_obj = function (_enc) {
    while(true) {
      var enc = _enc;
      if (typeof enc === "number") {
        switch (enc) {
          case 1 : 
          case 2 : 
              return true;
          default:
            return false;
        }
      } else {
        switch (enc.tag | 0) {
          case 5 : 
          case 6 : 
              return true;
          case 10 : 
              if (enc[3] !== undefined) {
                return false;
              } else {
                _enc = enc[2];
                continue ;
              }
          case 11 : 
              _enc = enc[0][/* encoding */3];
              continue ;
          case 12 : 
              _enc = Curry._1(enc[0][/* self */3], enc);
              continue ;
          case 13 : 
              return List.for_all((function (param) {
                            return is_obj(param[0][/* encoding */0]);
                          }), enc[0]);
          default:
            return false;
        }
      }
    };
  };
  if (is_obj(o1) && is_obj(o2)) {
    return /* Objs */Block.__(6, [
              o1,
              o2
            ]);
  } else {
    return Pervasives.invalid_arg("Json_encoding.merge_objs");
  }
}

function $$case(encoding, proj, inj) {
  return /* Case */[/* record */[
            /* encoding */encoding,
            /* proj */proj,
            /* inj */inj
          ]];
}

function union(cases) {
  if (cases) {
    return /* Union */Block.__(13, [cases]);
  } else {
    return Pervasives.invalid_arg("Json_encoding.union");
  }
}

function print_error(print_unknown, ppf, _exn) {
  while(true) {
    var exn = _exn;
    var exit = 0;
    if (exn[0] === Cannot_destruct) {
      var match = exn[1];
      var path = match[0];
      if (path) {
        var match$1 = match[1];
        if (match$1[0] === Unexpected) {
          var partial_arg = true;
          return Curry._4(Format.fprintf(ppf, /* Format */[
                          /* String_literal */Block.__(11, [
                              "At ",
                              /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                      ", unexpected ",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* String_literal */Block.__(11, [
                                              " instead of ",
                                              /* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ])
                                    ])])
                            ]),
                          "At %a, unexpected %s instead of %s"
                        ]), (function(partial_arg){
                    return function (param, param$1) {
                      return Json_query.print_path_as_json_path(partial_arg, param, param$1);
                    }
                    }(partial_arg)), path, match$1[1], match$1[2]);
        } else if (match$1[0] === No_case_matched) {
          var partial_arg$1 = true;
          return Curry._4(Format.fprintf(ppf, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<v 2>",
                                        /* End_of_format */0
                                      ]),
                                    "<v 2>"
                                  ]]),
                              /* String_literal */Block.__(11, [
                                  "At ",
                                  /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                          ", no case matched:",
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@,",
                                                  0,
                                                  0
                                                ]),
                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                      /* Close_box */0,
                                                      /* End_of_format */0
                                                    ])])
                                            ])
                                        ])])
                                ])
                            ]),
                          "@[<v 2>At %a, no case matched:@,%a@]"
                        ]), (function(partial_arg$1){
                    return function (param, param$1) {
                      return Json_query.print_path_as_json_path(partial_arg$1, param, param$1);
                    }
                    }(partial_arg$1)), path, (function (param, param$1) {
                        return Format.pp_print_list(undefined, (function (param, param$1) {
                                      return print_error(print_unknown, param, param$1);
                                    }), param, param$1);
                      }), match$1[1]);
        } else if (match$1[0] === Bad_array_size) {
          var partial_arg$2 = true;
          return Curry._4(Format.fprintf(ppf, /* Format */[
                          /* String_literal */Block.__(11, [
                              "At ",
                              /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                      ", unexpected array of size ",
                                      /* Int */Block.__(4, [
                                          /* Int_d */0,
                                          /* No_padding */0,
                                          /* No_precision */0,
                                          /* String_literal */Block.__(11, [
                                              " instead of ",
                                              /* Int */Block.__(4, [
                                                  /* Int_d */0,
                                                  /* No_padding */0,
                                                  /* No_precision */0,
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ])
                                    ])])
                            ]),
                          "At %a, unexpected array of size %d instead of %d"
                        ]), (function(partial_arg$2){
                    return function (param, param$1) {
                      return Json_query.print_path_as_json_path(partial_arg$2, param, param$1);
                    }
                    }(partial_arg$2)), path, match$1[1], match$1[2]);
        } else if (match$1[0] === Missing_field) {
          var partial_arg$3 = true;
          return Curry._3(Format.fprintf(ppf, /* Format */[
                          /* String_literal */Block.__(11, [
                              "At ",
                              /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                      ", missing object field ",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* End_of_format */0
                                        ])
                                    ])])
                            ]),
                          "At %a, missing object field %s"
                        ]), (function(partial_arg$3){
                    return function (param, param$1) {
                      return Json_query.print_path_as_json_path(partial_arg$3, param, param$1);
                    }
                    }(partial_arg$3)), path, match$1[1]);
        } else if (match$1[0] === Unexpected_field) {
          var partial_arg$4 = true;
          return Curry._3(Format.fprintf(ppf, /* Format */[
                          /* String_literal */Block.__(11, [
                              "At ",
                              /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                      ", unexpected object field ",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* End_of_format */0
                                        ])
                                    ])])
                            ]),
                          "At %a, unexpected object field %s"
                        ]), (function(partial_arg$4){
                    return function (param, param$1) {
                      return Json_query.print_path_as_json_path(partial_arg$4, param, param$1);
                    }
                    }(partial_arg$4)), path, match$1[1]);
        } else if (match$1[0] === Bad_schema) {
          var partial_arg$5 = true;
          return Curry._4(Format.fprintf(ppf, /* Format */[
                          /* Formatting_gen */Block.__(18, [
                              /* Open_box */Block.__(1, [/* Format */[
                                    /* String_literal */Block.__(11, [
                                        "<v 2>",
                                        /* End_of_format */0
                                      ]),
                                    "<v 2>"
                                  ]]),
                              /* String_literal */Block.__(11, [
                                  "At ",
                                  /* Alpha */Block.__(15, [/* String_literal */Block.__(11, [
                                          ", bad custom schema:",
                                          /* Formatting_lit */Block.__(17, [
                                              /* Break */Block.__(0, [
                                                  "@,",
                                                  0,
                                                  0
                                                ]),
                                              /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                      /* Close_box */0,
                                                      /* End_of_format */0
                                                    ])])
                                            ])
                                        ])])
                                ])
                            ]),
                          "@[<v 2>At %a, bad custom schema:@,%a@]"
                        ]), (function(partial_arg$5){
                    return function (param, param$1) {
                      return Json_query.print_path_as_json_path(partial_arg$5, param, param$1);
                    }
                    }(partial_arg$5)), path, (function (param, param$1) {
                        return print_error(print_unknown, param, param$1);
                      }), match$1[1]);
        } else {
          exit = 1;
        }
      } else {
        _exn = match[1];
        continue ;
      }
    } else {
      exit = 1;
    }
    if (exit === 1) {
      if (exn[0] === Unexpected) {
        return Curry._2(Format.fprintf(ppf, /* Format */[
                        /* String_literal */Block.__(11, [
                            "Unexpected ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* String_literal */Block.__(11, [
                                    " instead of ",
                                    /* String */Block.__(2, [
                                        /* No_padding */0,
                                        /* End_of_format */0
                                      ])
                                  ])
                              ])
                          ]),
                        "Unexpected %s instead of %s"
                      ]), exn[1], exn[2]);
      } else if (exn[0] === No_case_matched) {
        return Curry._2(Format.fprintf(ppf, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<v 2>",
                                      /* End_of_format */0
                                    ]),
                                  "<v 2>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                "No case matched:",
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@,",
                                        0,
                                        0
                                      ]),
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Close_box */0,
                                            /* End_of_format */0
                                          ])])
                                  ])
                              ])
                          ]),
                        "@[<v 2>No case matched:@,%a@]"
                      ]), (function (param, param$1) {
                      return Format.pp_print_list(undefined, (function (param, param$1) {
                                    return print_error(print_unknown, param, param$1);
                                  }), param, param$1);
                    }), exn[1]);
      } else if (exn[0] === Bad_array_size) {
        return Curry._2(Format.fprintf(ppf, /* Format */[
                        /* String_literal */Block.__(11, [
                            "Unexpected array of size ",
                            /* Int */Block.__(4, [
                                /* Int_d */0,
                                /* No_padding */0,
                                /* No_precision */0,
                                /* String_literal */Block.__(11, [
                                    " instead of ",
                                    /* Int */Block.__(4, [
                                        /* Int_d */0,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* End_of_format */0
                                      ])
                                  ])
                              ])
                          ]),
                        "Unexpected array of size %d instead of %d"
                      ]), exn[1], exn[2]);
      } else if (exn[0] === Missing_field) {
        return Curry._1(Format.fprintf(ppf, /* Format */[
                        /* String_literal */Block.__(11, [
                            "Missing object field ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ]),
                        "Missing object field %s"
                      ]), exn[1]);
      } else if (exn[0] === Unexpected_field) {
        return Curry._1(Format.fprintf(ppf, /* Format */[
                        /* String_literal */Block.__(11, [
                            "Unexpected object field ",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* End_of_format */0
                              ])
                          ]),
                        "Unexpected object field %s"
                      ]), exn[1]);
      } else if (exn[0] === Bad_schema) {
        return Curry._2(Format.fprintf(ppf, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<v 2>",
                                      /* End_of_format */0
                                    ]),
                                  "<v 2>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                "bad custom schema:",
                                /* Formatting_lit */Block.__(17, [
                                    /* Break */Block.__(0, [
                                        "@,",
                                        0,
                                        0
                                      ]),
                                    /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                            /* Close_box */0,
                                            /* End_of_format */0
                                          ])])
                                  ])
                              ])
                          ]),
                        "@[<v 2>bad custom schema:@,%a@]"
                      ]), (function (param, param$1) {
                      return print_error(print_unknown, param, param$1);
                    }), exn[1]);
      } else if (exn[0] === Cannot_destruct) {
        var match$2 = exn[1];
        var partial_arg$6 = true;
        return Curry._4(Format.fprintf(ppf, /* Format */[
                        /* Formatting_gen */Block.__(18, [
                            /* Open_box */Block.__(1, [/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "<v 2>",
                                      /* End_of_format */0
                                    ]),
                                  "<v 2>"
                                ]]),
                            /* String_literal */Block.__(11, [
                                "At ",
                                /* Alpha */Block.__(15, [/* Char_literal */Block.__(12, [
                                        /* ":" */58,
                                        /* Formatting_lit */Block.__(17, [
                                            /* Break */Block.__(0, [
                                                "@,",
                                                0,
                                                0
                                              ]),
                                            /* Alpha */Block.__(15, [/* Formatting_lit */Block.__(17, [
                                                    /* Close_box */0,
                                                    /* End_of_format */0
                                                  ])])
                                          ])
                                      ])])
                              ])
                          ]),
                        "@[<v 2>At %a:@,%a@]"
                      ]), (function(partial_arg$6){
                  return function (param, param$1) {
                    return Json_query.print_path_as_json_path(partial_arg$6, param, param$1);
                  }
                  }(partial_arg$6)), match$2[0], (function (param, param$1) {
                      return print_error(print_unknown, param, param$1);
                    }), match$2[1]);
      } else {
        return Json_schema.print_error(print_unknown, ppf, exn);
      }
    }
    
  };
}

var unit = /* Ignore */2;

var $$null = /* Null */0;

var empty = /* Empty */1;

var bool = /* Bool */3;

var string = /* String */4;

var $$float = /* Float */Block.__(3, [undefined]);

function Make(funarg) {
  var construct = function (enc, v) {
    var construct$1 = function (_enc) {
      while(true) {
        var enc = _enc;
        if (typeof enc === "number") {
          switch (enc) {
            case 0 : 
                return (function (param) {
                    return Curry._1(funarg[/* repr */1], /* Null */870828711);
                  });
            case 1 : 
                return (function (param) {
                    return Curry._1(funarg[/* repr */1], /* `O */[
                                79,
                                /* [] */0
                              ]);
                  });
            case 2 : 
                return (function (param) {
                    return Curry._1(funarg[/* repr */1], /* `O */[
                                79,
                                /* [] */0
                              ]);
                  });
            case 3 : 
                return (function (b) {
                    return Curry._1(funarg[/* repr */1], /* `Bool */[
                                737456202,
                                b
                              ]);
                  });
            case 4 : 
                return (function (s) {
                    return Curry._1(funarg[/* repr */1], /* `String */[
                                -976970511,
                                s
                              ]);
                  });
            
          }
        } else {
          switch (enc.tag | 0) {
            case 0 : 
                var t = enc[0];
                return (function(t){
                return function (param) {
                  if (param !== undefined) {
                    return Curry._1(construct$1(t), Caml_option.valFromOption(param));
                  } else {
                    return Curry._1(funarg[/* repr */1], /* Null */870828711);
                  }
                }
                }(t));
            case 1 : 
                var str = enc[0];
                return (function(str){
                return function (param) {
                  return Curry._1(funarg[/* repr */1], /* `String */[
                              -976970511,
                              str
                            ]);
                }
                }(str));
            case 2 : 
                var match = enc[0];
                var upper_bound = match[/* upper_bound */4];
                var lower_bound = match[/* lower_bound */3];
                var to_float = match[/* to_float */2];
                var int_name = match[/* int_name */0];
                return (function(upper_bound,lower_bound,to_float,int_name){
                return function (i) {
                  if (Caml_obj.caml_lessthan(i, lower_bound) || Caml_obj.caml_greaterthan(i, upper_bound)) {
                    Pervasives.invalid_arg("Json_encoding.construct: " + (int_name + " out of range"));
                  }
                  return Curry._1(funarg[/* repr */1], /* `Float */[
                              365180284,
                              Curry._1(to_float, i)
                            ]);
                }
                }(upper_bound,lower_bound,to_float,int_name));
            case 3 : 
                var match$1 = enc[0];
                if (match$1 !== undefined) {
                  var match$2 = match$1;
                  var maximum = match$2[/* maximum */2];
                  var minimum = match$2[/* minimum */1];
                  var err = "Json_encoding.construct: " + (match$2[/* float_name */0] + " out of range");
                  return (function(maximum,minimum,err){
                  return function ($$float) {
                    if ($$float < minimum || $$float > maximum) {
                      Pervasives.invalid_arg(err);
                    }
                    return Curry._1(funarg[/* repr */1], /* `Float */[
                                365180284,
                                $$float
                              ]);
                  }
                  }(maximum,minimum,err));
                } else {
                  return (function ($$float) {
                      return Curry._1(funarg[/* repr */1], /* `Float */[
                                  365180284,
                                  $$float
                                ]);
                    });
                }
            case 4 : 
                var t$1 = enc[0];
                var w = (function(t$1){
                return function w(v) {
                  return Curry._1(construct$1(t$1), v);
                }
                }(t$1));
                return (function (arr) {
                    return Curry._1(funarg[/* repr */1], /* `A */[
                                65,
                                $$Array.to_list($$Array.map(w, arr))
                              ]);
                  });
            case 5 : 
                var match$3 = enc[0];
                switch (match$3.tag | 0) {
                  case 0 : 
                      var match$4 = match$3[0];
                      var t$2 = match$4[/* encoding */1];
                      var n = match$4[/* name */0];
                      return (function(t$2,n){
                      return function (v) {
                        return Curry._1(funarg[/* repr */1], /* `O */[
                                    79,
                                    /* :: */[
                                      /* tuple */[
                                        n,
                                        Curry._1(construct$1(t$2), v)
                                      ],
                                      /* [] */0
                                    ]
                                  ]);
                      }
                      }(t$2,n));
                  case 1 : 
                      var match$5 = match$3[0];
                      var t$3 = match$5[/* encoding */1];
                      var n$1 = match$5[/* name */0];
                      return (function(t$3,n$1){
                      return function (param) {
                        if (param !== undefined) {
                          return Curry._1(funarg[/* repr */1], /* `O */[
                                      79,
                                      /* :: */[
                                        /* tuple */[
                                          n$1,
                                          Curry._1(construct$1(t$3), Caml_option.valFromOption(param))
                                        ],
                                        /* [] */0
                                      ]
                                    ]);
                        } else {
                          return Curry._1(funarg[/* repr */1], /* `O */[
                                      79,
                                      /* [] */0
                                    ]);
                        }
                      }
                      }(t$3,n$1));
                  case 2 : 
                      var match$6 = match$3[0];
                      var d = match$6[/* default */4];
                      var t$4 = match$6[/* encoding */1];
                      var n$2 = match$6[/* name */0];
                      return (function(d,t$4,n$2){
                      return function (v) {
                        return Curry._1(funarg[/* repr */1], /* `O */[
                                    79,
                                    Caml_obj.caml_notequal(v, d) ? /* :: */[
                                        /* tuple */[
                                          n$2,
                                          Curry._1(construct$1(t$4), v)
                                        ],
                                        /* [] */0
                                      ] : /* [] */0
                                  ]);
                      }
                      }(d,t$4,n$2));
                  
                }
            case 6 : 
                var o2 = enc[1];
                var o1 = enc[0];
                return (function(o2,o1){
                return function (param) {
                  var match = Curry._1(funarg[/* view */0], Curry._1(construct$1(o1), param[0]));
                  var match$1 = Curry._1(funarg[/* view */0], Curry._1(construct$1(o2), param[1]));
                  if (typeof match === "number" || match[0] !== 79 || typeof match$1 === "number" || match$1[0] !== 79) {
                    return Pervasives.invalid_arg("Json_encoding.construct: consequence of bad merge_objs");
                  } else {
                    return Curry._1(funarg[/* repr */1], /* `O */[
                                79,
                                Pervasives.$at(match[1], match$1[1])
                              ]);
                  }
                }
                }(o2,o1));
            case 7 : 
                var t$5 = enc[0];
                return (function(t$5){
                return function (v) {
                  return Curry._1(funarg[/* repr */1], /* `A */[
                              65,
                              /* :: */[
                                Curry._1(construct$1(t$5), v),
                                /* [] */0
                              ]
                            ]);
                }
                }(t$5));
            case 8 : 
                var o2$1 = enc[1];
                var o1$1 = enc[0];
                return (function(o2$1,o1$1){
                return function (param) {
                  var match = Curry._1(funarg[/* view */0], Curry._1(construct$1(o1$1), param[0]));
                  var match$1 = Curry._1(funarg[/* view */0], Curry._1(construct$1(o2$1), param[1]));
                  if (typeof match === "number" || match[0] !== 65 || typeof match$1 === "number" || match$1[0] !== 65) {
                    return Pervasives.invalid_arg("Json_encoding.construct: consequence of bad merge_tups");
                  } else {
                    return Curry._1(funarg[/* repr */1], /* `A */[
                                65,
                                Pervasives.$at(match[1], match$1[1])
                              ]);
                  }
                }
                }(o2$1,o1$1));
            case 9 : 
                var write = enc[0][/* write */0];
                return (function(write){
                return function (j) {
                  return Curry._2(write, funarg, j);
                }
                }(write));
            case 10 : 
                var t$6 = enc[2];
                var ffrom = enc[0];
                return (function(t$6,ffrom){
                return function (v) {
                  return Curry._1(construct$1(t$6), Curry._1(ffrom, v));
                }
                }(t$6,ffrom));
            case 11 : 
                _enc = enc[0][/* encoding */3];
                continue ;
            case 12 : 
                _enc = Curry._1(enc[0][/* self */3], enc);
                continue ;
            case 13 : 
                var cases = enc[0];
                return (function(cases){
                return function (v) {
                  var _param = cases;
                  while(true) {
                    var param = _param;
                    if (param) {
                      var match = param[0][0];
                      var match$1 = Curry._1(match[/* proj */1], v);
                      if (match$1 !== undefined) {
                        return Curry._1(construct$1(match[/* encoding */0]), Caml_option.valFromOption(match$1));
                      } else {
                        _param = param[1];
                        continue ;
                      }
                    } else {
                      return Pervasives.invalid_arg("Json_encoding.construct: consequence of bad union");
                    }
                  };
                }
                }(cases));
            
          }
        }
      };
    };
    return Curry._1(construct$1(enc), v);
  };
  var destruct = function (_enc) {
    while(true) {
      var enc = _enc;
      if (typeof enc === "number") {
        switch (enc) {
          case 0 : 
              return (function (v) {
                  var k = Curry._1(funarg[/* view */0], v);
                  if (k !== 870828711) {
                    throw unexpected(k, "null");
                  } else {
                    return /* () */0;
                  }
                });
          case 1 : 
              return (function (v) {
                  var k = Curry._1(funarg[/* view */0], v);
                  if (typeof k === "number") {
                    throw unexpected(k, "an empty object");
                  }
                  if (k[0] !== 79) {
                    throw unexpected(k, "an empty object");
                  }
                  var match = k[1];
                  if (match) {
                    if (match[1]) {
                      throw unexpected(k, "an empty object");
                    }
                    throw [
                          Cannot_destruct,
                          /* tuple */[
                            /* [] */0,
                            [
                              Unexpected_field,
                              match[0][0]
                            ]
                          ]
                        ];
                  } else {
                    return /* () */0;
                  }
                });
          case 2 : 
              return (function (v) {
                  Curry._1(funarg[/* view */0], v);
                  return /* () */0;
                });
          case 3 : 
              return (function (v) {
                  var k = Curry._1(funarg[/* view */0], v);
                  if (typeof k === "number") {
                    throw unexpected(k, "boolean");
                  }
                  if (k[0] !== 737456202) {
                    throw unexpected(k, "boolean");
                  }
                  return k[1];
                });
          case 4 : 
              return (function (v) {
                  var k = Curry._1(funarg[/* view */0], v);
                  if (typeof k === "number") {
                    throw unexpected(k, "string");
                  }
                  if (k[0] !== -976970511) {
                    throw unexpected(k, "string");
                  }
                  return k[1];
                });
          
        }
      } else {
        switch (enc.tag | 0) {
          case 0 : 
              var t = enc[0];
              return (function(t){
              return function (v) {
                var match = Curry._1(funarg[/* view */0], v);
                if (match !== 870828711) {
                  return Caml_option.some(Curry._1(destruct(t), v));
                }
                
              }
              }(t));
          case 1 : 
              var str = enc[0];
              return (function(str){
              return function (v) {
                var x = Curry._1(funarg[/* view */0], v);
                if (typeof x === "number") {
                  throw unexpected(x, str);
                }
                if (x[0] !== -976970511) {
                  throw unexpected(x, str);
                }
                if (x[1] === str) {
                  return /* () */0;
                } else {
                  throw unexpected(x, str);
                }
              }
              }(str));
          case 2 : 
              var match = enc[0];
              var to_float = match[/* to_float */2];
              var of_float = match[/* of_float */1];
              var int_name = match[/* int_name */0];
              var lower_bound = Curry._1(to_float, match[/* lower_bound */3]);
              var upper_bound = Curry._1(to_float, match[/* upper_bound */4]);
              return (function(of_float,int_name,lower_bound,upper_bound){
              return function (v) {
                var k = Curry._1(funarg[/* view */0], v);
                if (typeof k === "number") {
                  throw unexpected(k, "number");
                }
                if (k[0] !== 365180284) {
                  throw unexpected(k, "number");
                }
                var match = Caml_float.caml_modf_float(k[1]);
                var v$1 = match[1];
                if (match[0] !== 0) {
                  var exn_001 = int_name + " cannot have a fractional part";
                  var exn = [
                    Caml_builtin_exceptions.failure,
                    exn_001
                  ];
                  throw [
                        Cannot_destruct,
                        /* tuple */[
                          /* [] */0,
                          exn
                        ]
                      ];
                }
                if (v$1 < lower_bound || v$1 > upper_bound) {
                  var exn_001$1 = int_name + " out of range";
                  var exn$1 = [
                    Caml_builtin_exceptions.failure,
                    exn_001$1
                  ];
                  throw [
                        Cannot_destruct,
                        /* tuple */[
                          /* [] */0,
                          exn$1
                        ]
                      ];
                }
                return Curry._1(of_float, v$1);
              }
              }(of_float,int_name,lower_bound,upper_bound));
          case 3 : 
              var match$1 = enc[0];
              if (match$1 !== undefined) {
                var match$2 = match$1;
                var maximum = match$2[/* maximum */2];
                var minimum = match$2[/* minimum */1];
                var float_name = match$2[/* float_name */0];
                return (function(maximum,minimum,float_name){
                return function (v) {
                  var k = Curry._1(funarg[/* view */0], v);
                  if (typeof k === "number") {
                    throw unexpected(k, "float");
                  }
                  if (k[0] !== 365180284) {
                    throw unexpected(k, "float");
                  }
                  var f = k[1];
                  if (f < minimum || f > maximum) {
                    var exn_001 = float_name + " out of range";
                    var exn = [
                      Caml_builtin_exceptions.failure,
                      exn_001
                    ];
                    throw [
                          Cannot_destruct,
                          /* tuple */[
                            /* [] */0,
                            exn
                          ]
                        ];
                  } else {
                    return f;
                  }
                }
                }(maximum,minimum,float_name));
              } else {
                return (function (v) {
                    var k = Curry._1(funarg[/* view */0], v);
                    if (typeof k === "number") {
                      throw unexpected(k, "float");
                    }
                    if (k[0] !== 365180284) {
                      throw unexpected(k, "float");
                    }
                    return k[1];
                  });
              }
          case 4 : 
              var t$1 = enc[0];
              return (function(t$1){
              return function (v) {
                var k = Curry._1(funarg[/* view */0], v);
                if (typeof k === "number") {
                  throw unexpected(k, "array");
                }
                var variant = k[0];
                if (variant !== 65) {
                  if (variant !== 79) {
                    throw unexpected(k, "array");
                  }
                  if (k[1]) {
                    throw unexpected(k, "array");
                  }
                  return /* array */[];
                } else {
                  return $$Array.mapi((function (i, cell) {
                                try {
                                  return Curry._1(destruct(t$1), cell);
                                }
                                catch (raw_exn){
                                  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                                  if (exn[0] === Cannot_destruct) {
                                    var match = exn[1];
                                    throw [
                                          Cannot_destruct,
                                          /* tuple */[
                                            /* :: */[
                                              /* `Index */[
                                                -784200974,
                                                i
                                              ],
                                              match[0]
                                            ],
                                            match[1]
                                          ]
                                        ];
                                  } else {
                                    throw exn;
                                  }
                                }
                              }), $$Array.of_list(k[1]));
                }
              }
              }(t$1));
          case 5 : 
              var d = destruct_obj(enc);
              return (function(d){
              return function (v) {
                var k = Curry._1(funarg[/* view */0], v);
                if (typeof k === "number") {
                  throw unexpected(k, "object");
                }
                if (k[0] !== 79) {
                  throw unexpected(k, "object");
                }
                var match = Curry._1(d, k[1]);
                var rest = match[1];
                var r = match[0];
                if (rest) {
                  if (!match[2]) {
                    throw [
                          Unexpected_field,
                          rest[0][0]
                        ];
                  }
                  return r;
                } else {
                  return r;
                }
              }
              }(d));
          case 6 : 
              var d$1 = destruct_obj(enc);
              return (function(d$1){
              return function (v) {
                var k = Curry._1(funarg[/* view */0], v);
                if (typeof k === "number") {
                  throw unexpected(k, "object");
                }
                if (k[0] !== 79) {
                  throw unexpected(k, "object");
                }
                var match = Curry._1(d$1, k[1]);
                var rest = match[1];
                var r = match[0];
                if (rest) {
                  if (!match[2]) {
                    throw [
                          Unexpected_field,
                          rest[0][0]
                        ];
                  }
                  return r;
                } else {
                  return r;
                }
              }
              }(d$1));
          case 7 : 
              var match$3 = destruct_tup(0, enc);
              var i = match$3[1];
              var r = match$3[0];
              return (function(i,r){
              return function (v) {
                var k = Curry._1(funarg[/* view */0], v);
                if (typeof k === "number") {
                  throw unexpected(k, "array");
                }
                if (k[0] !== 65) {
                  throw unexpected(k, "array");
                }
                var cells = $$Array.of_list(k[1]);
                var len = cells.length;
                if (i !== cells.length) {
                  throw [
                        Cannot_destruct,
                        /* tuple */[
                          /* [] */0,
                          [
                            Bad_array_size,
                            len,
                            i
                          ]
                        ]
                      ];
                }
                return Curry._1(r, cells);
              }
              }(i,r));
          case 8 : 
              var match$4 = destruct_tup(0, enc);
              var i$1 = match$4[1];
              var r$1 = match$4[0];
              return (function(i$1,r$1){
              return function (v) {
                var k = Curry._1(funarg[/* view */0], v);
                if (typeof k === "number") {
                  throw unexpected(k, "array");
                }
                if (k[0] !== 65) {
                  throw unexpected(k, "array");
                }
                var cells = $$Array.of_list(k[1]);
                var len = cells.length;
                if (i$1 !== cells.length) {
                  throw [
                        Cannot_destruct,
                        /* tuple */[
                          /* [] */0,
                          [
                            Bad_array_size,
                            len,
                            i$1
                          ]
                        ]
                      ];
                }
                return Curry._1(r$1, cells);
              }
              }(i$1,r$1));
          case 9 : 
              return Curry._1(enc[0][/* read */1], funarg);
          case 10 : 
              var t$2 = enc[2];
              var fto = enc[1];
              return (function(t$2,fto){
              return function (v) {
                return Curry._1(fto, Curry._1(destruct(t$2), v));
              }
              }(t$2,fto));
          case 11 : 
              _enc = enc[0][/* encoding */3];
              continue ;
          case 12 : 
              _enc = Curry._1(enc[0][/* self */3], enc);
              continue ;
          case 13 : 
              var cases = enc[0];
              return (function(cases){
              return function (v) {
                var _errs = /* [] */0;
                var _param = cases;
                while(true) {
                  var param = _param;
                  var errs = _errs;
                  if (param) {
                    var match = param[0][0];
                    try {
                      return Curry._1(match[/* inj */2], Curry._1(destruct(match[/* encoding */0]), v));
                    }
                    catch (raw_err){
                      var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                      _param = param[1];
                      _errs = /* :: */[
                        err,
                        errs
                      ];
                      continue ;
                    }
                  } else {
                    throw [
                          Cannot_destruct,
                          /* tuple */[
                            /* [] */0,
                            [
                              No_case_matched,
                              List.rev(errs)
                            ]
                          ]
                        ];
                  }
                };
              }
              }(cases));
          
        }
      }
    };
  };
  var destruct_tup = function (i, _t) {
    while(true) {
      var t = _t;
      if (typeof t === "number") {
        return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_tups");
      } else {
        switch (t.tag | 0) {
          case 7 : 
              var t$1 = t[0];
              return /* tuple */[
                      (function(t$1){
                      return function (arr) {
                        try {
                          return Curry._1(destruct(t$1), Caml_array.caml_array_get(arr, i));
                        }
                        catch (raw_exn){
                          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                          if (exn[0] === Cannot_destruct) {
                            var match = exn[1];
                            throw [
                                  Cannot_destruct,
                                  /* tuple */[
                                    /* :: */[
                                      /* `Index */[
                                        -784200974,
                                        i
                                      ],
                                      match[0]
                                    ],
                                    match[1]
                                  ]
                                ];
                          } else {
                            throw exn;
                          }
                        }
                      }
                      }(t$1)),
                      i + 1 | 0
                    ];
          case 8 : 
              var match = destruct_tup(i, t[0]);
              var r1 = match[0];
              var match$1 = destruct_tup(match[1], t[1]);
              var r2 = match$1[0];
              return /* tuple */[
                      (function(r1,r2){
                      return function (arr) {
                        return /* tuple */[
                                Curry._1(r1, arr),
                                Curry._1(r2, arr)
                              ];
                      }
                      }(r1,r2)),
                      match$1[1]
                    ];
          case 10 : 
              var fto = t[1];
              var match$2 = destruct_tup(i, t[2]);
              var r = match$2[0];
              return /* tuple */[
                      (function(fto,r){
                      return function (arr) {
                        return Curry._1(fto, Curry._1(r, arr));
                      }
                      }(fto,r)),
                      match$2[1]
                    ];
          case 11 : 
              _t = t[0][/* encoding */3];
              continue ;
          case 12 : 
              _t = Curry._1(t[0][/* self */3], t);
              continue ;
          default:
            return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_tups");
        }
      }
    };
  };
  var destruct_obj = function (_t) {
    while(true) {
      var t = _t;
      var assoc = function (_acc, n, _param) {
        while(true) {
          var param = _param;
          var acc = _acc;
          if (param) {
            var rest = param[1];
            var oth = param[0];
            if (Caml_obj.caml_equal(n, oth[0])) {
              return /* tuple */[
                      oth[1],
                      Pervasives.$at(acc, rest)
                    ];
            } else {
              _param = rest;
              _acc = /* :: */[
                oth,
                acc
              ];
              continue ;
            }
          } else {
            throw Caml_builtin_exceptions.not_found;
          }
        };
      };
      if (typeof t === "number") {
        switch (t) {
          case 1 : 
              return (function (fields) {
                  return /* tuple */[
                          /* () */0,
                          fields,
                          false
                        ];
                });
          case 2 : 
              return (function (fields) {
                  return /* tuple */[
                          /* () */0,
                          fields,
                          true
                        ];
                });
          default:
            return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_objs");
        }
      } else {
        switch (t.tag | 0) {
          case 5 : 
              var match = t[0];
              switch (match.tag | 0) {
                case 0 : 
                    var match$1 = match[0];
                    var t$1 = match$1[/* encoding */1];
                    var n = match$1[/* name */0];
                    return (function(t$1,n){
                    return function (fields) {
                      try {
                        var match = assoc(/* [] */0, n, fields);
                        return /* tuple */[
                                Curry._1(destruct(t$1), match[0]),
                                match[1],
                                false
                              ];
                      }
                      catch (raw_exn){
                        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                        if (exn === Caml_builtin_exceptions.not_found) {
                          throw [
                                Cannot_destruct,
                                /* tuple */[
                                  /* [] */0,
                                  [
                                    Missing_field,
                                    n
                                  ]
                                ]
                              ];
                        }
                        if (exn[0] === Cannot_destruct) {
                          var match$1 = exn[1];
                          throw [
                                Cannot_destruct,
                                /* tuple */[
                                  /* :: */[
                                    /* `Field */[
                                      331416730,
                                      n
                                    ],
                                    match$1[0]
                                  ],
                                  match$1[1]
                                ]
                              ];
                        } else {
                          throw exn;
                        }
                      }
                    }
                    }(t$1,n));
                case 1 : 
                    var match$2 = match[0];
                    var t$2 = match$2[/* encoding */1];
                    var n$1 = match$2[/* name */0];
                    return (function(t$2,n$1){
                    return function (fields) {
                      try {
                        var match = assoc(/* [] */0, n$1, fields);
                        return /* tuple */[
                                Caml_option.some(Curry._1(destruct(t$2), match[0])),
                                match[1],
                                false
                              ];
                      }
                      catch (raw_exn){
                        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                        if (exn === Caml_builtin_exceptions.not_found) {
                          return /* tuple */[
                                  undefined,
                                  fields,
                                  false
                                ];
                        } else if (exn[0] === Cannot_destruct) {
                          var match$1 = exn[1];
                          throw [
                                Cannot_destruct,
                                /* tuple */[
                                  /* :: */[
                                    /* `Field */[
                                      331416730,
                                      n$1
                                    ],
                                    match$1[0]
                                  ],
                                  match$1[1]
                                ]
                              ];
                        } else {
                          throw exn;
                        }
                      }
                    }
                    }(t$2,n$1));
                case 2 : 
                    var match$3 = match[0];
                    var d = match$3[/* default */4];
                    var t$3 = match$3[/* encoding */1];
                    var n$2 = match$3[/* name */0];
                    return (function(d,t$3,n$2){
                    return function (fields) {
                      try {
                        var match = assoc(/* [] */0, n$2, fields);
                        return /* tuple */[
                                Curry._1(destruct(t$3), match[0]),
                                match[1],
                                false
                              ];
                      }
                      catch (raw_exn){
                        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                        if (exn === Caml_builtin_exceptions.not_found) {
                          return /* tuple */[
                                  d,
                                  fields,
                                  false
                                ];
                        } else if (exn[0] === Cannot_destruct) {
                          var match$1 = exn[1];
                          throw [
                                Cannot_destruct,
                                /* tuple */[
                                  /* :: */[
                                    /* `Field */[
                                      331416730,
                                      n$2
                                    ],
                                    match$1[0]
                                  ],
                                  match$1[1]
                                ]
                              ];
                        } else {
                          throw exn;
                        }
                      }
                    }
                    }(d,t$3,n$2));
                
              }
          case 6 : 
              var d1 = destruct_obj(t[0]);
              var d2 = destruct_obj(t[1]);
              return (function(d1,d2){
              return function (fields) {
                var match = Curry._1(d1, fields);
                var match$1 = Curry._1(d2, match[1]);
                return /* tuple */[
                        /* tuple */[
                          match[0],
                          match$1[0]
                        ],
                        match$1[1],
                        match[2] || match$1[2]
                      ];
              }
              }(d1,d2));
          case 10 : 
              var fto = t[1];
              var d$1 = destruct_obj(t[2]);
              return (function(fto,d$1){
              return function (fields) {
                var match = Curry._1(d$1, fields);
                return /* tuple */[
                        Curry._1(fto, match[0]),
                        match[1],
                        match[2]
                      ];
              }
              }(fto,d$1));
          case 11 : 
              _t = t[0][/* encoding */3];
              continue ;
          case 12 : 
              _t = Curry._1(t[0][/* self */3], t);
              continue ;
          case 13 : 
              var cases = t[0];
              return (function(cases){
              return function (fields) {
                var _errs = /* [] */0;
                var _param = cases;
                while(true) {
                  var param = _param;
                  var errs = _errs;
                  if (param) {
                    var match = param[0][0];
                    try {
                      var match$1 = Curry._1(destruct_obj(match[/* encoding */0]), fields);
                      return /* tuple */[
                              Curry._1(match[/* inj */2], match$1[0]),
                              match$1[1],
                              match$1[2]
                            ];
                    }
                    catch (raw_err){
                      var err = Caml_js_exceptions.internalToOCamlException(raw_err);
                      _param = param[1];
                      _errs = /* :: */[
                        err,
                        errs
                      ];
                      continue ;
                    }
                  } else {
                    throw [
                          Cannot_destruct,
                          /* tuple */[
                            /* [] */0,
                            [
                              No_case_matched,
                              List.rev(errs)
                            ]
                          ]
                        ];
                  }
                };
              }
              }(cases));
          default:
            return Pervasives.invalid_arg("Json_encoding.destruct: consequence of bad merge_objs");
        }
      }
    };
  };
  var custom = function (write, read, schema) {
    var read$1 = function (Repr_f, repr) {
      return Curry._1(read, Json_repr.convert(Repr_f, funarg, repr));
    };
    var write$1 = function (Repr_f, v) {
      return Json_repr.convert(funarg, Repr_f, Curry._1(write, v));
    };
    return /* Custom */Block.__(9, [
              /* record */[
                /* write */write$1,
                /* read */read$1
              ],
              schema
            ]);
  };
  return [
          construct,
          destruct,
          custom
        ];
}

exports.construct = construct;
exports.destruct = destruct;
exports.unit = unit;
exports.$$null = $$null;
exports.empty = empty;
exports.$$int = $$int;
exports.int32 = int32;
exports.int53 = int53;
exports.ranged_int = ranged_int;
exports.ranged_int32 = ranged_int32;
exports.ranged_int53 = ranged_int53;
exports.bool = bool;
exports.string = string;
exports.constant = constant;
exports.bytes = bytes;
exports.$$float = $$float;
exports.ranged_float = ranged_float;
exports.option = option;
exports.req = req;
exports.opt = opt;
exports.dft = dft;
exports.obj1 = obj1;
exports.obj2 = obj2;
exports.obj3 = obj3;
exports.obj4 = obj4;
exports.obj5 = obj5;
exports.obj6 = obj6;
exports.obj7 = obj7;
exports.obj8 = obj8;
exports.obj9 = obj9;
exports.obj10 = obj10;
exports.merge_objs = merge_objs;
exports.array = array;
exports.list = list;
exports.tup1 = tup1;
exports.tup2 = tup2;
exports.tup3 = tup3;
exports.tup4 = tup4;
exports.tup5 = tup5;
exports.tup6 = tup6;
exports.tup7 = tup7;
exports.tup8 = tup8;
exports.tup9 = tup9;
exports.tup10 = tup10;
exports.merge_tups = merge_tups;
exports.$$case = $$case;
exports.union = union;
exports.custom = custom;
exports.conv = conv;
exports.mu = mu;
exports.any_ezjson_value = any_ezjson_value;
exports.any_document = any_document;
exports.any_schema = any_schema;
exports.schema = schema;
exports.def = def;
exports.Cannot_destruct = Cannot_destruct;
exports.Unexpected = Unexpected;
exports.No_case_matched = No_case_matched;
exports.Bad_array_size = Bad_array_size;
exports.Missing_field = Missing_field;
exports.Unexpected_field = Unexpected_field;
exports.Bad_schema = Bad_schema;
exports.print_error = print_error;
exports.Make = Make;
exports.repr_agnostic_custom = repr_agnostic_custom;
exports.any_value = any_value;
exports.is_nullable = is_nullable;
/* any_schema Not a pure module */
